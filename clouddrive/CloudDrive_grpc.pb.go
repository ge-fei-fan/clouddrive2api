// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: clouddrive/CloudDrive.proto

package clouddrive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudDriveFileSrvClient is the client API for CloudDriveFileSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudDriveFileSrvClient interface {
	// public methods, no authorization is required
	// returns if clouddrive has logged in to cloudfs server and the user name
	GetSystemInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CloudDriveSystemInfo, error)
	// get bearer token by username and password
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*JWTToken, error)
	// login to cloudfs server
	Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// register a new count
	Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// asks cloudfs server to send reset account email with reset link
	SendResetAccountEmail(ctx context.Context, in *SendResetAccountEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// reset account's data, set new password, with received reset code from email
	ResetAccount(ctx context.Context, in *ResetAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// authorized methods, Authorization header with Bearer {token} is requirerd
	// asks cloudfs server to send confirm email with confirm link
	SendConfirmEmail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// confirm email by confirm code
	ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get account status
	GetAccountStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccountStatusResult, error)
	// get all subfiles by path
	GetSubFiles(ctx context.Context, in *ListSubFileRequest, opts ...grpc.CallOption) (CloudDriveFileSrv_GetSubFilesClient, error)
	// search under path
	GetSearchResults(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (CloudDriveFileSrv_GetSearchResultsClient, error)
	// find file info by full path
	FindFileByPath(ctx context.Context, in *FindFileByPathRequest, opts ...grpc.CallOption) (*CloudDriveFile, error)
	// create a folder under path
	CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*CreateFolderResult, error)
	// rename a single file
	RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// batch rename files
	RenameFiles(ctx context.Context, in *RenameFilesRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// move files to a dest folder
	MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// delete a single file
	DeleteFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// delete a single file permanently, only aliyundrive supports this currently
	DeleteFilePermanently(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// batch delete files
	DeleteFiles(ctx context.Context, in *MultiFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// batch delete files permanently, only aliyundrive supports this currently
	DeleteFilesPermanently(ctx context.Context, in *MultiFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// add offline files by providing magnet, sha1, ..., applies only with folders
	// with canOfflineDownload is tru
	AddOfflineFiles(ctx context.Context, in *AddOfflineFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// remove offline files by info hash
	RemoveOfflineFiles(ctx context.Context, in *RemoveOfflineFilesRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// list offline files
	ListOfflineFilesByPath(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*OfflineFileListResult, error)
	// list all offline files of a cloud with pagination
	ListAllOfflineFiles(ctx context.Context, in *OfflineFileListAllRequest, opts ...grpc.CallOption) (*OfflineFileListAllResult, error)
	// get folder properties, applies only with folders with hasDetailProperties
	// is true
	GetFileDetailProperties(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileDetailProperties, error)
	// get total/free/used space of a cloud path
	GetSpaceInfo(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*SpaceInfo, error)
	// get cloud account memberships
	GetCloudMemberships(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*CloudMemberships, error)
	// get server runtime info
	GetRuntimeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RuntimeInfo, error)
	// get server stats, including cpu/mem/uptime
	GetRunningInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RunInfo, error)
	// logout from cloudfs server
	Logout(ctx context.Context, in *UserLogoutRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// check if current user can add more mount point
	CanAddMoreMountPoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileOperationResult, error)
	// get all mount points
	GetMountPoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMountPointsResult, error)
	// add a new mount point
	AddMountPoint(ctx context.Context, in *MountOption, opts ...grpc.CallOption) (*MountPointResult, error)
	// remove a mountpoint
	RemoveMountPoint(ctx context.Context, in *MountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error)
	// mount a mount point
	Mount(ctx context.Context, in *MountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error)
	// unmount a mount point
	Unmount(ctx context.Context, in *MountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error)
	// change mount point settings
	UpdateMountPoint(ctx context.Context, in *UpdateMountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error)
	// get all unused drive letters from server's local storage, applies to
	// windows only
	GetAvailableDriveLetters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAvailableDriveLettersResult, error)
	// check if server has driver letters, returns true only on windows
	HasDriveLetters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HasDriveLettersResult, error)
	// get subfiles of a local path, used for adding mountpoint from web ui
	LocalGetSubFiles(ctx context.Context, in *LocalGetSubFilesRequest, opts ...grpc.CallOption) (CloudDriveFileSrv_LocalGetSubFilesClient, error)
	// get all transfer tasks' count
	GetAllTasksCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllTasksCountResult, error)
	// get download tasks' count
	GetDownloadFileCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDownloadFileCountResult, error)
	// get all download tasks
	GetDownloadFileList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDownloadFileListResult, error)
	// get all upload tasks' count
	GetUploadFileCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUploadFileCountResult, error)
	// get upload tasks, paged by providing page number and items per page and
	// file name filter
	GetUploadFileList(ctx context.Context, in *GetUploadFileListRequest, opts ...grpc.CallOption) (*GetUploadFileListResult, error)
	// cancel all upload tasks
	CancelAllUploadFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// cancel selected upload tasks
	CancelUploadFiles(ctx context.Context, in *MultpleUploadFileKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// pause all upload tasks
	PauseAllUploadFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// pause selected upload tasks
	PauseUploadFiles(ctx context.Context, in *MultpleUploadFileKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// resume all upload tasks
	ResumeAllUploadFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// resume selected upload tasks
	ResumeUploadFiles(ctx context.Context, in *MultpleUploadFileKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// check if current user can add more cloud apis
	CanAddMoreCloudApis(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileOperationResult, error)
	// add 115 cloud with editthiscookie
	APILogin115Editthiscookie(ctx context.Context, in *Login115EditthiscookieRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add 115 cloud with qr scanning
	APILogin115QRCode(ctx context.Context, in *Login115QrCodeRequest, opts ...grpc.CallOption) (CloudDriveFileSrv_APILogin115QRCodeClient, error)
	// add AliyunDriveOpen with OAuth result
	APILoginAliyundriveOAuth(ctx context.Context, in *LoginAliyundriveOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add AliyunDrive with refresh token
	APILoginAliyundriveRefreshtoken(ctx context.Context, in *LoginAliyundriveRefreshtokenRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add AliyunDrive with qr scanning
	APILoginAliyunDriveQRCode(ctx context.Context, in *LoginAliyundriveQRCodeRequest, opts ...grpc.CallOption) (CloudDriveFileSrv_APILoginAliyunDriveQRCodeClient, error)
	// add BaiduPan with OAuth result
	APILoginBaiduPanOAuth(ctx context.Context, in *LoginBaiduPanOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add OneDrive with OAuth result
	APILoginOneDriveOAuth(ctx context.Context, in *LoginOneDriveOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add Google Drive with OAuth result
	ApiLoginGoogleDriveOAuth(ctx context.Context, in *LoginGoogleDriveOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add Google Drive with refresh token
	ApiLoginGoogleDriveRefreshToken(ctx context.Context, in *LoginGoogleDriveRefreshTokenRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add Xunlei Drive with OAuth result
	ApiLoginXunleiOAuth(ctx context.Context, in *LoginXunleiOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add 189 cloud with qr scanning
	APILogin189QRCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CloudDriveFileSrv_APILogin189QRCodeClient, error)
	// add PikPak cloud with username and password
	APILoginPikPak(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add webdav
	APILoginWebDav(ctx context.Context, in *LoginWebDavRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// add local folder
	APIAddLocalFolder(ctx context.Context, in *AddLocalFolderRequest, opts ...grpc.CallOption) (*APILoginResult, error)
	// remove a cloud
	RemoveCloudAPI(ctx context.Context, in *RemoveCloudAPIRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// get all cloud apis
	GetAllCloudApis(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CloudAPIList, error)
	// get CloudAPI configuration
	GetCloudAPIConfig(ctx context.Context, in *GetCloudAPIConfigRequest, opts ...grpc.CallOption) (*CloudAPIConfig, error)
	// set CloudAPI configuration
	SetCloudAPIConfig(ctx context.Context, in *SetCloudAPIConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get all system setings value
	GetSystemSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemSettings, error)
	// set selected system settings value
	SetSystemSettings(ctx context.Context, in *SystemSettings, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// set dir cache time
	SetDirCacheTimeSecs(ctx context.Context, in *SetDirCacheTimeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get dir cache time in effect (default value will be returned)
	GetEffectiveDirCacheTimeSecs(ctx context.Context, in *GetEffectiveDirCacheTimeRequest, opts ...grpc.CallOption) (*GetEffectiveDirCacheTimeResult, error)
	// get open file table
	GetOpenFileTable(ctx context.Context, in *GetOpenFileTableRequest, opts ...grpc.CallOption) (*OpenFileTable, error)
	// get dir cache table
	GetDirCacheTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DirCacheTable, error)
	// get referenced entry paths of parent path
	GetReferencedEntryPaths(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*StringList, error)
	// get temp file table
	GetTempFileTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TempFileTable, error)
	// push upload/download task count changes to client, also can be used for
	// client to detect conenction broken
	PushTaskChange(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CloudDriveFileSrv_PushTaskChangeClient, error)
	// get CloudDrive1's user data string
	GetCloudDrive1UserData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringResult, error)
	// restart service
	RestartService(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// shutdown service
	ShutdownService(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// check if has updates available
	HasUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UpdateResult, error)
	// check software updates
	CheckUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UpdateResult, error)
	// download newest version
	DownloadUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// update to newest version
	UpdateSystem(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get file metadata
	GetMetaData(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileMetaData, error)
	// get file's original path from search result
	GetOriginalPath(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*StringResult, error)
	// change password
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// create a new file
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResult, error)
	// close an opened file
	CloseFile(ctx context.Context, in *CloseFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error)
	// write a stream to an opened file
	WriteToFileStream(ctx context.Context, opts ...grpc.CallOption) (CloudDriveFileSrv_WriteToFileStreamClient, error)
	// write to an opened file
	WriteToFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResult, error)
	// get promotions
	GetPromotions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPromotionsResult, error)
	// update promotion result after purchased
	UpdatePromotionResult(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// get cloudfs plans
	GetCloudDrivePlans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCloudDrivePlansResult, error)
	// join a plan
	JoinPlan(ctx context.Context, in *JoinPlanRequest, opts ...grpc.CallOption) (*JoinPlanResult, error)
	// bind account to a cloud account id
	BindCloudAccount(ctx context.Context, in *BindCloudAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// transfer balance to another user
	TransferBalance(ctx context.Context, in *TransferBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// change email
	ChangeEmail(ctx context.Context, in *ChangeUserNameEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// chech balance log
	GetBalanceLog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BalanceLogResult, error)
	// check activation code for a plan
	CheckActivationCode(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*CheckActivationCodeResult, error)
	// Activate plan using an activation code
	ActivatePlan(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*JoinPlanResult, error)
	// check counpon code for a plan
	CheckCouponCode(ctx context.Context, in *CheckCouponCodeRequest, opts ...grpc.CallOption) (*CouponCodeResult, error)
	// get referral code of current user
	GetReferralCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringValue, error)
	// // list all backups
	BackupGetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BackupList, error)
	// add a backup
	BackupAdd(ctx context.Context, in *Backup, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// remove a backup by it's source path
	BackupRemove(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// update a backup
	BackupUpdate(ctx context.Context, in *Backup, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// add destinations to a backup
	BackupAddDestination(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// remove destinations from a backup
	BackupRemoveDestination(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// enable/disable a backup
	BackupSetEnabled(ctx context.Context, in *BackupSetEnabledRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// enable/disable a backup's FileSystemWatch
	BackupSetFileSystemWatchEnabled(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// deprecated, use BackupUpdate instead
	BackupUpdateStrategies(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BackupRestartWalkingThrough(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CanAddMoreBackups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileOperationResult, error)
}

type cloudDriveFileSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudDriveFileSrvClient(cc grpc.ClientConnInterface) CloudDriveFileSrvClient {
	return &cloudDriveFileSrvClient{cc}
}

func (c *cloudDriveFileSrvClient) GetSystemInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CloudDriveSystemInfo, error) {
	out := new(CloudDriveSystemInfo)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetSystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*JWTToken, error) {
	out := new(JWTToken)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) SendResetAccountEmail(ctx context.Context, in *SendResetAccountEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/SendResetAccountEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ResetAccount(ctx context.Context, in *ResetAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ResetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) SendConfirmEmail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/SendConfirmEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ConfirmEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetAccountStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccountStatusResult, error) {
	out := new(AccountStatusResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetAccountStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetSubFiles(ctx context.Context, in *ListSubFileRequest, opts ...grpc.CallOption) (CloudDriveFileSrv_GetSubFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[0], "/clouddrive.CloudDriveFileSrv/GetSubFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudDriveFileSrvGetSubFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudDriveFileSrv_GetSubFilesClient interface {
	Recv() (*SubFilesReply, error)
	grpc.ClientStream
}

type cloudDriveFileSrvGetSubFilesClient struct {
	grpc.ClientStream
}

func (x *cloudDriveFileSrvGetSubFilesClient) Recv() (*SubFilesReply, error) {
	m := new(SubFilesReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudDriveFileSrvClient) GetSearchResults(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (CloudDriveFileSrv_GetSearchResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[1], "/clouddrive.CloudDriveFileSrv/GetSearchResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudDriveFileSrvGetSearchResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudDriveFileSrv_GetSearchResultsClient interface {
	Recv() (*SubFilesReply, error)
	grpc.ClientStream
}

type cloudDriveFileSrvGetSearchResultsClient struct {
	grpc.ClientStream
}

func (x *cloudDriveFileSrvGetSearchResultsClient) Recv() (*SubFilesReply, error) {
	m := new(SubFilesReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudDriveFileSrvClient) FindFileByPath(ctx context.Context, in *FindFileByPathRequest, opts ...grpc.CallOption) (*CloudDriveFile, error) {
	out := new(CloudDriveFile)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/FindFileByPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*CreateFolderResult, error) {
	out := new(CreateFolderResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/CreateFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/RenameFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RenameFiles(ctx context.Context, in *RenameFilesRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/RenameFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/MoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) DeleteFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) DeleteFilePermanently(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/DeleteFilePermanently", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) DeleteFiles(ctx context.Context, in *MultiFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/DeleteFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) DeleteFilesPermanently(ctx context.Context, in *MultiFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/DeleteFilesPermanently", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) AddOfflineFiles(ctx context.Context, in *AddOfflineFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/AddOfflineFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RemoveOfflineFiles(ctx context.Context, in *RemoveOfflineFilesRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/RemoveOfflineFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ListOfflineFilesByPath(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*OfflineFileListResult, error) {
	out := new(OfflineFileListResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ListOfflineFilesByPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ListAllOfflineFiles(ctx context.Context, in *OfflineFileListAllRequest, opts ...grpc.CallOption) (*OfflineFileListAllResult, error) {
	out := new(OfflineFileListAllResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ListAllOfflineFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetFileDetailProperties(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileDetailProperties, error) {
	out := new(FileDetailProperties)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetFileDetailProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetSpaceInfo(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*SpaceInfo, error) {
	out := new(SpaceInfo)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetSpaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetCloudMemberships(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*CloudMemberships, error) {
	out := new(CloudMemberships)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetCloudMemberships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetRuntimeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RuntimeInfo, error) {
	out := new(RuntimeInfo)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetRuntimeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetRunningInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RunInfo, error) {
	out := new(RunInfo)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetRunningInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) Logout(ctx context.Context, in *UserLogoutRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CanAddMoreMountPoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/CanAddMoreMountPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetMountPoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMountPointsResult, error) {
	out := new(GetMountPointsResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetMountPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) AddMountPoint(ctx context.Context, in *MountOption, opts ...grpc.CallOption) (*MountPointResult, error) {
	out := new(MountPointResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/AddMountPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RemoveMountPoint(ctx context.Context, in *MountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error) {
	out := new(MountPointResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/RemoveMountPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) Mount(ctx context.Context, in *MountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error) {
	out := new(MountPointResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/Mount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) Unmount(ctx context.Context, in *MountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error) {
	out := new(MountPointResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/Unmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) UpdateMountPoint(ctx context.Context, in *UpdateMountPointRequest, opts ...grpc.CallOption) (*MountPointResult, error) {
	out := new(MountPointResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/UpdateMountPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetAvailableDriveLetters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAvailableDriveLettersResult, error) {
	out := new(GetAvailableDriveLettersResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetAvailableDriveLetters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) HasDriveLetters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HasDriveLettersResult, error) {
	out := new(HasDriveLettersResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/HasDriveLetters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) LocalGetSubFiles(ctx context.Context, in *LocalGetSubFilesRequest, opts ...grpc.CallOption) (CloudDriveFileSrv_LocalGetSubFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[2], "/clouddrive.CloudDriveFileSrv/LocalGetSubFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudDriveFileSrvLocalGetSubFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudDriveFileSrv_LocalGetSubFilesClient interface {
	Recv() (*LocalGetSubFilesResult, error)
	grpc.ClientStream
}

type cloudDriveFileSrvLocalGetSubFilesClient struct {
	grpc.ClientStream
}

func (x *cloudDriveFileSrvLocalGetSubFilesClient) Recv() (*LocalGetSubFilesResult, error) {
	m := new(LocalGetSubFilesResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudDriveFileSrvClient) GetAllTasksCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllTasksCountResult, error) {
	out := new(GetAllTasksCountResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetAllTasksCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetDownloadFileCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDownloadFileCountResult, error) {
	out := new(GetDownloadFileCountResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetDownloadFileCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetDownloadFileList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDownloadFileListResult, error) {
	out := new(GetDownloadFileListResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetDownloadFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetUploadFileCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUploadFileCountResult, error) {
	out := new(GetUploadFileCountResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetUploadFileCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetUploadFileList(ctx context.Context, in *GetUploadFileListRequest, opts ...grpc.CallOption) (*GetUploadFileListResult, error) {
	out := new(GetUploadFileListResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetUploadFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CancelAllUploadFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/CancelAllUploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CancelUploadFiles(ctx context.Context, in *MultpleUploadFileKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/CancelUploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) PauseAllUploadFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/PauseAllUploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) PauseUploadFiles(ctx context.Context, in *MultpleUploadFileKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/PauseUploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ResumeAllUploadFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ResumeAllUploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ResumeUploadFiles(ctx context.Context, in *MultpleUploadFileKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ResumeUploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CanAddMoreCloudApis(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/CanAddMoreCloudApis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILogin115Editthiscookie(ctx context.Context, in *Login115EditthiscookieRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/APILogin115Editthiscookie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILogin115QRCode(ctx context.Context, in *Login115QrCodeRequest, opts ...grpc.CallOption) (CloudDriveFileSrv_APILogin115QRCodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[3], "/clouddrive.CloudDriveFileSrv/APILogin115QRCode", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudDriveFileSrvAPILogin115QRCodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudDriveFileSrv_APILogin115QRCodeClient interface {
	Recv() (*QRCodeScanMessage, error)
	grpc.ClientStream
}

type cloudDriveFileSrvAPILogin115QRCodeClient struct {
	grpc.ClientStream
}

func (x *cloudDriveFileSrvAPILogin115QRCodeClient) Recv() (*QRCodeScanMessage, error) {
	m := new(QRCodeScanMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudDriveFileSrvClient) APILoginAliyundriveOAuth(ctx context.Context, in *LoginAliyundriveOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/APILoginAliyundriveOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILoginAliyundriveRefreshtoken(ctx context.Context, in *LoginAliyundriveRefreshtokenRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/APILoginAliyundriveRefreshtoken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILoginAliyunDriveQRCode(ctx context.Context, in *LoginAliyundriveQRCodeRequest, opts ...grpc.CallOption) (CloudDriveFileSrv_APILoginAliyunDriveQRCodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[4], "/clouddrive.CloudDriveFileSrv/APILoginAliyunDriveQRCode", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudDriveFileSrvAPILoginAliyunDriveQRCodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudDriveFileSrv_APILoginAliyunDriveQRCodeClient interface {
	Recv() (*QRCodeScanMessage, error)
	grpc.ClientStream
}

type cloudDriveFileSrvAPILoginAliyunDriveQRCodeClient struct {
	grpc.ClientStream
}

func (x *cloudDriveFileSrvAPILoginAliyunDriveQRCodeClient) Recv() (*QRCodeScanMessage, error) {
	m := new(QRCodeScanMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudDriveFileSrvClient) APILoginBaiduPanOAuth(ctx context.Context, in *LoginBaiduPanOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/APILoginBaiduPanOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILoginOneDriveOAuth(ctx context.Context, in *LoginOneDriveOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/APILoginOneDriveOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ApiLoginGoogleDriveOAuth(ctx context.Context, in *LoginGoogleDriveOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ApiLoginGoogleDriveOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ApiLoginGoogleDriveRefreshToken(ctx context.Context, in *LoginGoogleDriveRefreshTokenRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ApiLoginGoogleDriveRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ApiLoginXunleiOAuth(ctx context.Context, in *LoginXunleiOAuthRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ApiLoginXunleiOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILogin189QRCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CloudDriveFileSrv_APILogin189QRCodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[5], "/clouddrive.CloudDriveFileSrv/APILogin189QRCode", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudDriveFileSrvAPILogin189QRCodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudDriveFileSrv_APILogin189QRCodeClient interface {
	Recv() (*QRCodeScanMessage, error)
	grpc.ClientStream
}

type cloudDriveFileSrvAPILogin189QRCodeClient struct {
	grpc.ClientStream
}

func (x *cloudDriveFileSrvAPILogin189QRCodeClient) Recv() (*QRCodeScanMessage, error) {
	m := new(QRCodeScanMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudDriveFileSrvClient) APILoginPikPak(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/APILoginPikPak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APILoginWebDav(ctx context.Context, in *LoginWebDavRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/APILoginWebDav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) APIAddLocalFolder(ctx context.Context, in *AddLocalFolderRequest, opts ...grpc.CallOption) (*APILoginResult, error) {
	out := new(APILoginResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/APIAddLocalFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RemoveCloudAPI(ctx context.Context, in *RemoveCloudAPIRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/RemoveCloudAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetAllCloudApis(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CloudAPIList, error) {
	out := new(CloudAPIList)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetAllCloudApis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetCloudAPIConfig(ctx context.Context, in *GetCloudAPIConfigRequest, opts ...grpc.CallOption) (*CloudAPIConfig, error) {
	out := new(CloudAPIConfig)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetCloudAPIConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) SetCloudAPIConfig(ctx context.Context, in *SetCloudAPIConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/SetCloudAPIConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetSystemSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemSettings, error) {
	out := new(SystemSettings)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetSystemSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) SetSystemSettings(ctx context.Context, in *SystemSettings, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/SetSystemSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) SetDirCacheTimeSecs(ctx context.Context, in *SetDirCacheTimeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/SetDirCacheTimeSecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetEffectiveDirCacheTimeSecs(ctx context.Context, in *GetEffectiveDirCacheTimeRequest, opts ...grpc.CallOption) (*GetEffectiveDirCacheTimeResult, error) {
	out := new(GetEffectiveDirCacheTimeResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetEffectiveDirCacheTimeSecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetOpenFileTable(ctx context.Context, in *GetOpenFileTableRequest, opts ...grpc.CallOption) (*OpenFileTable, error) {
	out := new(OpenFileTable)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetOpenFileTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetDirCacheTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DirCacheTable, error) {
	out := new(DirCacheTable)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetDirCacheTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetReferencedEntryPaths(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*StringList, error) {
	out := new(StringList)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetReferencedEntryPaths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetTempFileTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TempFileTable, error) {
	out := new(TempFileTable)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetTempFileTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) PushTaskChange(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CloudDriveFileSrv_PushTaskChangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[6], "/clouddrive.CloudDriveFileSrv/PushTaskChange", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudDriveFileSrvPushTaskChangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudDriveFileSrv_PushTaskChangeClient interface {
	Recv() (*GetAllTasksCountResult, error)
	grpc.ClientStream
}

type cloudDriveFileSrvPushTaskChangeClient struct {
	grpc.ClientStream
}

func (x *cloudDriveFileSrvPushTaskChangeClient) Recv() (*GetAllTasksCountResult, error) {
	m := new(GetAllTasksCountResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudDriveFileSrvClient) GetCloudDrive1UserData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringResult, error) {
	out := new(StringResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetCloudDrive1UserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) RestartService(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/RestartService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ShutdownService(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ShutdownService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) HasUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UpdateResult, error) {
	out := new(UpdateResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/HasUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CheckUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UpdateResult, error) {
	out := new(UpdateResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/CheckUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) DownloadUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/DownloadUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) UpdateSystem(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/UpdateSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetMetaData(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileMetaData, error) {
	out := new(FileMetaData)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetOriginalPath(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*StringResult, error) {
	out := new(StringResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetOriginalPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResult, error) {
	out := new(CreateFileResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CloseFile(ctx context.Context, in *CloseFileRequest, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/CloseFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) WriteToFileStream(ctx context.Context, opts ...grpc.CallOption) (CloudDriveFileSrv_WriteToFileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudDriveFileSrv_ServiceDesc.Streams[7], "/clouddrive.CloudDriveFileSrv/WriteToFileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudDriveFileSrvWriteToFileStreamClient{stream}
	return x, nil
}

type CloudDriveFileSrv_WriteToFileStreamClient interface {
	Send(*WriteFileRequest) error
	CloseAndRecv() (*WriteFileResult, error)
	grpc.ClientStream
}

type cloudDriveFileSrvWriteToFileStreamClient struct {
	grpc.ClientStream
}

func (x *cloudDriveFileSrvWriteToFileStreamClient) Send(m *WriteFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudDriveFileSrvWriteToFileStreamClient) CloseAndRecv() (*WriteFileResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteFileResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudDriveFileSrvClient) WriteToFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResult, error) {
	out := new(WriteFileResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/WriteToFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetPromotions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPromotionsResult, error) {
	out := new(GetPromotionsResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetPromotions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) UpdatePromotionResult(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/UpdatePromotionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetCloudDrivePlans(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCloudDrivePlansResult, error) {
	out := new(GetCloudDrivePlansResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetCloudDrivePlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) JoinPlan(ctx context.Context, in *JoinPlanRequest, opts ...grpc.CallOption) (*JoinPlanResult, error) {
	out := new(JoinPlanResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/JoinPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BindCloudAccount(ctx context.Context, in *BindCloudAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/BindCloudAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) TransferBalance(ctx context.Context, in *TransferBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/TransferBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ChangeEmail(ctx context.Context, in *ChangeUserNameEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetBalanceLog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BalanceLogResult, error) {
	out := new(BalanceLogResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetBalanceLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CheckActivationCode(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*CheckActivationCodeResult, error) {
	out := new(CheckActivationCodeResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/CheckActivationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) ActivatePlan(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*JoinPlanResult, error) {
	out := new(JoinPlanResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/ActivatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CheckCouponCode(ctx context.Context, in *CheckCouponCodeRequest, opts ...grpc.CallOption) (*CouponCodeResult, error) {
	out := new(CouponCodeResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/CheckCouponCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) GetReferralCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringValue, error) {
	out := new(StringValue)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/GetReferralCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupGetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BackupList, error) {
	out := new(BackupList)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/BackupGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupAdd(ctx context.Context, in *Backup, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/BackupAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupRemove(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/BackupRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupUpdate(ctx context.Context, in *Backup, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/BackupUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupAddDestination(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/BackupAddDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupRemoveDestination(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/BackupRemoveDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupSetEnabled(ctx context.Context, in *BackupSetEnabledRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/BackupSetEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupSetFileSystemWatchEnabled(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/BackupSetFileSystemWatchEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupUpdateStrategies(ctx context.Context, in *BackupModifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/BackupUpdateStrategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) BackupRestartWalkingThrough(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/BackupRestartWalkingThrough", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDriveFileSrvClient) CanAddMoreBackups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileOperationResult, error) {
	out := new(FileOperationResult)
	err := c.cc.Invoke(ctx, "/clouddrive.CloudDriveFileSrv/CanAddMoreBackups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudDriveFileSrvServer is the server API for CloudDriveFileSrv service.
// All implementations must embed UnimplementedCloudDriveFileSrvServer
// for forward compatibility
type CloudDriveFileSrvServer interface {
	// public methods, no authorization is required
	// returns if clouddrive has logged in to cloudfs server and the user name
	GetSystemInfo(context.Context, *emptypb.Empty) (*CloudDriveSystemInfo, error)
	// get bearer token by username and password
	GetToken(context.Context, *GetTokenRequest) (*JWTToken, error)
	// login to cloudfs server
	Login(context.Context, *UserLoginRequest) (*FileOperationResult, error)
	// register a new count
	Register(context.Context, *UserRegisterRequest) (*FileOperationResult, error)
	// asks cloudfs server to send reset account email with reset link
	SendResetAccountEmail(context.Context, *SendResetAccountEmailRequest) (*emptypb.Empty, error)
	// reset account's data, set new password, with received reset code from email
	ResetAccount(context.Context, *ResetAccountRequest) (*emptypb.Empty, error)
	// authorized methods, Authorization header with Bearer {token} is requirerd
	// asks cloudfs server to send confirm email with confirm link
	SendConfirmEmail(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// confirm email by confirm code
	ConfirmEmail(context.Context, *ConfirmEmailRequest) (*emptypb.Empty, error)
	// get account status
	GetAccountStatus(context.Context, *emptypb.Empty) (*AccountStatusResult, error)
	// get all subfiles by path
	GetSubFiles(*ListSubFileRequest, CloudDriveFileSrv_GetSubFilesServer) error
	// search under path
	GetSearchResults(*SearchRequest, CloudDriveFileSrv_GetSearchResultsServer) error
	// find file info by full path
	FindFileByPath(context.Context, *FindFileByPathRequest) (*CloudDriveFile, error)
	// create a folder under path
	CreateFolder(context.Context, *CreateFolderRequest) (*CreateFolderResult, error)
	// rename a single file
	RenameFile(context.Context, *RenameFileRequest) (*FileOperationResult, error)
	// batch rename files
	RenameFiles(context.Context, *RenameFilesRequest) (*FileOperationResult, error)
	// move files to a dest folder
	MoveFile(context.Context, *MoveFileRequest) (*FileOperationResult, error)
	// delete a single file
	DeleteFile(context.Context, *FileRequest) (*FileOperationResult, error)
	// delete a single file permanently, only aliyundrive supports this currently
	DeleteFilePermanently(context.Context, *FileRequest) (*FileOperationResult, error)
	// batch delete files
	DeleteFiles(context.Context, *MultiFileRequest) (*FileOperationResult, error)
	// batch delete files permanently, only aliyundrive supports this currently
	DeleteFilesPermanently(context.Context, *MultiFileRequest) (*FileOperationResult, error)
	// add offline files by providing magnet, sha1, ..., applies only with folders
	// with canOfflineDownload is tru
	AddOfflineFiles(context.Context, *AddOfflineFileRequest) (*FileOperationResult, error)
	// remove offline files by info hash
	RemoveOfflineFiles(context.Context, *RemoveOfflineFilesRequest) (*FileOperationResult, error)
	// list offline files
	ListOfflineFilesByPath(context.Context, *FileRequest) (*OfflineFileListResult, error)
	// list all offline files of a cloud with pagination
	ListAllOfflineFiles(context.Context, *OfflineFileListAllRequest) (*OfflineFileListAllResult, error)
	// get folder properties, applies only with folders with hasDetailProperties
	// is true
	GetFileDetailProperties(context.Context, *FileRequest) (*FileDetailProperties, error)
	// get total/free/used space of a cloud path
	GetSpaceInfo(context.Context, *FileRequest) (*SpaceInfo, error)
	// get cloud account memberships
	GetCloudMemberships(context.Context, *FileRequest) (*CloudMemberships, error)
	// get server runtime info
	GetRuntimeInfo(context.Context, *emptypb.Empty) (*RuntimeInfo, error)
	// get server stats, including cpu/mem/uptime
	GetRunningInfo(context.Context, *emptypb.Empty) (*RunInfo, error)
	// logout from cloudfs server
	Logout(context.Context, *UserLogoutRequest) (*FileOperationResult, error)
	// check if current user can add more mount point
	CanAddMoreMountPoints(context.Context, *emptypb.Empty) (*FileOperationResult, error)
	// get all mount points
	GetMountPoints(context.Context, *emptypb.Empty) (*GetMountPointsResult, error)
	// add a new mount point
	AddMountPoint(context.Context, *MountOption) (*MountPointResult, error)
	// remove a mountpoint
	RemoveMountPoint(context.Context, *MountPointRequest) (*MountPointResult, error)
	// mount a mount point
	Mount(context.Context, *MountPointRequest) (*MountPointResult, error)
	// unmount a mount point
	Unmount(context.Context, *MountPointRequest) (*MountPointResult, error)
	// change mount point settings
	UpdateMountPoint(context.Context, *UpdateMountPointRequest) (*MountPointResult, error)
	// get all unused drive letters from server's local storage, applies to
	// windows only
	GetAvailableDriveLetters(context.Context, *emptypb.Empty) (*GetAvailableDriveLettersResult, error)
	// check if server has driver letters, returns true only on windows
	HasDriveLetters(context.Context, *emptypb.Empty) (*HasDriveLettersResult, error)
	// get subfiles of a local path, used for adding mountpoint from web ui
	LocalGetSubFiles(*LocalGetSubFilesRequest, CloudDriveFileSrv_LocalGetSubFilesServer) error
	// get all transfer tasks' count
	GetAllTasksCount(context.Context, *emptypb.Empty) (*GetAllTasksCountResult, error)
	// get download tasks' count
	GetDownloadFileCount(context.Context, *emptypb.Empty) (*GetDownloadFileCountResult, error)
	// get all download tasks
	GetDownloadFileList(context.Context, *emptypb.Empty) (*GetDownloadFileListResult, error)
	// get all upload tasks' count
	GetUploadFileCount(context.Context, *emptypb.Empty) (*GetUploadFileCountResult, error)
	// get upload tasks, paged by providing page number and items per page and
	// file name filter
	GetUploadFileList(context.Context, *GetUploadFileListRequest) (*GetUploadFileListResult, error)
	// cancel all upload tasks
	CancelAllUploadFiles(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// cancel selected upload tasks
	CancelUploadFiles(context.Context, *MultpleUploadFileKeyRequest) (*emptypb.Empty, error)
	// pause all upload tasks
	PauseAllUploadFiles(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// pause selected upload tasks
	PauseUploadFiles(context.Context, *MultpleUploadFileKeyRequest) (*emptypb.Empty, error)
	// resume all upload tasks
	ResumeAllUploadFiles(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// resume selected upload tasks
	ResumeUploadFiles(context.Context, *MultpleUploadFileKeyRequest) (*emptypb.Empty, error)
	// check if current user can add more cloud apis
	CanAddMoreCloudApis(context.Context, *emptypb.Empty) (*FileOperationResult, error)
	// add 115 cloud with editthiscookie
	APILogin115Editthiscookie(context.Context, *Login115EditthiscookieRequest) (*APILoginResult, error)
	// add 115 cloud with qr scanning
	APILogin115QRCode(*Login115QrCodeRequest, CloudDriveFileSrv_APILogin115QRCodeServer) error
	// add AliyunDriveOpen with OAuth result
	APILoginAliyundriveOAuth(context.Context, *LoginAliyundriveOAuthRequest) (*APILoginResult, error)
	// add AliyunDrive with refresh token
	APILoginAliyundriveRefreshtoken(context.Context, *LoginAliyundriveRefreshtokenRequest) (*APILoginResult, error)
	// add AliyunDrive with qr scanning
	APILoginAliyunDriveQRCode(*LoginAliyundriveQRCodeRequest, CloudDriveFileSrv_APILoginAliyunDriveQRCodeServer) error
	// add BaiduPan with OAuth result
	APILoginBaiduPanOAuth(context.Context, *LoginBaiduPanOAuthRequest) (*APILoginResult, error)
	// add OneDrive with OAuth result
	APILoginOneDriveOAuth(context.Context, *LoginOneDriveOAuthRequest) (*APILoginResult, error)
	// add Google Drive with OAuth result
	ApiLoginGoogleDriveOAuth(context.Context, *LoginGoogleDriveOAuthRequest) (*APILoginResult, error)
	// add Google Drive with refresh token
	ApiLoginGoogleDriveRefreshToken(context.Context, *LoginGoogleDriveRefreshTokenRequest) (*APILoginResult, error)
	// add Xunlei Drive with OAuth result
	ApiLoginXunleiOAuth(context.Context, *LoginXunleiOAuthRequest) (*APILoginResult, error)
	// add 189 cloud with qr scanning
	APILogin189QRCode(*emptypb.Empty, CloudDriveFileSrv_APILogin189QRCodeServer) error
	// add PikPak cloud with username and password
	APILoginPikPak(context.Context, *UserLoginRequest) (*APILoginResult, error)
	// add webdav
	APILoginWebDav(context.Context, *LoginWebDavRequest) (*APILoginResult, error)
	// add local folder
	APIAddLocalFolder(context.Context, *AddLocalFolderRequest) (*APILoginResult, error)
	// remove a cloud
	RemoveCloudAPI(context.Context, *RemoveCloudAPIRequest) (*FileOperationResult, error)
	// get all cloud apis
	GetAllCloudApis(context.Context, *emptypb.Empty) (*CloudAPIList, error)
	// get CloudAPI configuration
	GetCloudAPIConfig(context.Context, *GetCloudAPIConfigRequest) (*CloudAPIConfig, error)
	// set CloudAPI configuration
	SetCloudAPIConfig(context.Context, *SetCloudAPIConfigRequest) (*emptypb.Empty, error)
	// get all system setings value
	GetSystemSettings(context.Context, *emptypb.Empty) (*SystemSettings, error)
	// set selected system settings value
	SetSystemSettings(context.Context, *SystemSettings) (*emptypb.Empty, error)
	// set dir cache time
	SetDirCacheTimeSecs(context.Context, *SetDirCacheTimeRequest) (*emptypb.Empty, error)
	// get dir cache time in effect (default value will be returned)
	GetEffectiveDirCacheTimeSecs(context.Context, *GetEffectiveDirCacheTimeRequest) (*GetEffectiveDirCacheTimeResult, error)
	// get open file table
	GetOpenFileTable(context.Context, *GetOpenFileTableRequest) (*OpenFileTable, error)
	// get dir cache table
	GetDirCacheTable(context.Context, *emptypb.Empty) (*DirCacheTable, error)
	// get referenced entry paths of parent path
	GetReferencedEntryPaths(context.Context, *FileRequest) (*StringList, error)
	// get temp file table
	GetTempFileTable(context.Context, *emptypb.Empty) (*TempFileTable, error)
	// push upload/download task count changes to client, also can be used for
	// client to detect conenction broken
	PushTaskChange(*emptypb.Empty, CloudDriveFileSrv_PushTaskChangeServer) error
	// get CloudDrive1's user data string
	GetCloudDrive1UserData(context.Context, *emptypb.Empty) (*StringResult, error)
	// restart service
	RestartService(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// shutdown service
	ShutdownService(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// check if has updates available
	HasUpdate(context.Context, *emptypb.Empty) (*UpdateResult, error)
	// check software updates
	CheckUpdate(context.Context, *emptypb.Empty) (*UpdateResult, error)
	// download newest version
	DownloadUpdate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// update to newest version
	UpdateSystem(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// get file metadata
	GetMetaData(context.Context, *FileRequest) (*FileMetaData, error)
	// get file's original path from search result
	GetOriginalPath(context.Context, *FileRequest) (*StringResult, error)
	// change password
	ChangePassword(context.Context, *ChangePasswordRequest) (*FileOperationResult, error)
	// create a new file
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResult, error)
	// close an opened file
	CloseFile(context.Context, *CloseFileRequest) (*FileOperationResult, error)
	// write a stream to an opened file
	WriteToFileStream(CloudDriveFileSrv_WriteToFileStreamServer) error
	// write to an opened file
	WriteToFile(context.Context, *WriteFileRequest) (*WriteFileResult, error)
	// get promotions
	GetPromotions(context.Context, *emptypb.Empty) (*GetPromotionsResult, error)
	// update promotion result after purchased
	UpdatePromotionResult(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// get cloudfs plans
	GetCloudDrivePlans(context.Context, *emptypb.Empty) (*GetCloudDrivePlansResult, error)
	// join a plan
	JoinPlan(context.Context, *JoinPlanRequest) (*JoinPlanResult, error)
	// bind account to a cloud account id
	BindCloudAccount(context.Context, *BindCloudAccountRequest) (*emptypb.Empty, error)
	// transfer balance to another user
	TransferBalance(context.Context, *TransferBalanceRequest) (*emptypb.Empty, error)
	// change email
	ChangeEmail(context.Context, *ChangeUserNameEmailRequest) (*emptypb.Empty, error)
	// chech balance log
	GetBalanceLog(context.Context, *emptypb.Empty) (*BalanceLogResult, error)
	// check activation code for a plan
	CheckActivationCode(context.Context, *StringValue) (*CheckActivationCodeResult, error)
	// Activate plan using an activation code
	ActivatePlan(context.Context, *StringValue) (*JoinPlanResult, error)
	// check counpon code for a plan
	CheckCouponCode(context.Context, *CheckCouponCodeRequest) (*CouponCodeResult, error)
	// get referral code of current user
	GetReferralCode(context.Context, *emptypb.Empty) (*StringValue, error)
	// // list all backups
	BackupGetAll(context.Context, *emptypb.Empty) (*BackupList, error)
	// add a backup
	BackupAdd(context.Context, *Backup) (*emptypb.Empty, error)
	// remove a backup by it's source path
	BackupRemove(context.Context, *StringValue) (*emptypb.Empty, error)
	// update a backup
	BackupUpdate(context.Context, *Backup) (*emptypb.Empty, error)
	// add destinations to a backup
	BackupAddDestination(context.Context, *BackupModifyRequest) (*emptypb.Empty, error)
	// remove destinations from a backup
	BackupRemoveDestination(context.Context, *BackupModifyRequest) (*emptypb.Empty, error)
	// enable/disable a backup
	BackupSetEnabled(context.Context, *BackupSetEnabledRequest) (*emptypb.Empty, error)
	// enable/disable a backup's FileSystemWatch
	BackupSetFileSystemWatchEnabled(context.Context, *BackupModifyRequest) (*emptypb.Empty, error)
	// deprecated, use BackupUpdate instead
	BackupUpdateStrategies(context.Context, *BackupModifyRequest) (*emptypb.Empty, error)
	BackupRestartWalkingThrough(context.Context, *StringValue) (*emptypb.Empty, error)
	CanAddMoreBackups(context.Context, *emptypb.Empty) (*FileOperationResult, error)
	mustEmbedUnimplementedCloudDriveFileSrvServer()
}

// UnimplementedCloudDriveFileSrvServer must be embedded to have forward compatible implementations.
type UnimplementedCloudDriveFileSrvServer struct {
}

func (UnimplementedCloudDriveFileSrvServer) GetSystemInfo(context.Context, *emptypb.Empty) (*CloudDriveSystemInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetToken(context.Context, *GetTokenRequest) (*JWTToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) Login(context.Context, *UserLoginRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) Register(context.Context, *UserRegisterRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) SendResetAccountEmail(context.Context, *SendResetAccountEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetAccountEmail not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ResetAccount(context.Context, *ResetAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAccount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) SendConfirmEmail(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendConfirmEmail not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ConfirmEmail(context.Context, *ConfirmEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmEmail not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetAccountStatus(context.Context, *emptypb.Empty) (*AccountStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountStatus not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetSubFiles(*ListSubFileRequest, CloudDriveFileSrv_GetSubFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSubFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetSearchResults(*SearchRequest, CloudDriveFileSrv_GetSearchResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSearchResults not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) FindFileByPath(context.Context, *FindFileByPathRequest) (*CloudDriveFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFileByPath not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CreateFolder(context.Context, *CreateFolderRequest) (*CreateFolderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RenameFile(context.Context, *RenameFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RenameFiles(context.Context, *RenameFilesRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) MoveFile(context.Context, *MoveFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) DeleteFile(context.Context, *FileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) DeleteFilePermanently(context.Context, *FileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilePermanently not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) DeleteFiles(context.Context, *MultiFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) DeleteFilesPermanently(context.Context, *MultiFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilesPermanently not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) AddOfflineFiles(context.Context, *AddOfflineFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOfflineFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RemoveOfflineFiles(context.Context, *RemoveOfflineFilesRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOfflineFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ListOfflineFilesByPath(context.Context, *FileRequest) (*OfflineFileListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOfflineFilesByPath not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ListAllOfflineFiles(context.Context, *OfflineFileListAllRequest) (*OfflineFileListAllResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllOfflineFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetFileDetailProperties(context.Context, *FileRequest) (*FileDetailProperties, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileDetailProperties not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetSpaceInfo(context.Context, *FileRequest) (*SpaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceInfo not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetCloudMemberships(context.Context, *FileRequest) (*CloudMemberships, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudMemberships not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetRuntimeInfo(context.Context, *emptypb.Empty) (*RuntimeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimeInfo not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetRunningInfo(context.Context, *emptypb.Empty) (*RunInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningInfo not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) Logout(context.Context, *UserLogoutRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CanAddMoreMountPoints(context.Context, *emptypb.Empty) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanAddMoreMountPoints not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetMountPoints(context.Context, *emptypb.Empty) (*GetMountPointsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMountPoints not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) AddMountPoint(context.Context, *MountOption) (*MountPointResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMountPoint not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RemoveMountPoint(context.Context, *MountPointRequest) (*MountPointResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMountPoint not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) Mount(context.Context, *MountPointRequest) (*MountPointResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) Unmount(context.Context, *MountPointRequest) (*MountPointResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unmount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) UpdateMountPoint(context.Context, *UpdateMountPointRequest) (*MountPointResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMountPoint not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetAvailableDriveLetters(context.Context, *emptypb.Empty) (*GetAvailableDriveLettersResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableDriveLetters not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) HasDriveLetters(context.Context, *emptypb.Empty) (*HasDriveLettersResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasDriveLetters not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) LocalGetSubFiles(*LocalGetSubFilesRequest, CloudDriveFileSrv_LocalGetSubFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method LocalGetSubFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetAllTasksCount(context.Context, *emptypb.Empty) (*GetAllTasksCountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTasksCount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetDownloadFileCount(context.Context, *emptypb.Empty) (*GetDownloadFileCountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadFileCount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetDownloadFileList(context.Context, *emptypb.Empty) (*GetDownloadFileListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadFileList not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetUploadFileCount(context.Context, *emptypb.Empty) (*GetUploadFileCountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadFileCount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetUploadFileList(context.Context, *GetUploadFileListRequest) (*GetUploadFileListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadFileList not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CancelAllUploadFiles(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAllUploadFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CancelUploadFiles(context.Context, *MultpleUploadFileKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUploadFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) PauseAllUploadFiles(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseAllUploadFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) PauseUploadFiles(context.Context, *MultpleUploadFileKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseUploadFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ResumeAllUploadFiles(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeAllUploadFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ResumeUploadFiles(context.Context, *MultpleUploadFileKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeUploadFiles not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CanAddMoreCloudApis(context.Context, *emptypb.Empty) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanAddMoreCloudApis not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILogin115Editthiscookie(context.Context, *Login115EditthiscookieRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILogin115Editthiscookie not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILogin115QRCode(*Login115QrCodeRequest, CloudDriveFileSrv_APILogin115QRCodeServer) error {
	return status.Errorf(codes.Unimplemented, "method APILogin115QRCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginAliyundriveOAuth(context.Context, *LoginAliyundriveOAuthRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILoginAliyundriveOAuth not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginAliyundriveRefreshtoken(context.Context, *LoginAliyundriveRefreshtokenRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILoginAliyundriveRefreshtoken not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginAliyunDriveQRCode(*LoginAliyundriveQRCodeRequest, CloudDriveFileSrv_APILoginAliyunDriveQRCodeServer) error {
	return status.Errorf(codes.Unimplemented, "method APILoginAliyunDriveQRCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginBaiduPanOAuth(context.Context, *LoginBaiduPanOAuthRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILoginBaiduPanOAuth not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginOneDriveOAuth(context.Context, *LoginOneDriveOAuthRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILoginOneDriveOAuth not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ApiLoginGoogleDriveOAuth(context.Context, *LoginGoogleDriveOAuthRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiLoginGoogleDriveOAuth not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ApiLoginGoogleDriveRefreshToken(context.Context, *LoginGoogleDriveRefreshTokenRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiLoginGoogleDriveRefreshToken not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ApiLoginXunleiOAuth(context.Context, *LoginXunleiOAuthRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiLoginXunleiOAuth not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILogin189QRCode(*emptypb.Empty, CloudDriveFileSrv_APILogin189QRCodeServer) error {
	return status.Errorf(codes.Unimplemented, "method APILogin189QRCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginPikPak(context.Context, *UserLoginRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILoginPikPak not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APILoginWebDav(context.Context, *LoginWebDavRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APILoginWebDav not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) APIAddLocalFolder(context.Context, *AddLocalFolderRequest) (*APILoginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIAddLocalFolder not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RemoveCloudAPI(context.Context, *RemoveCloudAPIRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCloudAPI not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetAllCloudApis(context.Context, *emptypb.Empty) (*CloudAPIList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCloudApis not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetCloudAPIConfig(context.Context, *GetCloudAPIConfigRequest) (*CloudAPIConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudAPIConfig not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) SetCloudAPIConfig(context.Context, *SetCloudAPIConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCloudAPIConfig not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetSystemSettings(context.Context, *emptypb.Empty) (*SystemSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemSettings not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) SetSystemSettings(context.Context, *SystemSettings) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSystemSettings not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) SetDirCacheTimeSecs(context.Context, *SetDirCacheTimeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDirCacheTimeSecs not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetEffectiveDirCacheTimeSecs(context.Context, *GetEffectiveDirCacheTimeRequest) (*GetEffectiveDirCacheTimeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveDirCacheTimeSecs not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetOpenFileTable(context.Context, *GetOpenFileTableRequest) (*OpenFileTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenFileTable not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetDirCacheTable(context.Context, *emptypb.Empty) (*DirCacheTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirCacheTable not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetReferencedEntryPaths(context.Context, *FileRequest) (*StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferencedEntryPaths not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetTempFileTable(context.Context, *emptypb.Empty) (*TempFileTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTempFileTable not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) PushTaskChange(*emptypb.Empty, CloudDriveFileSrv_PushTaskChangeServer) error {
	return status.Errorf(codes.Unimplemented, "method PushTaskChange not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetCloudDrive1UserData(context.Context, *emptypb.Empty) (*StringResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudDrive1UserData not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) RestartService(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartService not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ShutdownService(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownService not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) HasUpdate(context.Context, *emptypb.Empty) (*UpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUpdate not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CheckUpdate(context.Context, *emptypb.Empty) (*UpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUpdate not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) DownloadUpdate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadUpdate not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) UpdateSystem(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystem not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetMetaData(context.Context, *FileRequest) (*FileMetaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaData not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetOriginalPath(context.Context, *FileRequest) (*StringResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalPath not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ChangePassword(context.Context, *ChangePasswordRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CloseFile(context.Context, *CloseFileRequest) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) WriteToFileStream(CloudDriveFileSrv_WriteToFileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteToFileStream not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) WriteToFile(context.Context, *WriteFileRequest) (*WriteFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteToFile not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetPromotions(context.Context, *emptypb.Empty) (*GetPromotionsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromotions not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) UpdatePromotionResult(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePromotionResult not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetCloudDrivePlans(context.Context, *emptypb.Empty) (*GetCloudDrivePlansResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudDrivePlans not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) JoinPlan(context.Context, *JoinPlanRequest) (*JoinPlanResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPlan not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BindCloudAccount(context.Context, *BindCloudAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindCloudAccount not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) TransferBalance(context.Context, *TransferBalanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferBalance not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ChangeEmail(context.Context, *ChangeUserNameEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetBalanceLog(context.Context, *emptypb.Empty) (*BalanceLogResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceLog not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CheckActivationCode(context.Context, *StringValue) (*CheckActivationCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckActivationCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) ActivatePlan(context.Context, *StringValue) (*JoinPlanResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivatePlan not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CheckCouponCode(context.Context, *CheckCouponCodeRequest) (*CouponCodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCouponCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) GetReferralCode(context.Context, *emptypb.Empty) (*StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferralCode not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupGetAll(context.Context, *emptypb.Empty) (*BackupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupGetAll not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupAdd(context.Context, *Backup) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupAdd not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupRemove(context.Context, *StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupRemove not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupUpdate(context.Context, *Backup) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupUpdate not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupAddDestination(context.Context, *BackupModifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupAddDestination not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupRemoveDestination(context.Context, *BackupModifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupRemoveDestination not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupSetEnabled(context.Context, *BackupSetEnabledRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupSetEnabled not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupSetFileSystemWatchEnabled(context.Context, *BackupModifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupSetFileSystemWatchEnabled not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupUpdateStrategies(context.Context, *BackupModifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupUpdateStrategies not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) BackupRestartWalkingThrough(context.Context, *StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupRestartWalkingThrough not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) CanAddMoreBackups(context.Context, *emptypb.Empty) (*FileOperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanAddMoreBackups not implemented")
}
func (UnimplementedCloudDriveFileSrvServer) mustEmbedUnimplementedCloudDriveFileSrvServer() {}

// UnsafeCloudDriveFileSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudDriveFileSrvServer will
// result in compilation errors.
type UnsafeCloudDriveFileSrvServer interface {
	mustEmbedUnimplementedCloudDriveFileSrvServer()
}

func RegisterCloudDriveFileSrvServer(s grpc.ServiceRegistrar, srv CloudDriveFileSrvServer) {
	s.RegisterService(&CloudDriveFileSrv_ServiceDesc, srv)
}

func _CloudDriveFileSrv_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetSystemInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).Login(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).Register(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_SendResetAccountEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResetAccountEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).SendResetAccountEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/SendResetAccountEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).SendResetAccountEmail(ctx, req.(*SendResetAccountEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ResetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ResetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ResetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ResetAccount(ctx, req.(*ResetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_SendConfirmEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).SendConfirmEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/SendConfirmEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).SendConfirmEmail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ConfirmEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ConfirmEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ConfirmEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ConfirmEmail(ctx, req.(*ConfirmEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetAccountStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetAccountStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetAccountStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetAccountStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetSubFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSubFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).GetSubFiles(m, &cloudDriveFileSrvGetSubFilesServer{stream})
}

type CloudDriveFileSrv_GetSubFilesServer interface {
	Send(*SubFilesReply) error
	grpc.ServerStream
}

type cloudDriveFileSrvGetSubFilesServer struct {
	grpc.ServerStream
}

func (x *cloudDriveFileSrvGetSubFilesServer) Send(m *SubFilesReply) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudDriveFileSrv_GetSearchResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).GetSearchResults(m, &cloudDriveFileSrvGetSearchResultsServer{stream})
}

type CloudDriveFileSrv_GetSearchResultsServer interface {
	Send(*SubFilesReply) error
	grpc.ServerStream
}

type cloudDriveFileSrvGetSearchResultsServer struct {
	grpc.ServerStream
}

func (x *cloudDriveFileSrvGetSearchResultsServer) Send(m *SubFilesReply) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudDriveFileSrv_FindFileByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFileByPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).FindFileByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/FindFileByPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).FindFileByPath(ctx, req.(*FindFileByPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/CreateFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CreateFolder(ctx, req.(*CreateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/RenameFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RenameFile(ctx, req.(*RenameFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RenameFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RenameFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/RenameFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RenameFiles(ctx, req.(*RenameFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/MoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).MoveFile(ctx, req.(*MoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).DeleteFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_DeleteFilePermanently_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).DeleteFilePermanently(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/DeleteFilePermanently",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).DeleteFilePermanently(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_DeleteFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).DeleteFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/DeleteFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).DeleteFiles(ctx, req.(*MultiFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_DeleteFilesPermanently_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).DeleteFilesPermanently(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/DeleteFilesPermanently",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).DeleteFilesPermanently(ctx, req.(*MultiFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_AddOfflineFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOfflineFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).AddOfflineFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/AddOfflineFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).AddOfflineFiles(ctx, req.(*AddOfflineFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RemoveOfflineFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOfflineFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RemoveOfflineFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/RemoveOfflineFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RemoveOfflineFiles(ctx, req.(*RemoveOfflineFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ListOfflineFilesByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ListOfflineFilesByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ListOfflineFilesByPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ListOfflineFilesByPath(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ListAllOfflineFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineFileListAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ListAllOfflineFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ListAllOfflineFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ListAllOfflineFiles(ctx, req.(*OfflineFileListAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetFileDetailProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetFileDetailProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetFileDetailProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetFileDetailProperties(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetSpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetSpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetSpaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetSpaceInfo(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetCloudMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetCloudMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetCloudMemberships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetCloudMemberships(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetRuntimeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetRuntimeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetRuntimeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetRuntimeInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetRunningInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetRunningInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetRunningInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetRunningInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).Logout(ctx, req.(*UserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CanAddMoreMountPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CanAddMoreMountPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/CanAddMoreMountPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CanAddMoreMountPoints(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetMountPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetMountPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetMountPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetMountPoints(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_AddMountPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).AddMountPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/AddMountPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).AddMountPoint(ctx, req.(*MountOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RemoveMountPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RemoveMountPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/RemoveMountPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RemoveMountPoint(ctx, req.(*MountPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/Mount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).Mount(ctx, req.(*MountPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).Unmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/Unmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).Unmount(ctx, req.(*MountPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_UpdateMountPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMountPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).UpdateMountPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/UpdateMountPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).UpdateMountPoint(ctx, req.(*UpdateMountPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetAvailableDriveLetters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetAvailableDriveLetters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetAvailableDriveLetters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetAvailableDriveLetters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_HasDriveLetters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).HasDriveLetters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/HasDriveLetters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).HasDriveLetters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_LocalGetSubFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LocalGetSubFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).LocalGetSubFiles(m, &cloudDriveFileSrvLocalGetSubFilesServer{stream})
}

type CloudDriveFileSrv_LocalGetSubFilesServer interface {
	Send(*LocalGetSubFilesResult) error
	grpc.ServerStream
}

type cloudDriveFileSrvLocalGetSubFilesServer struct {
	grpc.ServerStream
}

func (x *cloudDriveFileSrvLocalGetSubFilesServer) Send(m *LocalGetSubFilesResult) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudDriveFileSrv_GetAllTasksCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetAllTasksCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetAllTasksCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetAllTasksCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetDownloadFileCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetDownloadFileCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetDownloadFileCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetDownloadFileCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetDownloadFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetDownloadFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetDownloadFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetDownloadFileList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetUploadFileCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetUploadFileCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetUploadFileCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetUploadFileCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetUploadFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetUploadFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetUploadFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetUploadFileList(ctx, req.(*GetUploadFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CancelAllUploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CancelAllUploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/CancelAllUploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CancelAllUploadFiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CancelUploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultpleUploadFileKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CancelUploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/CancelUploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CancelUploadFiles(ctx, req.(*MultpleUploadFileKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_PauseAllUploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).PauseAllUploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/PauseAllUploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).PauseAllUploadFiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_PauseUploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultpleUploadFileKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).PauseUploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/PauseUploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).PauseUploadFiles(ctx, req.(*MultpleUploadFileKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ResumeAllUploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ResumeAllUploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ResumeAllUploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ResumeAllUploadFiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ResumeUploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultpleUploadFileKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ResumeUploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ResumeUploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ResumeUploadFiles(ctx, req.(*MultpleUploadFileKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CanAddMoreCloudApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CanAddMoreCloudApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/CanAddMoreCloudApis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CanAddMoreCloudApis(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILogin115Editthiscookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login115EditthiscookieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILogin115Editthiscookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/APILogin115Editthiscookie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILogin115Editthiscookie(ctx, req.(*Login115EditthiscookieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILogin115QRCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Login115QrCodeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).APILogin115QRCode(m, &cloudDriveFileSrvAPILogin115QRCodeServer{stream})
}

type CloudDriveFileSrv_APILogin115QRCodeServer interface {
	Send(*QRCodeScanMessage) error
	grpc.ServerStream
}

type cloudDriveFileSrvAPILogin115QRCodeServer struct {
	grpc.ServerStream
}

func (x *cloudDriveFileSrvAPILogin115QRCodeServer) Send(m *QRCodeScanMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudDriveFileSrv_APILoginAliyundriveOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAliyundriveOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILoginAliyundriveOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/APILoginAliyundriveOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILoginAliyundriveOAuth(ctx, req.(*LoginAliyundriveOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILoginAliyundriveRefreshtoken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAliyundriveRefreshtokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILoginAliyundriveRefreshtoken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/APILoginAliyundriveRefreshtoken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILoginAliyundriveRefreshtoken(ctx, req.(*LoginAliyundriveRefreshtokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILoginAliyunDriveQRCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoginAliyundriveQRCodeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).APILoginAliyunDriveQRCode(m, &cloudDriveFileSrvAPILoginAliyunDriveQRCodeServer{stream})
}

type CloudDriveFileSrv_APILoginAliyunDriveQRCodeServer interface {
	Send(*QRCodeScanMessage) error
	grpc.ServerStream
}

type cloudDriveFileSrvAPILoginAliyunDriveQRCodeServer struct {
	grpc.ServerStream
}

func (x *cloudDriveFileSrvAPILoginAliyunDriveQRCodeServer) Send(m *QRCodeScanMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudDriveFileSrv_APILoginBaiduPanOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginBaiduPanOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILoginBaiduPanOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/APILoginBaiduPanOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILoginBaiduPanOAuth(ctx, req.(*LoginBaiduPanOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILoginOneDriveOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginOneDriveOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILoginOneDriveOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/APILoginOneDriveOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILoginOneDriveOAuth(ctx, req.(*LoginOneDriveOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ApiLoginGoogleDriveOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginGoogleDriveOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ApiLoginGoogleDriveOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ApiLoginGoogleDriveOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ApiLoginGoogleDriveOAuth(ctx, req.(*LoginGoogleDriveOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ApiLoginGoogleDriveRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginGoogleDriveRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ApiLoginGoogleDriveRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ApiLoginGoogleDriveRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ApiLoginGoogleDriveRefreshToken(ctx, req.(*LoginGoogleDriveRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ApiLoginXunleiOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginXunleiOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ApiLoginXunleiOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ApiLoginXunleiOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ApiLoginXunleiOAuth(ctx, req.(*LoginXunleiOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILogin189QRCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).APILogin189QRCode(m, &cloudDriveFileSrvAPILogin189QRCodeServer{stream})
}

type CloudDriveFileSrv_APILogin189QRCodeServer interface {
	Send(*QRCodeScanMessage) error
	grpc.ServerStream
}

type cloudDriveFileSrvAPILogin189QRCodeServer struct {
	grpc.ServerStream
}

func (x *cloudDriveFileSrvAPILogin189QRCodeServer) Send(m *QRCodeScanMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudDriveFileSrv_APILoginPikPak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILoginPikPak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/APILoginPikPak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILoginPikPak(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APILoginWebDav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWebDavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APILoginWebDav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/APILoginWebDav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APILoginWebDav(ctx, req.(*LoginWebDavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_APIAddLocalFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLocalFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).APIAddLocalFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/APIAddLocalFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).APIAddLocalFolder(ctx, req.(*AddLocalFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RemoveCloudAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCloudAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RemoveCloudAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/RemoveCloudAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RemoveCloudAPI(ctx, req.(*RemoveCloudAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetAllCloudApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetAllCloudApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetAllCloudApis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetAllCloudApis(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetCloudAPIConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudAPIConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetCloudAPIConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetCloudAPIConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetCloudAPIConfig(ctx, req.(*GetCloudAPIConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_SetCloudAPIConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCloudAPIConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).SetCloudAPIConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/SetCloudAPIConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).SetCloudAPIConfig(ctx, req.(*SetCloudAPIConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetSystemSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetSystemSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetSystemSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetSystemSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_SetSystemSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).SetSystemSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/SetSystemSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).SetSystemSettings(ctx, req.(*SystemSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_SetDirCacheTimeSecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDirCacheTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).SetDirCacheTimeSecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/SetDirCacheTimeSecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).SetDirCacheTimeSecs(ctx, req.(*SetDirCacheTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetEffectiveDirCacheTimeSecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectiveDirCacheTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetEffectiveDirCacheTimeSecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetEffectiveDirCacheTimeSecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetEffectiveDirCacheTimeSecs(ctx, req.(*GetEffectiveDirCacheTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetOpenFileTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenFileTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetOpenFileTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetOpenFileTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetOpenFileTable(ctx, req.(*GetOpenFileTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetDirCacheTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetDirCacheTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetDirCacheTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetDirCacheTable(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetReferencedEntryPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetReferencedEntryPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetReferencedEntryPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetReferencedEntryPaths(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetTempFileTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetTempFileTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetTempFileTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetTempFileTable(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_PushTaskChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudDriveFileSrvServer).PushTaskChange(m, &cloudDriveFileSrvPushTaskChangeServer{stream})
}

type CloudDriveFileSrv_PushTaskChangeServer interface {
	Send(*GetAllTasksCountResult) error
	grpc.ServerStream
}

type cloudDriveFileSrvPushTaskChangeServer struct {
	grpc.ServerStream
}

func (x *cloudDriveFileSrvPushTaskChangeServer) Send(m *GetAllTasksCountResult) error {
	return x.ServerStream.SendMsg(m)
}

func _CloudDriveFileSrv_GetCloudDrive1UserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetCloudDrive1UserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetCloudDrive1UserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetCloudDrive1UserData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_RestartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).RestartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/RestartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).RestartService(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ShutdownService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ShutdownService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ShutdownService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ShutdownService(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_HasUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).HasUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/HasUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).HasUpdate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CheckUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CheckUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/CheckUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CheckUpdate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_DownloadUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).DownloadUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/DownloadUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).DownloadUpdate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_UpdateSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).UpdateSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/UpdateSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).UpdateSystem(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetMetaData(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetOriginalPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetOriginalPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetOriginalPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetOriginalPath(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CloseFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CloseFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/CloseFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CloseFile(ctx, req.(*CloseFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_WriteToFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudDriveFileSrvServer).WriteToFileStream(&cloudDriveFileSrvWriteToFileStreamServer{stream})
}

type CloudDriveFileSrv_WriteToFileStreamServer interface {
	SendAndClose(*WriteFileResult) error
	Recv() (*WriteFileRequest, error)
	grpc.ServerStream
}

type cloudDriveFileSrvWriteToFileStreamServer struct {
	grpc.ServerStream
}

func (x *cloudDriveFileSrvWriteToFileStreamServer) SendAndClose(m *WriteFileResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudDriveFileSrvWriteToFileStreamServer) Recv() (*WriteFileRequest, error) {
	m := new(WriteFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CloudDriveFileSrv_WriteToFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).WriteToFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/WriteToFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).WriteToFile(ctx, req.(*WriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetPromotions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetPromotions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetPromotions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetPromotions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_UpdatePromotionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).UpdatePromotionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/UpdatePromotionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).UpdatePromotionResult(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetCloudDrivePlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetCloudDrivePlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetCloudDrivePlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetCloudDrivePlans(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_JoinPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).JoinPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/JoinPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).JoinPlan(ctx, req.(*JoinPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BindCloudAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindCloudAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BindCloudAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/BindCloudAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BindCloudAccount(ctx, req.(*BindCloudAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_TransferBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).TransferBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/TransferBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).TransferBalance(ctx, req.(*TransferBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserNameEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ChangeEmail(ctx, req.(*ChangeUserNameEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetBalanceLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetBalanceLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetBalanceLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetBalanceLog(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CheckActivationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CheckActivationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/CheckActivationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CheckActivationCode(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_ActivatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).ActivatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/ActivatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).ActivatePlan(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CheckCouponCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCouponCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CheckCouponCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/CheckCouponCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CheckCouponCode(ctx, req.(*CheckCouponCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_GetReferralCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).GetReferralCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/GetReferralCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).GetReferralCode(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/BackupGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupGetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Backup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/BackupAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupAdd(ctx, req.(*Backup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/BackupRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupRemove(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Backup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/BackupUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupUpdate(ctx, req.(*Backup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupAddDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupAddDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/BackupAddDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupAddDestination(ctx, req.(*BackupModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupRemoveDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupRemoveDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/BackupRemoveDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupRemoveDestination(ctx, req.(*BackupModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupSetEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupSetEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupSetEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/BackupSetEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupSetEnabled(ctx, req.(*BackupSetEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupSetFileSystemWatchEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupSetFileSystemWatchEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/BackupSetFileSystemWatchEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupSetFileSystemWatchEnabled(ctx, req.(*BackupModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupUpdateStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupUpdateStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/BackupUpdateStrategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupUpdateStrategies(ctx, req.(*BackupModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_BackupRestartWalkingThrough_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).BackupRestartWalkingThrough(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/BackupRestartWalkingThrough",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).BackupRestartWalkingThrough(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDriveFileSrv_CanAddMoreBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDriveFileSrvServer).CanAddMoreBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddrive.CloudDriveFileSrv/CanAddMoreBackups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDriveFileSrvServer).CanAddMoreBackups(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudDriveFileSrv_ServiceDesc is the grpc.ServiceDesc for CloudDriveFileSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudDriveFileSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clouddrive.CloudDriveFileSrv",
	HandlerType: (*CloudDriveFileSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemInfo",
			Handler:    _CloudDriveFileSrv_GetSystemInfo_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _CloudDriveFileSrv_GetToken_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _CloudDriveFileSrv_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _CloudDriveFileSrv_Register_Handler,
		},
		{
			MethodName: "SendResetAccountEmail",
			Handler:    _CloudDriveFileSrv_SendResetAccountEmail_Handler,
		},
		{
			MethodName: "ResetAccount",
			Handler:    _CloudDriveFileSrv_ResetAccount_Handler,
		},
		{
			MethodName: "SendConfirmEmail",
			Handler:    _CloudDriveFileSrv_SendConfirmEmail_Handler,
		},
		{
			MethodName: "ConfirmEmail",
			Handler:    _CloudDriveFileSrv_ConfirmEmail_Handler,
		},
		{
			MethodName: "GetAccountStatus",
			Handler:    _CloudDriveFileSrv_GetAccountStatus_Handler,
		},
		{
			MethodName: "FindFileByPath",
			Handler:    _CloudDriveFileSrv_FindFileByPath_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _CloudDriveFileSrv_CreateFolder_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _CloudDriveFileSrv_RenameFile_Handler,
		},
		{
			MethodName: "RenameFiles",
			Handler:    _CloudDriveFileSrv_RenameFiles_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _CloudDriveFileSrv_MoveFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _CloudDriveFileSrv_DeleteFile_Handler,
		},
		{
			MethodName: "DeleteFilePermanently",
			Handler:    _CloudDriveFileSrv_DeleteFilePermanently_Handler,
		},
		{
			MethodName: "DeleteFiles",
			Handler:    _CloudDriveFileSrv_DeleteFiles_Handler,
		},
		{
			MethodName: "DeleteFilesPermanently",
			Handler:    _CloudDriveFileSrv_DeleteFilesPermanently_Handler,
		},
		{
			MethodName: "AddOfflineFiles",
			Handler:    _CloudDriveFileSrv_AddOfflineFiles_Handler,
		},
		{
			MethodName: "RemoveOfflineFiles",
			Handler:    _CloudDriveFileSrv_RemoveOfflineFiles_Handler,
		},
		{
			MethodName: "ListOfflineFilesByPath",
			Handler:    _CloudDriveFileSrv_ListOfflineFilesByPath_Handler,
		},
		{
			MethodName: "ListAllOfflineFiles",
			Handler:    _CloudDriveFileSrv_ListAllOfflineFiles_Handler,
		},
		{
			MethodName: "GetFileDetailProperties",
			Handler:    _CloudDriveFileSrv_GetFileDetailProperties_Handler,
		},
		{
			MethodName: "GetSpaceInfo",
			Handler:    _CloudDriveFileSrv_GetSpaceInfo_Handler,
		},
		{
			MethodName: "GetCloudMemberships",
			Handler:    _CloudDriveFileSrv_GetCloudMemberships_Handler,
		},
		{
			MethodName: "GetRuntimeInfo",
			Handler:    _CloudDriveFileSrv_GetRuntimeInfo_Handler,
		},
		{
			MethodName: "GetRunningInfo",
			Handler:    _CloudDriveFileSrv_GetRunningInfo_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _CloudDriveFileSrv_Logout_Handler,
		},
		{
			MethodName: "CanAddMoreMountPoints",
			Handler:    _CloudDriveFileSrv_CanAddMoreMountPoints_Handler,
		},
		{
			MethodName: "GetMountPoints",
			Handler:    _CloudDriveFileSrv_GetMountPoints_Handler,
		},
		{
			MethodName: "AddMountPoint",
			Handler:    _CloudDriveFileSrv_AddMountPoint_Handler,
		},
		{
			MethodName: "RemoveMountPoint",
			Handler:    _CloudDriveFileSrv_RemoveMountPoint_Handler,
		},
		{
			MethodName: "Mount",
			Handler:    _CloudDriveFileSrv_Mount_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _CloudDriveFileSrv_Unmount_Handler,
		},
		{
			MethodName: "UpdateMountPoint",
			Handler:    _CloudDriveFileSrv_UpdateMountPoint_Handler,
		},
		{
			MethodName: "GetAvailableDriveLetters",
			Handler:    _CloudDriveFileSrv_GetAvailableDriveLetters_Handler,
		},
		{
			MethodName: "HasDriveLetters",
			Handler:    _CloudDriveFileSrv_HasDriveLetters_Handler,
		},
		{
			MethodName: "GetAllTasksCount",
			Handler:    _CloudDriveFileSrv_GetAllTasksCount_Handler,
		},
		{
			MethodName: "GetDownloadFileCount",
			Handler:    _CloudDriveFileSrv_GetDownloadFileCount_Handler,
		},
		{
			MethodName: "GetDownloadFileList",
			Handler:    _CloudDriveFileSrv_GetDownloadFileList_Handler,
		},
		{
			MethodName: "GetUploadFileCount",
			Handler:    _CloudDriveFileSrv_GetUploadFileCount_Handler,
		},
		{
			MethodName: "GetUploadFileList",
			Handler:    _CloudDriveFileSrv_GetUploadFileList_Handler,
		},
		{
			MethodName: "CancelAllUploadFiles",
			Handler:    _CloudDriveFileSrv_CancelAllUploadFiles_Handler,
		},
		{
			MethodName: "CancelUploadFiles",
			Handler:    _CloudDriveFileSrv_CancelUploadFiles_Handler,
		},
		{
			MethodName: "PauseAllUploadFiles",
			Handler:    _CloudDriveFileSrv_PauseAllUploadFiles_Handler,
		},
		{
			MethodName: "PauseUploadFiles",
			Handler:    _CloudDriveFileSrv_PauseUploadFiles_Handler,
		},
		{
			MethodName: "ResumeAllUploadFiles",
			Handler:    _CloudDriveFileSrv_ResumeAllUploadFiles_Handler,
		},
		{
			MethodName: "ResumeUploadFiles",
			Handler:    _CloudDriveFileSrv_ResumeUploadFiles_Handler,
		},
		{
			MethodName: "CanAddMoreCloudApis",
			Handler:    _CloudDriveFileSrv_CanAddMoreCloudApis_Handler,
		},
		{
			MethodName: "APILogin115Editthiscookie",
			Handler:    _CloudDriveFileSrv_APILogin115Editthiscookie_Handler,
		},
		{
			MethodName: "APILoginAliyundriveOAuth",
			Handler:    _CloudDriveFileSrv_APILoginAliyundriveOAuth_Handler,
		},
		{
			MethodName: "APILoginAliyundriveRefreshtoken",
			Handler:    _CloudDriveFileSrv_APILoginAliyundriveRefreshtoken_Handler,
		},
		{
			MethodName: "APILoginBaiduPanOAuth",
			Handler:    _CloudDriveFileSrv_APILoginBaiduPanOAuth_Handler,
		},
		{
			MethodName: "APILoginOneDriveOAuth",
			Handler:    _CloudDriveFileSrv_APILoginOneDriveOAuth_Handler,
		},
		{
			MethodName: "ApiLoginGoogleDriveOAuth",
			Handler:    _CloudDriveFileSrv_ApiLoginGoogleDriveOAuth_Handler,
		},
		{
			MethodName: "ApiLoginGoogleDriveRefreshToken",
			Handler:    _CloudDriveFileSrv_ApiLoginGoogleDriveRefreshToken_Handler,
		},
		{
			MethodName: "ApiLoginXunleiOAuth",
			Handler:    _CloudDriveFileSrv_ApiLoginXunleiOAuth_Handler,
		},
		{
			MethodName: "APILoginPikPak",
			Handler:    _CloudDriveFileSrv_APILoginPikPak_Handler,
		},
		{
			MethodName: "APILoginWebDav",
			Handler:    _CloudDriveFileSrv_APILoginWebDav_Handler,
		},
		{
			MethodName: "APIAddLocalFolder",
			Handler:    _CloudDriveFileSrv_APIAddLocalFolder_Handler,
		},
		{
			MethodName: "RemoveCloudAPI",
			Handler:    _CloudDriveFileSrv_RemoveCloudAPI_Handler,
		},
		{
			MethodName: "GetAllCloudApis",
			Handler:    _CloudDriveFileSrv_GetAllCloudApis_Handler,
		},
		{
			MethodName: "GetCloudAPIConfig",
			Handler:    _CloudDriveFileSrv_GetCloudAPIConfig_Handler,
		},
		{
			MethodName: "SetCloudAPIConfig",
			Handler:    _CloudDriveFileSrv_SetCloudAPIConfig_Handler,
		},
		{
			MethodName: "GetSystemSettings",
			Handler:    _CloudDriveFileSrv_GetSystemSettings_Handler,
		},
		{
			MethodName: "SetSystemSettings",
			Handler:    _CloudDriveFileSrv_SetSystemSettings_Handler,
		},
		{
			MethodName: "SetDirCacheTimeSecs",
			Handler:    _CloudDriveFileSrv_SetDirCacheTimeSecs_Handler,
		},
		{
			MethodName: "GetEffectiveDirCacheTimeSecs",
			Handler:    _CloudDriveFileSrv_GetEffectiveDirCacheTimeSecs_Handler,
		},
		{
			MethodName: "GetOpenFileTable",
			Handler:    _CloudDriveFileSrv_GetOpenFileTable_Handler,
		},
		{
			MethodName: "GetDirCacheTable",
			Handler:    _CloudDriveFileSrv_GetDirCacheTable_Handler,
		},
		{
			MethodName: "GetReferencedEntryPaths",
			Handler:    _CloudDriveFileSrv_GetReferencedEntryPaths_Handler,
		},
		{
			MethodName: "GetTempFileTable",
			Handler:    _CloudDriveFileSrv_GetTempFileTable_Handler,
		},
		{
			MethodName: "GetCloudDrive1UserData",
			Handler:    _CloudDriveFileSrv_GetCloudDrive1UserData_Handler,
		},
		{
			MethodName: "RestartService",
			Handler:    _CloudDriveFileSrv_RestartService_Handler,
		},
		{
			MethodName: "ShutdownService",
			Handler:    _CloudDriveFileSrv_ShutdownService_Handler,
		},
		{
			MethodName: "HasUpdate",
			Handler:    _CloudDriveFileSrv_HasUpdate_Handler,
		},
		{
			MethodName: "CheckUpdate",
			Handler:    _CloudDriveFileSrv_CheckUpdate_Handler,
		},
		{
			MethodName: "DownloadUpdate",
			Handler:    _CloudDriveFileSrv_DownloadUpdate_Handler,
		},
		{
			MethodName: "UpdateSystem",
			Handler:    _CloudDriveFileSrv_UpdateSystem_Handler,
		},
		{
			MethodName: "GetMetaData",
			Handler:    _CloudDriveFileSrv_GetMetaData_Handler,
		},
		{
			MethodName: "GetOriginalPath",
			Handler:    _CloudDriveFileSrv_GetOriginalPath_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _CloudDriveFileSrv_ChangePassword_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _CloudDriveFileSrv_CreateFile_Handler,
		},
		{
			MethodName: "CloseFile",
			Handler:    _CloudDriveFileSrv_CloseFile_Handler,
		},
		{
			MethodName: "WriteToFile",
			Handler:    _CloudDriveFileSrv_WriteToFile_Handler,
		},
		{
			MethodName: "GetPromotions",
			Handler:    _CloudDriveFileSrv_GetPromotions_Handler,
		},
		{
			MethodName: "UpdatePromotionResult",
			Handler:    _CloudDriveFileSrv_UpdatePromotionResult_Handler,
		},
		{
			MethodName: "GetCloudDrivePlans",
			Handler:    _CloudDriveFileSrv_GetCloudDrivePlans_Handler,
		},
		{
			MethodName: "JoinPlan",
			Handler:    _CloudDriveFileSrv_JoinPlan_Handler,
		},
		{
			MethodName: "BindCloudAccount",
			Handler:    _CloudDriveFileSrv_BindCloudAccount_Handler,
		},
		{
			MethodName: "TransferBalance",
			Handler:    _CloudDriveFileSrv_TransferBalance_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _CloudDriveFileSrv_ChangeEmail_Handler,
		},
		{
			MethodName: "GetBalanceLog",
			Handler:    _CloudDriveFileSrv_GetBalanceLog_Handler,
		},
		{
			MethodName: "CheckActivationCode",
			Handler:    _CloudDriveFileSrv_CheckActivationCode_Handler,
		},
		{
			MethodName: "ActivatePlan",
			Handler:    _CloudDriveFileSrv_ActivatePlan_Handler,
		},
		{
			MethodName: "CheckCouponCode",
			Handler:    _CloudDriveFileSrv_CheckCouponCode_Handler,
		},
		{
			MethodName: "GetReferralCode",
			Handler:    _CloudDriveFileSrv_GetReferralCode_Handler,
		},
		{
			MethodName: "BackupGetAll",
			Handler:    _CloudDriveFileSrv_BackupGetAll_Handler,
		},
		{
			MethodName: "BackupAdd",
			Handler:    _CloudDriveFileSrv_BackupAdd_Handler,
		},
		{
			MethodName: "BackupRemove",
			Handler:    _CloudDriveFileSrv_BackupRemove_Handler,
		},
		{
			MethodName: "BackupUpdate",
			Handler:    _CloudDriveFileSrv_BackupUpdate_Handler,
		},
		{
			MethodName: "BackupAddDestination",
			Handler:    _CloudDriveFileSrv_BackupAddDestination_Handler,
		},
		{
			MethodName: "BackupRemoveDestination",
			Handler:    _CloudDriveFileSrv_BackupRemoveDestination_Handler,
		},
		{
			MethodName: "BackupSetEnabled",
			Handler:    _CloudDriveFileSrv_BackupSetEnabled_Handler,
		},
		{
			MethodName: "BackupSetFileSystemWatchEnabled",
			Handler:    _CloudDriveFileSrv_BackupSetFileSystemWatchEnabled_Handler,
		},
		{
			MethodName: "BackupUpdateStrategies",
			Handler:    _CloudDriveFileSrv_BackupUpdateStrategies_Handler,
		},
		{
			MethodName: "BackupRestartWalkingThrough",
			Handler:    _CloudDriveFileSrv_BackupRestartWalkingThrough_Handler,
		},
		{
			MethodName: "CanAddMoreBackups",
			Handler:    _CloudDriveFileSrv_CanAddMoreBackups_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSubFiles",
			Handler:       _CloudDriveFileSrv_GetSubFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSearchResults",
			Handler:       _CloudDriveFileSrv_GetSearchResults_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LocalGetSubFiles",
			Handler:       _CloudDriveFileSrv_LocalGetSubFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "APILogin115QRCode",
			Handler:       _CloudDriveFileSrv_APILogin115QRCode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "APILoginAliyunDriveQRCode",
			Handler:       _CloudDriveFileSrv_APILoginAliyunDriveQRCode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "APILogin189QRCode",
			Handler:       _CloudDriveFileSrv_APILogin189QRCode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushTaskChange",
			Handler:       _CloudDriveFileSrv_PushTaskChange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteToFileStream",
			Handler:       _CloudDriveFileSrv_WriteToFileStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "clouddrive/CloudDrive.proto",
}
