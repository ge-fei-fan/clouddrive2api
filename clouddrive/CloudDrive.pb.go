// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: clouddrive/CloudDrive.proto

package clouddrive

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QRCodeScanMessageType int32

const (
	QRCodeScanMessageType_SHOW_IMAGE         QRCodeScanMessageType = 0
	QRCodeScanMessageType_SHOW_IMAGE_CONTENT QRCodeScanMessageType = 1
	QRCodeScanMessageType_CHANGE_STATUS      QRCodeScanMessageType = 2
	QRCodeScanMessageType_CLOSE              QRCodeScanMessageType = 3
	QRCodeScanMessageType_ERROR              QRCodeScanMessageType = 4
)

// Enum value maps for QRCodeScanMessageType.
var (
	QRCodeScanMessageType_name = map[int32]string{
		0: "SHOW_IMAGE",
		1: "SHOW_IMAGE_CONTENT",
		2: "CHANGE_STATUS",
		3: "CLOSE",
		4: "ERROR",
	}
	QRCodeScanMessageType_value = map[string]int32{
		"SHOW_IMAGE":         0,
		"SHOW_IMAGE_CONTENT": 1,
		"CHANGE_STATUS":      2,
		"CLOSE":              3,
		"ERROR":              4,
	}
)

func (x QRCodeScanMessageType) Enum() *QRCodeScanMessageType {
	p := new(QRCodeScanMessageType)
	*p = x
	return p
}

func (x QRCodeScanMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QRCodeScanMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_clouddrive_CloudDrive_proto_enumTypes[0].Descriptor()
}

func (QRCodeScanMessageType) Type() protoreflect.EnumType {
	return &file_clouddrive_CloudDrive_proto_enumTypes[0]
}

func (x QRCodeScanMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QRCodeScanMessageType.Descriptor instead.
func (QRCodeScanMessageType) EnumDescriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{0}
}

type UpdateChannel int32

const (
	UpdateChannel_Release UpdateChannel = 0
	UpdateChannel_Beta    UpdateChannel = 1
)

// Enum value maps for UpdateChannel.
var (
	UpdateChannel_name = map[int32]string{
		0: "Release",
		1: "Beta",
	}
	UpdateChannel_value = map[string]int32{
		"Release": 0,
		"Beta":    1,
	}
)

func (x UpdateChannel) Enum() *UpdateChannel {
	p := new(UpdateChannel)
	*p = x
	return p
}

func (x UpdateChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_clouddrive_CloudDrive_proto_enumTypes[1].Descriptor()
}

func (UpdateChannel) Type() protoreflect.EnumType {
	return &file_clouddrive_CloudDrive_proto_enumTypes[1]
}

func (x UpdateChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateChannel.Descriptor instead.
func (UpdateChannel) EnumDescriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{1}
}

type OfflineFileStatus int32

const (
	OfflineFileStatus_OFFLINE_INIT        OfflineFileStatus = 0
	OfflineFileStatus_OFFLINE_DOWNLOADING OfflineFileStatus = 1
	OfflineFileStatus_OFFLINE_FINISHED    OfflineFileStatus = 2
	OfflineFileStatus_OFFLINE_ERROR       OfflineFileStatus = 3
	OfflineFileStatus_OFFLINE_UNKNOWN     OfflineFileStatus = 4
)

// Enum value maps for OfflineFileStatus.
var (
	OfflineFileStatus_name = map[int32]string{
		0: "OFFLINE_INIT",
		1: "OFFLINE_DOWNLOADING",
		2: "OFFLINE_FINISHED",
		3: "OFFLINE_ERROR",
		4: "OFFLINE_UNKNOWN",
	}
	OfflineFileStatus_value = map[string]int32{
		"OFFLINE_INIT":        0,
		"OFFLINE_DOWNLOADING": 1,
		"OFFLINE_FINISHED":    2,
		"OFFLINE_ERROR":       3,
		"OFFLINE_UNKNOWN":     4,
	}
)

func (x OfflineFileStatus) Enum() *OfflineFileStatus {
	p := new(OfflineFileStatus)
	*p = x
	return p
}

func (x OfflineFileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OfflineFileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_clouddrive_CloudDrive_proto_enumTypes[2].Descriptor()
}

func (OfflineFileStatus) Type() protoreflect.EnumType {
	return &file_clouddrive_CloudDrive_proto_enumTypes[2]
}

func (x OfflineFileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OfflineFileStatus.Descriptor instead.
func (OfflineFileStatus) EnumDescriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{2}
}

type FileReplaceRule int32

const (
	FileReplaceRule_Skip               FileReplaceRule = 0
	FileReplaceRule_Overwrite          FileReplaceRule = 1
	FileReplaceRule_KeepHistoryVersion FileReplaceRule = 2
)

// Enum value maps for FileReplaceRule.
var (
	FileReplaceRule_name = map[int32]string{
		0: "Skip",
		1: "Overwrite",
		2: "KeepHistoryVersion",
	}
	FileReplaceRule_value = map[string]int32{
		"Skip":               0,
		"Overwrite":          1,
		"KeepHistoryVersion": 2,
	}
)

func (x FileReplaceRule) Enum() *FileReplaceRule {
	p := new(FileReplaceRule)
	*p = x
	return p
}

func (x FileReplaceRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileReplaceRule) Descriptor() protoreflect.EnumDescriptor {
	return file_clouddrive_CloudDrive_proto_enumTypes[3].Descriptor()
}

func (FileReplaceRule) Type() protoreflect.EnumType {
	return &file_clouddrive_CloudDrive_proto_enumTypes[3]
}

func (x FileReplaceRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileReplaceRule.Descriptor instead.
func (FileReplaceRule) EnumDescriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{3}
}

type FileDeleteRule int32

const (
	FileDeleteRule_Delete               FileDeleteRule = 0
	FileDeleteRule_Recycle              FileDeleteRule = 1
	FileDeleteRule_Keep                 FileDeleteRule = 2
	FileDeleteRule_MoveToVersionHistory FileDeleteRule = 3
)

// Enum value maps for FileDeleteRule.
var (
	FileDeleteRule_name = map[int32]string{
		0: "Delete",
		1: "Recycle",
		2: "Keep",
		3: "MoveToVersionHistory",
	}
	FileDeleteRule_value = map[string]int32{
		"Delete":               0,
		"Recycle":              1,
		"Keep":                 2,
		"MoveToVersionHistory": 3,
	}
)

func (x FileDeleteRule) Enum() *FileDeleteRule {
	p := new(FileDeleteRule)
	*p = x
	return p
}

func (x FileDeleteRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileDeleteRule) Descriptor() protoreflect.EnumDescriptor {
	return file_clouddrive_CloudDrive_proto_enumTypes[4].Descriptor()
}

func (FileDeleteRule) Type() protoreflect.EnumType {
	return &file_clouddrive_CloudDrive_proto_enumTypes[4]
}

func (x FileDeleteRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileDeleteRule.Descriptor instead.
func (FileDeleteRule) EnumDescriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{4}
}

type CloudDriveFile_FileType int32

const (
	CloudDriveFile_Directory CloudDriveFile_FileType = 0
	CloudDriveFile_File      CloudDriveFile_FileType = 1
	CloudDriveFile_Other     CloudDriveFile_FileType = 2
)

// Enum value maps for CloudDriveFile_FileType.
var (
	CloudDriveFile_FileType_name = map[int32]string{
		0: "Directory",
		1: "File",
		2: "Other",
	}
	CloudDriveFile_FileType_value = map[string]int32{
		"Directory": 0,
		"File":      1,
		"Other":     2,
	}
)

func (x CloudDriveFile_FileType) Enum() *CloudDriveFile_FileType {
	p := new(CloudDriveFile_FileType)
	*p = x
	return p
}

func (x CloudDriveFile_FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudDriveFile_FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_clouddrive_CloudDrive_proto_enumTypes[5].Descriptor()
}

func (CloudDriveFile_FileType) Type() protoreflect.EnumType {
	return &file_clouddrive_CloudDrive_proto_enumTypes[5]
}

func (x CloudDriveFile_FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudDriveFile_FileType.Descriptor instead.
func (CloudDriveFile_FileType) EnumDescriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{24, 0}
}

type CloudDriveFile_HashType int32

const (
	CloudDriveFile_Unknown    CloudDriveFile_HashType = 0
	CloudDriveFile_Md5        CloudDriveFile_HashType = 1
	CloudDriveFile_Sha1       CloudDriveFile_HashType = 2
	CloudDriveFile_PikPakSha1 CloudDriveFile_HashType = 3
)

// Enum value maps for CloudDriveFile_HashType.
var (
	CloudDriveFile_HashType_name = map[int32]string{
		0: "Unknown",
		1: "Md5",
		2: "Sha1",
		3: "PikPakSha1",
	}
	CloudDriveFile_HashType_value = map[string]int32{
		"Unknown":    0,
		"Md5":        1,
		"Sha1":       2,
		"PikPakSha1": 3,
	}
)

func (x CloudDriveFile_HashType) Enum() *CloudDriveFile_HashType {
	p := new(CloudDriveFile_HashType)
	*p = x
	return p
}

func (x CloudDriveFile_HashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudDriveFile_HashType) Descriptor() protoreflect.EnumDescriptor {
	return file_clouddrive_CloudDrive_proto_enumTypes[6].Descriptor()
}

func (CloudDriveFile_HashType) Type() protoreflect.EnumType {
	return &file_clouddrive_CloudDrive_proto_enumTypes[6]
}

func (x CloudDriveFile_HashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudDriveFile_HashType.Descriptor instead.
func (CloudDriveFile_HashType) EnumDescriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{24, 1}
}

type BalanceLog_BalancceChangeOperation int32

const (
	BalanceLog_Unknown BalanceLog_BalancceChangeOperation = 0
	BalanceLog_Deposit BalanceLog_BalancceChangeOperation = 1
	BalanceLog_Refund  BalanceLog_BalancceChangeOperation = 2
)

// Enum value maps for BalanceLog_BalancceChangeOperation.
var (
	BalanceLog_BalancceChangeOperation_name = map[int32]string{
		0: "Unknown",
		1: "Deposit",
		2: "Refund",
	}
	BalanceLog_BalancceChangeOperation_value = map[string]int32{
		"Unknown": 0,
		"Deposit": 1,
		"Refund":  2,
	}
)

func (x BalanceLog_BalancceChangeOperation) Enum() *BalanceLog_BalancceChangeOperation {
	p := new(BalanceLog_BalancceChangeOperation)
	*p = x
	return p
}

func (x BalanceLog_BalancceChangeOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalanceLog_BalancceChangeOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_clouddrive_CloudDrive_proto_enumTypes[7].Descriptor()
}

func (BalanceLog_BalancceChangeOperation) Type() protoreflect.EnumType {
	return &file_clouddrive_CloudDrive_proto_enumTypes[7]
}

func (x BalanceLog_BalancceChangeOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BalanceLog_BalancceChangeOperation.Descriptor instead.
func (BalanceLog_BalancceChangeOperation) EnumDescriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{113, 0}
}

type BackupStatus_Status int32

const (
	BackupStatus_Idle           BackupStatus_Status = 0
	BackupStatus_WalkingThrough BackupStatus_Status = 1
	BackupStatus_Error          BackupStatus_Status = 2
	BackupStatus_Disabled       BackupStatus_Status = 3
)

// Enum value maps for BackupStatus_Status.
var (
	BackupStatus_Status_name = map[int32]string{
		0: "Idle",
		1: "WalkingThrough",
		2: "Error",
		3: "Disabled",
	}
	BackupStatus_Status_value = map[string]int32{
		"Idle":           0,
		"WalkingThrough": 1,
		"Error":          2,
		"Disabled":       3,
	}
)

func (x BackupStatus_Status) Enum() *BackupStatus_Status {
	p := new(BackupStatus_Status)
	*p = x
	return p
}

func (x BackupStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_clouddrive_CloudDrive_proto_enumTypes[8].Descriptor()
}

func (BackupStatus_Status) Type() protoreflect.EnumType {
	return &file_clouddrive_CloudDrive_proto_enumTypes[8]
}

func (x BackupStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupStatus_Status.Descriptor instead.
func (BackupStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{125, 0}
}

type BackupStatus_FileWatchStatus int32

const (
	BackupStatus_WatcherIdle     BackupStatus_FileWatchStatus = 0
	BackupStatus_Watching        BackupStatus_FileWatchStatus = 1
	BackupStatus_WatcherError    BackupStatus_FileWatchStatus = 2
	BackupStatus_WatcherDisabled BackupStatus_FileWatchStatus = 3
)

// Enum value maps for BackupStatus_FileWatchStatus.
var (
	BackupStatus_FileWatchStatus_name = map[int32]string{
		0: "WatcherIdle",
		1: "Watching",
		2: "WatcherError",
		3: "WatcherDisabled",
	}
	BackupStatus_FileWatchStatus_value = map[string]int32{
		"WatcherIdle":     0,
		"Watching":        1,
		"WatcherError":    2,
		"WatcherDisabled": 3,
	}
)

func (x BackupStatus_FileWatchStatus) Enum() *BackupStatus_FileWatchStatus {
	p := new(BackupStatus_FileWatchStatus)
	*p = x
	return p
}

func (x BackupStatus_FileWatchStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupStatus_FileWatchStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_clouddrive_CloudDrive_proto_enumTypes[9].Descriptor()
}

func (BackupStatus_FileWatchStatus) Type() protoreflect.EnumType {
	return &file_clouddrive_CloudDrive_proto_enumTypes[9]
}

func (x BackupStatus_FileWatchStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupStatus_FileWatchStatus.Descriptor instead.
func (BackupStatus_FileWatchStatus) EnumDescriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{125, 1}
}

type GetTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *GetTokenRequest) Reset() {
	*x = GetTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenRequest) ProtoMessage() {}

func (x *GetTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenRequest.ProtoReflect.Descriptor instead.
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{0}
}

func (x *GetTokenRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetTokenRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type JWTToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string                 `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	Token        string                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Expiration   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *JWTToken) Reset() {
	*x = JWTToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTToken) ProtoMessage() {}

func (x *JWTToken) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTToken.ProtoReflect.Descriptor instead.
func (*JWTToken) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{1}
}

func (x *JWTToken) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JWTToken) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *JWTToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JWTToken) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{2}
}

func (x *FileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type MultiFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *MultiFileRequest) Reset() {
	*x = MultiFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiFileRequest) ProtoMessage() {}

func (x *MultiFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiFileRequest.ProtoReflect.Descriptor instead.
func (*MultiFileRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{3}
}

func (x *MultiFileRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type FileOperationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage    string   `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	ResultFilePaths []string `protobuf:"bytes,3,rep,name=resultFilePaths,proto3" json:"resultFilePaths,omitempty"`
}

func (x *FileOperationResult) Reset() {
	*x = FileOperationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOperationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOperationResult) ProtoMessage() {}

func (x *FileOperationResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOperationResult.ProtoReflect.Descriptor instead.
func (*FileOperationResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{4}
}

func (x *FileOperationResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FileOperationResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *FileOperationResult) GetResultFilePaths() []string {
	if x != nil {
		return x.ResultFilePaths
	}
	return nil
}

type StringResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *StringResult) Reset() {
	*x = StringResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringResult) ProtoMessage() {}

func (x *StringResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringResult.ProtoReflect.Descriptor instead.
func (*StringResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{5}
}

func (x *StringResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type UnmountArchiveResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UnmountArchiveResult) Reset() {
	*x = UnmountArchiveResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmountArchiveResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmountArchiveResult) ProtoMessage() {}

func (x *UnmountArchiveResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmountArchiveResult.ProtoReflect.Descriptor instead.
func (*UnmountArchiveResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{6}
}

func (x *UnmountArchiveResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type ListSubFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ForceRefresh bool   `protobuf:"varint,2,opt,name=forceRefresh,proto3" json:"forceRefresh,omitempty"`
	CheckExpires *bool  `protobuf:"varint,3,opt,name=checkExpires,proto3,oneof" json:"checkExpires,omitempty"`
}

func (x *ListSubFileRequest) Reset() {
	*x = ListSubFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubFileRequest) ProtoMessage() {}

func (x *ListSubFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubFileRequest.ProtoReflect.Descriptor instead.
func (*ListSubFileRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{7}
}

func (x *ListSubFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ListSubFileRequest) GetForceRefresh() bool {
	if x != nil {
		return x.ForceRefresh
	}
	return false
}

func (x *ListSubFileRequest) GetCheckExpires() bool {
	if x != nil && x.CheckExpires != nil {
		return *x.CheckExpires
	}
	return false
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	SearchFor    string `protobuf:"bytes,2,opt,name=searchFor,proto3" json:"searchFor,omitempty"`
	ForceRefresh bool   `protobuf:"varint,3,opt,name=forceRefresh,proto3" json:"forceRefresh,omitempty"`
	FuzzyMatch   bool   `protobuf:"varint,4,opt,name=fuzzyMatch,proto3" json:"fuzzyMatch,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{8}
}

func (x *SearchRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SearchRequest) GetSearchFor() string {
	if x != nil {
		return x.SearchFor
	}
	return ""
}

func (x *SearchRequest) GetForceRefresh() bool {
	if x != nil {
		return x.ForceRefresh
	}
	return false
}

func (x *SearchRequest) GetFuzzyMatch() bool {
	if x != nil {
		return x.FuzzyMatch
	}
	return false
}

type AddOfflineFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls     string `protobuf:"bytes,1,opt,name=urls,proto3" json:"urls,omitempty"`
	ToFolder string `protobuf:"bytes,2,opt,name=toFolder,proto3" json:"toFolder,omitempty"`
}

func (x *AddOfflineFileRequest) Reset() {
	*x = AddOfflineFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOfflineFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOfflineFileRequest) ProtoMessage() {}

func (x *AddOfflineFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOfflineFileRequest.ProtoReflect.Descriptor instead.
func (*AddOfflineFileRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{9}
}

func (x *AddOfflineFileRequest) GetUrls() string {
	if x != nil {
		return x.Urls
	}
	return ""
}

func (x *AddOfflineFileRequest) GetToFolder() string {
	if x != nil {
		return x.ToFolder
	}
	return ""
}

type RemoveOfflineFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudName      string   `protobuf:"bytes,1,opt,name=cloudName,proto3" json:"cloudName,omitempty"`
	CloudAccountId string   `protobuf:"bytes,2,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	DeleteFiles    bool     `protobuf:"varint,3,opt,name=deleteFiles,proto3" json:"deleteFiles,omitempty"`
	InfoHashes     []string `protobuf:"bytes,4,rep,name=infoHashes,proto3" json:"infoHashes,omitempty"`
}

func (x *RemoveOfflineFilesRequest) Reset() {
	*x = RemoveOfflineFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOfflineFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOfflineFilesRequest) ProtoMessage() {}

func (x *RemoveOfflineFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOfflineFilesRequest.ProtoReflect.Descriptor instead.
func (*RemoveOfflineFilesRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveOfflineFilesRequest) GetCloudName() string {
	if x != nil {
		return x.CloudName
	}
	return ""
}

func (x *RemoveOfflineFilesRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *RemoveOfflineFilesRequest) GetDeleteFiles() bool {
	if x != nil {
		return x.DeleteFiles
	}
	return false
}

func (x *RemoveOfflineFilesRequest) GetInfoHashes() []string {
	if x != nil {
		return x.InfoHashes
	}
	return nil
}

type AddSharedLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedLinkUrl  string `protobuf:"bytes,1,opt,name=sharedLinkUrl,proto3" json:"sharedLinkUrl,omitempty"`
	SharedPassword string `protobuf:"bytes,2,opt,name=sharedPassword,proto3" json:"sharedPassword,omitempty"`
	ToFolder       string `protobuf:"bytes,3,opt,name=toFolder,proto3" json:"toFolder,omitempty"`
}

func (x *AddSharedLinkRequest) Reset() {
	*x = AddSharedLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSharedLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSharedLinkRequest) ProtoMessage() {}

func (x *AddSharedLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSharedLinkRequest.ProtoReflect.Descriptor instead.
func (*AddSharedLinkRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{11}
}

func (x *AddSharedLinkRequest) GetSharedLinkUrl() string {
	if x != nil {
		return x.SharedLinkUrl
	}
	return ""
}

func (x *AddSharedLinkRequest) GetSharedPassword() string {
	if x != nil {
		return x.SharedPassword
	}
	return ""
}

func (x *AddSharedLinkRequest) GetToFolder() string {
	if x != nil {
		return x.ToFolder
	}
	return ""
}

type SubFilesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubFiles []*CloudDriveFile `protobuf:"bytes,1,rep,name=subFiles,proto3" json:"subFiles,omitempty"`
}

func (x *SubFilesReply) Reset() {
	*x = SubFilesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubFilesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubFilesReply) ProtoMessage() {}

func (x *SubFilesReply) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubFilesReply.ProtoReflect.Descriptor instead.
func (*SubFilesReply) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{12}
}

func (x *SubFilesReply) GetSubFiles() []*CloudDriveFile {
	if x != nil {
		return x.SubFiles
	}
	return nil
}

type FindFileByPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentPath string `protobuf:"bytes,1,opt,name=parentPath,proto3" json:"parentPath,omitempty"`
	Path       string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FindFileByPathRequest) Reset() {
	*x = FindFileByPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFileByPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFileByPathRequest) ProtoMessage() {}

func (x *FindFileByPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFileByPathRequest.ProtoReflect.Descriptor instead.
func (*FindFileByPathRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{13}
}

func (x *FindFileByPathRequest) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *FindFileByPathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type CreateFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentPath string `protobuf:"bytes,1,opt,name=parentPath,proto3" json:"parentPath,omitempty"`
	FolderName string `protobuf:"bytes,2,opt,name=folderName,proto3" json:"folderName,omitempty"`
}

func (x *CreateFolderRequest) Reset() {
	*x = CreateFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFolderRequest) ProtoMessage() {}

func (x *CreateFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFolderRequest.ProtoReflect.Descriptor instead.
func (*CreateFolderRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{14}
}

func (x *CreateFolderRequest) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *CreateFolderRequest) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

type CreateFolderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderCreated *CloudDriveFile      `protobuf:"bytes,1,opt,name=folderCreated,proto3" json:"folderCreated,omitempty"`
	Result        *FileOperationResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateFolderResult) Reset() {
	*x = CreateFolderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFolderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFolderResult) ProtoMessage() {}

func (x *CreateFolderResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFolderResult.ProtoReflect.Descriptor instead.
func (*CreateFolderResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{15}
}

func (x *CreateFolderResult) GetFolderCreated() *CloudDriveFile {
	if x != nil {
		return x.FolderCreated
	}
	return nil
}

func (x *CreateFolderResult) GetResult() *FileOperationResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type CreateFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentPath string `protobuf:"bytes,1,opt,name=parentPath,proto3" json:"parentPath,omitempty"`
	FileName   string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *CreateFileRequest) Reset() {
	*x = CreateFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileRequest) ProtoMessage() {}

func (x *CreateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileRequest.ProtoReflect.Descriptor instead.
func (*CreateFileRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{16}
}

func (x *CreateFileRequest) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *CreateFileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type CreateFileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHandle uint64 `protobuf:"varint,1,opt,name=fileHandle,proto3" json:"fileHandle,omitempty"`
}

func (x *CreateFileResult) Reset() {
	*x = CreateFileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileResult) ProtoMessage() {}

func (x *CreateFileResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileResult.ProtoReflect.Descriptor instead.
func (*CreateFileResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{17}
}

func (x *CreateFileResult) GetFileHandle() uint64 {
	if x != nil {
		return x.FileHandle
	}
	return 0
}

type CloseFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHandle uint64 `protobuf:"varint,1,opt,name=fileHandle,proto3" json:"fileHandle,omitempty"`
}

func (x *CloseFileRequest) Reset() {
	*x = CloseFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseFileRequest) ProtoMessage() {}

func (x *CloseFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseFileRequest.ProtoReflect.Descriptor instead.
func (*CloseFileRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{18}
}

func (x *CloseFileRequest) GetFileHandle() uint64 {
	if x != nil {
		return x.FileHandle
	}
	return 0
}

type MoveFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheFilePaths []string `protobuf:"bytes,1,rep,name=theFilePaths,proto3" json:"theFilePaths,omitempty"`
	DestPath     string   `protobuf:"bytes,2,opt,name=destPath,proto3" json:"destPath,omitempty"`
}

func (x *MoveFileRequest) Reset() {
	*x = MoveFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveFileRequest) ProtoMessage() {}

func (x *MoveFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveFileRequest.ProtoReflect.Descriptor instead.
func (*MoveFileRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{19}
}

func (x *MoveFileRequest) GetTheFilePaths() []string {
	if x != nil {
		return x.TheFilePaths
	}
	return nil
}

func (x *MoveFileRequest) GetDestPath() string {
	if x != nil {
		return x.DestPath
	}
	return ""
}

type WriteFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileHandle uint64 `protobuf:"varint,1,opt,name=fileHandle,proto3" json:"fileHandle,omitempty"`
	StartPos   uint64 `protobuf:"varint,2,opt,name=startPos,proto3" json:"startPos,omitempty"`
	Length     uint64 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Buffer     []byte `protobuf:"bytes,4,opt,name=buffer,proto3" json:"buffer,omitempty"`
	CloseFile  bool   `protobuf:"varint,5,opt,name=closeFile,proto3" json:"closeFile,omitempty"`
}

func (x *WriteFileRequest) Reset() {
	*x = WriteFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteFileRequest) ProtoMessage() {}

func (x *WriteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteFileRequest.ProtoReflect.Descriptor instead.
func (*WriteFileRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{20}
}

func (x *WriteFileRequest) GetFileHandle() uint64 {
	if x != nil {
		return x.FileHandle
	}
	return 0
}

func (x *WriteFileRequest) GetStartPos() uint64 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

func (x *WriteFileRequest) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *WriteFileRequest) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *WriteFileRequest) GetCloseFile() bool {
	if x != nil {
		return x.CloseFile
	}
	return false
}

type WriteFileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesWritten uint64 `protobuf:"varint,1,opt,name=bytesWritten,proto3" json:"bytesWritten,omitempty"`
}

func (x *WriteFileResult) Reset() {
	*x = WriteFileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteFileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteFileResult) ProtoMessage() {}

func (x *WriteFileResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteFileResult.ProtoReflect.Descriptor instead.
func (*WriteFileResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{21}
}

func (x *WriteFileResult) GetBytesWritten() uint64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

type RenameFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheFilePath string `protobuf:"bytes,1,opt,name=theFilePath,proto3" json:"theFilePath,omitempty"`
	NewName     string `protobuf:"bytes,2,opt,name=newName,proto3" json:"newName,omitempty"`
}

func (x *RenameFileRequest) Reset() {
	*x = RenameFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameFileRequest) ProtoMessage() {}

func (x *RenameFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameFileRequest.ProtoReflect.Descriptor instead.
func (*RenameFileRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{22}
}

func (x *RenameFileRequest) GetTheFilePath() string {
	if x != nil {
		return x.TheFilePath
	}
	return ""
}

func (x *RenameFileRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type RenameFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RenameFiles []*RenameFileRequest `protobuf:"bytes,1,rep,name=renameFiles,proto3" json:"renameFiles,omitempty"`
}

func (x *RenameFilesRequest) Reset() {
	*x = RenameFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameFilesRequest) ProtoMessage() {}

func (x *RenameFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameFilesRequest.ProtoReflect.Descriptor instead.
func (*RenameFilesRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{23}
}

func (x *RenameFilesRequest) GetRenameFiles() []*RenameFileRequest {
	if x != nil {
		return x.RenameFiles
	}
	return nil
}

type CloudDriveFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                        string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FullPathName                string                  `protobuf:"bytes,3,opt,name=fullPathName,proto3" json:"fullPathName,omitempty"`
	Size                        int64                   `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	FileType                    CloudDriveFile_FileType `protobuf:"varint,5,opt,name=fileType,proto3,enum=clouddrive.CloudDriveFile_FileType" json:"fileType,omitempty"`
	CreateTime                  *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	WriteTime                   *timestamppb.Timestamp  `protobuf:"bytes,7,opt,name=writeTime,proto3" json:"writeTime,omitempty"`
	AccessTime                  *timestamppb.Timestamp  `protobuf:"bytes,8,opt,name=accessTime,proto3" json:"accessTime,omitempty"`
	CloudAPI                    *CloudAPI               `protobuf:"bytes,9,opt,name=CloudAPI,proto3" json:"CloudAPI,omitempty"`
	ThumbnailUrl                string                  `protobuf:"bytes,10,opt,name=thumbnailUrl,proto3" json:"thumbnailUrl,omitempty"`
	PreviewUrl                  string                  `protobuf:"bytes,11,opt,name=previewUrl,proto3" json:"previewUrl,omitempty"`
	OriginalPath                string                  `protobuf:"bytes,14,opt,name=originalPath,proto3" json:"originalPath,omitempty"`
	IsDirectory                 bool                    `protobuf:"varint,30,opt,name=isDirectory,proto3" json:"isDirectory,omitempty"`
	IsRoot                      bool                    `protobuf:"varint,31,opt,name=isRoot,proto3" json:"isRoot,omitempty"`
	IsCloudRoot                 bool                    `protobuf:"varint,32,opt,name=isCloudRoot,proto3" json:"isCloudRoot,omitempty"`
	IsCloudDirectory            bool                    `protobuf:"varint,33,opt,name=isCloudDirectory,proto3" json:"isCloudDirectory,omitempty"`
	IsCloudFile                 bool                    `protobuf:"varint,34,opt,name=isCloudFile,proto3" json:"isCloudFile,omitempty"`
	IsSearchResult              bool                    `protobuf:"varint,35,opt,name=isSearchResult,proto3" json:"isSearchResult,omitempty"`
	IsForbidden                 bool                    `protobuf:"varint,36,opt,name=isForbidden,proto3" json:"isForbidden,omitempty"`
	IsLocal                     bool                    `protobuf:"varint,37,opt,name=isLocal,proto3" json:"isLocal,omitempty"`
	CanMount                    bool                    `protobuf:"varint,60,opt,name=canMount,proto3" json:"canMount,omitempty"`
	CanUnmount                  bool                    `protobuf:"varint,61,opt,name=canUnmount,proto3" json:"canUnmount,omitempty"`
	CanDirectAccessThumbnailURL bool                    `protobuf:"varint,62,opt,name=canDirectAccessThumbnailURL,proto3" json:"canDirectAccessThumbnailURL,omitempty"`
	CanSearch                   bool                    `protobuf:"varint,63,opt,name=canSearch,proto3" json:"canSearch,omitempty"`
	HasDetailProperties         bool                    `protobuf:"varint,64,opt,name=hasDetailProperties,proto3" json:"hasDetailProperties,omitempty"`
	DetailProperties            *FileDetailProperties   `protobuf:"bytes,65,opt,name=detailProperties,proto3" json:"detailProperties,omitempty"`
	CanOfflineDownload          bool                    `protobuf:"varint,66,opt,name=canOfflineDownload,proto3" json:"canOfflineDownload,omitempty"`
	CanAddShareLink             bool                    `protobuf:"varint,67,opt,name=canAddShareLink,proto3" json:"canAddShareLink,omitempty"`
	DirCacheTimeToLiveSecs      *uint64                 `protobuf:"varint,68,opt,name=dirCacheTimeToLiveSecs,proto3,oneof" json:"dirCacheTimeToLiveSecs,omitempty"`
	CanDeletePermanently        bool                    `protobuf:"varint,69,opt,name=canDeletePermanently,proto3" json:"canDeletePermanently,omitempty"`
	FileHashes                  map[uint32]string       `protobuf:"bytes,70,rep,name=fileHashes,proto3" json:"fileHashes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CloudDriveFile) Reset() {
	*x = CloudDriveFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudDriveFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudDriveFile) ProtoMessage() {}

func (x *CloudDriveFile) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudDriveFile.ProtoReflect.Descriptor instead.
func (*CloudDriveFile) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{24}
}

func (x *CloudDriveFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudDriveFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudDriveFile) GetFullPathName() string {
	if x != nil {
		return x.FullPathName
	}
	return ""
}

func (x *CloudDriveFile) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CloudDriveFile) GetFileType() CloudDriveFile_FileType {
	if x != nil {
		return x.FileType
	}
	return CloudDriveFile_Directory
}

func (x *CloudDriveFile) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CloudDriveFile) GetWriteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.WriteTime
	}
	return nil
}

func (x *CloudDriveFile) GetAccessTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessTime
	}
	return nil
}

func (x *CloudDriveFile) GetCloudAPI() *CloudAPI {
	if x != nil {
		return x.CloudAPI
	}
	return nil
}

func (x *CloudDriveFile) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *CloudDriveFile) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *CloudDriveFile) GetOriginalPath() string {
	if x != nil {
		return x.OriginalPath
	}
	return ""
}

func (x *CloudDriveFile) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

func (x *CloudDriveFile) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *CloudDriveFile) GetIsCloudRoot() bool {
	if x != nil {
		return x.IsCloudRoot
	}
	return false
}

func (x *CloudDriveFile) GetIsCloudDirectory() bool {
	if x != nil {
		return x.IsCloudDirectory
	}
	return false
}

func (x *CloudDriveFile) GetIsCloudFile() bool {
	if x != nil {
		return x.IsCloudFile
	}
	return false
}

func (x *CloudDriveFile) GetIsSearchResult() bool {
	if x != nil {
		return x.IsSearchResult
	}
	return false
}

func (x *CloudDriveFile) GetIsForbidden() bool {
	if x != nil {
		return x.IsForbidden
	}
	return false
}

func (x *CloudDriveFile) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *CloudDriveFile) GetCanMount() bool {
	if x != nil {
		return x.CanMount
	}
	return false
}

func (x *CloudDriveFile) GetCanUnmount() bool {
	if x != nil {
		return x.CanUnmount
	}
	return false
}

func (x *CloudDriveFile) GetCanDirectAccessThumbnailURL() bool {
	if x != nil {
		return x.CanDirectAccessThumbnailURL
	}
	return false
}

func (x *CloudDriveFile) GetCanSearch() bool {
	if x != nil {
		return x.CanSearch
	}
	return false
}

func (x *CloudDriveFile) GetHasDetailProperties() bool {
	if x != nil {
		return x.HasDetailProperties
	}
	return false
}

func (x *CloudDriveFile) GetDetailProperties() *FileDetailProperties {
	if x != nil {
		return x.DetailProperties
	}
	return nil
}

func (x *CloudDriveFile) GetCanOfflineDownload() bool {
	if x != nil {
		return x.CanOfflineDownload
	}
	return false
}

func (x *CloudDriveFile) GetCanAddShareLink() bool {
	if x != nil {
		return x.CanAddShareLink
	}
	return false
}

func (x *CloudDriveFile) GetDirCacheTimeToLiveSecs() uint64 {
	if x != nil && x.DirCacheTimeToLiveSecs != nil {
		return *x.DirCacheTimeToLiveSecs
	}
	return 0
}

func (x *CloudDriveFile) GetCanDeletePermanently() bool {
	if x != nil {
		return x.CanDeletePermanently
	}
	return false
}

func (x *CloudDriveFile) GetFileHashes() map[uint32]string {
	if x != nil {
		return x.FileHashes
	}
	return nil
}

type SpaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSpace int64 `protobuf:"varint,1,opt,name=totalSpace,proto3" json:"totalSpace,omitempty"`
	UsedSpace  int64 `protobuf:"varint,2,opt,name=usedSpace,proto3" json:"usedSpace,omitempty"`
	FreeSpace  int64 `protobuf:"varint,3,opt,name=freeSpace,proto3" json:"freeSpace,omitempty"`
}

func (x *SpaceInfo) Reset() {
	*x = SpaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceInfo) ProtoMessage() {}

func (x *SpaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceInfo.ProtoReflect.Descriptor instead.
func (*SpaceInfo) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{25}
}

func (x *SpaceInfo) GetTotalSpace() int64 {
	if x != nil {
		return x.TotalSpace
	}
	return 0
}

func (x *SpaceInfo) GetUsedSpace() int64 {
	if x != nil {
		return x.UsedSpace
	}
	return 0
}

func (x *SpaceInfo) GetFreeSpace() int64 {
	if x != nil {
		return x.FreeSpace
	}
	return 0
}

type CloudAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	NickName string `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"`
	IsLocked bool   `protobuf:"varint,4,opt,name=isLocked,proto3" json:"isLocked,omitempty"` // isLocked means the cloudAPI is set to can't open files,
}

func (x *CloudAPI) Reset() {
	*x = CloudAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAPI) ProtoMessage() {}

func (x *CloudAPI) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAPI.ProtoReflect.Descriptor instead.
func (*CloudAPI) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{26}
}

func (x *CloudAPI) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudAPI) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CloudAPI) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *CloudAPI) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

type CloudMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity   string                 `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expireTime,proto3,oneof" json:"expireTime,omitempty"`
	Level      *string                `protobuf:"bytes,3,opt,name=level,proto3,oneof" json:"level,omitempty"`
}

func (x *CloudMembership) Reset() {
	*x = CloudMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudMembership) ProtoMessage() {}

func (x *CloudMembership) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudMembership.ProtoReflect.Descriptor instead.
func (*CloudMembership) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{27}
}

func (x *CloudMembership) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *CloudMembership) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *CloudMembership) GetLevel() string {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return ""
}

type CloudMemberships struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memberships []*CloudMembership `protobuf:"bytes,1,rep,name=memberships,proto3" json:"memberships,omitempty"`
}

func (x *CloudMemberships) Reset() {
	*x = CloudMemberships{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudMemberships) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudMemberships) ProtoMessage() {}

func (x *CloudMemberships) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudMemberships.ProtoReflect.Descriptor instead.
func (*CloudMemberships) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{28}
}

func (x *CloudMemberships) GetMemberships() []*CloudMembership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type FileDetailProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalFileCount   int64  `protobuf:"varint,1,opt,name=totalFileCount,proto3" json:"totalFileCount,omitempty"`
	TotalFolderCount int64  `protobuf:"varint,2,opt,name=totalFolderCount,proto3" json:"totalFolderCount,omitempty"`
	TotalSize        int64  `protobuf:"varint,3,opt,name=totalSize,proto3" json:"totalSize,omitempty"`
	IsFaved          bool   `protobuf:"varint,4,opt,name=isFaved,proto3" json:"isFaved,omitempty"`
	IsShared         bool   `protobuf:"varint,5,opt,name=isShared,proto3" json:"isShared,omitempty"`
	OriginalPath     string `protobuf:"bytes,6,opt,name=originalPath,proto3" json:"originalPath,omitempty"`
}

func (x *FileDetailProperties) Reset() {
	*x = FileDetailProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDetailProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDetailProperties) ProtoMessage() {}

func (x *FileDetailProperties) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDetailProperties.ProtoReflect.Descriptor instead.
func (*FileDetailProperties) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{29}
}

func (x *FileDetailProperties) GetTotalFileCount() int64 {
	if x != nil {
		return x.TotalFileCount
	}
	return 0
}

func (x *FileDetailProperties) GetTotalFolderCount() int64 {
	if x != nil {
		return x.TotalFolderCount
	}
	return 0
}

func (x *FileDetailProperties) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *FileDetailProperties) GetIsFaved() bool {
	if x != nil {
		return x.IsFaved
	}
	return false
}

func (x *FileDetailProperties) GetIsShared() bool {
	if x != nil {
		return x.IsShared
	}
	return false
}

func (x *FileDetailProperties) GetOriginalPath() string {
	if x != nil {
		return x.OriginalPath
	}
	return ""
}

type FileMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileMetaData) Reset() {
	*x = FileMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetaData) ProtoMessage() {}

func (x *FileMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetaData.ProtoReflect.Descriptor instead.
func (*FileMetaData) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{30}
}

func (x *FileMetaData) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CloudDriveSystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLogin  bool   `protobuf:"varint,1,opt,name=IsLogin,proto3" json:"IsLogin,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
}

func (x *CloudDriveSystemInfo) Reset() {
	*x = CloudDriveSystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudDriveSystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudDriveSystemInfo) ProtoMessage() {}

func (x *CloudDriveSystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudDriveSystemInfo.ProtoReflect.Descriptor instead.
func (*CloudDriveSystemInfo) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{31}
}

func (x *CloudDriveSystemInfo) GetIsLogin() bool {
	if x != nil {
		return x.IsLogin
	}
	return false
}

func (x *CloudDriveSystemInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UserLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName       string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	Password       string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	SynDataToCloud bool   `protobuf:"varint,3,opt,name=synDataToCloud,proto3" json:"synDataToCloud,omitempty"`
}

func (x *UserLoginRequest) Reset() {
	*x = UserLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginRequest) ProtoMessage() {}

func (x *UserLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginRequest.ProtoReflect.Descriptor instead.
func (*UserLoginRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{32}
}

func (x *UserLoginRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserLoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserLoginRequest) GetSynDataToCloud() bool {
	if x != nil {
		return x.SynDataToCloud
	}
	return false
}

type UserRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UserRegisterRequest) Reset() {
	*x = UserRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterRequest) ProtoMessage() {}

func (x *UserRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterRequest.ProtoReflect.Descriptor instead.
func (*UserRegisterRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{33}
}

func (x *UserRegisterRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserRegisterRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UserLogoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogoutFromCloudFS bool `protobuf:"varint,1,opt,name=logoutFromCloudFS,proto3" json:"logoutFromCloudFS,omitempty"`
}

func (x *UserLogoutRequest) Reset() {
	*x = UserLogoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogoutRequest) ProtoMessage() {}

func (x *UserLogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogoutRequest.ProtoReflect.Descriptor instead.
func (*UserLogoutRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{34}
}

func (x *UserLogoutRequest) GetLogoutFromCloudFS() bool {
	if x != nil {
		return x.LogoutFromCloudFS
	}
	return false
}

type ChangePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPassword string `protobuf:"bytes,1,opt,name=oldPassword,proto3" json:"oldPassword,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
}

func (x *ChangePasswordRequest) Reset() {
	*x = ChangePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordRequest) ProtoMessage() {}

func (x *ChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{35}
}

func (x *ChangePasswordRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ChangePasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type AccountStatusResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName       string         `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	EmailConfirmed string         `protobuf:"bytes,2,opt,name=emailConfirmed,proto3" json:"emailConfirmed,omitempty"`
	AccountBalance float64        `protobuf:"fixed64,3,opt,name=accountBalance,proto3" json:"accountBalance,omitempty"`
	AccountPlan    *AccountPlan   `protobuf:"bytes,4,opt,name=accountPlan,proto3" json:"accountPlan,omitempty"`
	AccountRoles   []*AccountRole `protobuf:"bytes,5,rep,name=accountRoles,proto3" json:"accountRoles,omitempty"`
}

func (x *AccountStatusResult) Reset() {
	*x = AccountStatusResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStatusResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStatusResult) ProtoMessage() {}

func (x *AccountStatusResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStatusResult.ProtoReflect.Descriptor instead.
func (*AccountStatusResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{36}
}

func (x *AccountStatusResult) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AccountStatusResult) GetEmailConfirmed() string {
	if x != nil {
		return x.EmailConfirmed
	}
	return ""
}

func (x *AccountStatusResult) GetAccountBalance() float64 {
	if x != nil {
		return x.AccountBalance
	}
	return 0
}

func (x *AccountStatusResult) GetAccountPlan() *AccountPlan {
	if x != nil {
		return x.AccountPlan
	}
	return nil
}

func (x *AccountStatusResult) GetAccountRoles() []*AccountRole {
	if x != nil {
		return x.AccountRoles
	}
	return nil
}

type AccountPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanName            string                 `protobuf:"bytes,1,opt,name=planName,proto3" json:"planName,omitempty"`
	Description         string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	FontAwesomeIcon     string                 `protobuf:"bytes,3,opt,name=fontAwesomeIcon,proto3" json:"fontAwesomeIcon,omitempty"`
	DurationDescription string                 `protobuf:"bytes,4,opt,name=durationDescription,proto3" json:"durationDescription,omitempty"`
	EndTime             *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *AccountPlan) Reset() {
	*x = AccountPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPlan) ProtoMessage() {}

func (x *AccountPlan) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPlan.ProtoReflect.Descriptor instead.
func (*AccountPlan) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{37}
}

func (x *AccountPlan) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *AccountPlan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AccountPlan) GetFontAwesomeIcon() string {
	if x != nil {
		return x.FontAwesomeIcon
	}
	return ""
}

func (x *AccountPlan) GetDurationDescription() string {
	if x != nil {
		return x.DurationDescription
	}
	return ""
}

func (x *AccountPlan) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type AccountRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleName    string `protobuf:"bytes,1,opt,name=roleName,proto3" json:"roleName,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Value       *int32 `protobuf:"varint,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *AccountRole) Reset() {
	*x = AccountRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRole) ProtoMessage() {}

func (x *AccountRole) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRole.ProtoReflect.Descriptor instead.
func (*AccountRole) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{38}
}

func (x *AccountRole) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *AccountRole) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AccountRole) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type RuntimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName     string `protobuf:"bytes,1,opt,name=productName,proto3" json:"productName,omitempty"`
	ProductVersion  string `protobuf:"bytes,2,opt,name=productVersion,proto3" json:"productVersion,omitempty"`
	CloudAPIVersion string `protobuf:"bytes,3,opt,name=CloudAPIVersion,proto3" json:"CloudAPIVersion,omitempty"`
	OsInfo          string `protobuf:"bytes,4,opt,name=osInfo,proto3" json:"osInfo,omitempty"`
}

func (x *RuntimeInfo) Reset() {
	*x = RuntimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeInfo) ProtoMessage() {}

func (x *RuntimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeInfo.ProtoReflect.Descriptor instead.
func (*RuntimeInfo) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{39}
}

func (x *RuntimeInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *RuntimeInfo) GetProductVersion() string {
	if x != nil {
		return x.ProductVersion
	}
	return ""
}

func (x *RuntimeInfo) GetCloudAPIVersion() string {
	if x != nil {
		return x.CloudAPIVersion
	}
	return ""
}

func (x *RuntimeInfo) GetOsInfo() string {
	if x != nil {
		return x.OsInfo
	}
	return ""
}

type RunInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUsage      float64 `protobuf:"fixed64,1,opt,name=cpuUsage,proto3" json:"cpuUsage,omitempty"`
	MemUsageKB    uint64  `protobuf:"varint,2,opt,name=memUsageKB,proto3" json:"memUsageKB,omitempty"`
	Uptime        float64 `protobuf:"fixed64,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	FhTableCount  uint64  `protobuf:"varint,4,opt,name=fhTableCount,proto3" json:"fhTableCount,omitempty"`
	DirCacheCount uint64  `protobuf:"varint,5,opt,name=dirCacheCount,proto3" json:"dirCacheCount,omitempty"`
	TempFileCount uint64  `protobuf:"varint,6,opt,name=tempFileCount,proto3" json:"tempFileCount,omitempty"`
}

func (x *RunInfo) Reset() {
	*x = RunInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunInfo) ProtoMessage() {}

func (x *RunInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunInfo.ProtoReflect.Descriptor instead.
func (*RunInfo) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{40}
}

func (x *RunInfo) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *RunInfo) GetMemUsageKB() uint64 {
	if x != nil {
		return x.MemUsageKB
	}
	return 0
}

func (x *RunInfo) GetUptime() float64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *RunInfo) GetFhTableCount() uint64 {
	if x != nil {
		return x.FhTableCount
	}
	return 0
}

func (x *RunInfo) GetDirCacheCount() uint64 {
	if x != nil {
		return x.DirCacheCount
	}
	return 0
}

func (x *RunInfo) GetTempFileCount() uint64 {
	if x != nil {
		return x.TempFileCount
	}
	return 0
}

type MountOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountPoint  string `protobuf:"bytes,1,opt,name=mountPoint,proto3" json:"mountPoint,omitempty"`
	SourceDir   string `protobuf:"bytes,2,opt,name=sourceDir,proto3" json:"sourceDir,omitempty"`
	LocalMount  bool   `protobuf:"varint,3,opt,name=localMount,proto3" json:"localMount,omitempty"`
	ReadOnly    bool   `protobuf:"varint,4,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
	AutoMount   bool   `protobuf:"varint,5,opt,name=autoMount,proto3" json:"autoMount,omitempty"`
	Uid         uint32 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid         uint32 `protobuf:"varint,7,opt,name=gid,proto3" json:"gid,omitempty"`
	Permissions string `protobuf:"bytes,8,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Name        string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MountOption) Reset() {
	*x = MountOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountOption) ProtoMessage() {}

func (x *MountOption) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountOption.ProtoReflect.Descriptor instead.
func (*MountOption) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{41}
}

func (x *MountOption) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

func (x *MountOption) GetSourceDir() string {
	if x != nil {
		return x.SourceDir
	}
	return ""
}

func (x *MountOption) GetLocalMount() bool {
	if x != nil {
		return x.LocalMount
	}
	return false
}

func (x *MountOption) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *MountOption) GetAutoMount() bool {
	if x != nil {
		return x.AutoMount
	}
	return false
}

func (x *MountOption) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MountOption) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *MountOption) GetPermissions() string {
	if x != nil {
		return x.Permissions
	}
	return ""
}

func (x *MountOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MountPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountPoint  string `protobuf:"bytes,1,opt,name=mountPoint,proto3" json:"mountPoint,omitempty"`
	SourceDir   string `protobuf:"bytes,2,opt,name=sourceDir,proto3" json:"sourceDir,omitempty"`
	LocalMount  bool   `protobuf:"varint,3,opt,name=localMount,proto3" json:"localMount,omitempty"`
	ReadOnly    bool   `protobuf:"varint,4,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
	AutoMount   bool   `protobuf:"varint,5,opt,name=autoMount,proto3" json:"autoMount,omitempty"`
	Uid         uint32 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid         uint32 `protobuf:"varint,7,opt,name=gid,proto3" json:"gid,omitempty"`
	Permissions string `protobuf:"bytes,8,opt,name=permissions,proto3" json:"permissions,omitempty"`
	IsMounted   bool   `protobuf:"varint,9,opt,name=isMounted,proto3" json:"isMounted,omitempty"`
	FailReason  string `protobuf:"bytes,10,opt,name=failReason,proto3" json:"failReason,omitempty"`
}

func (x *MountPoint) Reset() {
	*x = MountPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountPoint) ProtoMessage() {}

func (x *MountPoint) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountPoint.ProtoReflect.Descriptor instead.
func (*MountPoint) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{42}
}

func (x *MountPoint) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

func (x *MountPoint) GetSourceDir() string {
	if x != nil {
		return x.SourceDir
	}
	return ""
}

func (x *MountPoint) GetLocalMount() bool {
	if x != nil {
		return x.LocalMount
	}
	return false
}

func (x *MountPoint) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *MountPoint) GetAutoMount() bool {
	if x != nil {
		return x.AutoMount
	}
	return false
}

func (x *MountPoint) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MountPoint) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *MountPoint) GetPermissions() string {
	if x != nil {
		return x.Permissions
	}
	return ""
}

func (x *MountPoint) GetIsMounted() bool {
	if x != nil {
		return x.IsMounted
	}
	return false
}

func (x *MountPoint) GetFailReason() string {
	if x != nil {
		return x.FailReason
	}
	return ""
}

type MountPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountPoint string `protobuf:"bytes,1,opt,name=MountPoint,proto3" json:"MountPoint,omitempty"`
}

func (x *MountPointRequest) Reset() {
	*x = MountPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountPointRequest) ProtoMessage() {}

func (x *MountPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountPointRequest.ProtoReflect.Descriptor instead.
func (*MountPointRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{43}
}

func (x *MountPointRequest) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

type GetMountPointsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountPoints []*MountPoint `protobuf:"bytes,1,rep,name=mountPoints,proto3" json:"mountPoints,omitempty"`
}

func (x *GetMountPointsResult) Reset() {
	*x = GetMountPointsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMountPointsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMountPointsResult) ProtoMessage() {}

func (x *GetMountPointsResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMountPointsResult.ProtoReflect.Descriptor instead.
func (*GetMountPointsResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{44}
}

func (x *GetMountPointsResult) GetMountPoints() []*MountPoint {
	if x != nil {
		return x.MountPoints
	}
	return nil
}

type MountPointResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	FailReason string `protobuf:"bytes,2,opt,name=failReason,proto3" json:"failReason,omitempty"`
}

func (x *MountPointResult) Reset() {
	*x = MountPointResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountPointResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountPointResult) ProtoMessage() {}

func (x *MountPointResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountPointResult.ProtoReflect.Descriptor instead.
func (*MountPointResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{45}
}

func (x *MountPointResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MountPointResult) GetFailReason() string {
	if x != nil {
		return x.FailReason
	}
	return ""
}

type UpdateMountPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountPoint     string       `protobuf:"bytes,1,opt,name=mountPoint,proto3" json:"mountPoint,omitempty"`
	NewMountOption *MountOption `protobuf:"bytes,2,opt,name=newMountOption,proto3" json:"newMountOption,omitempty"`
}

func (x *UpdateMountPointRequest) Reset() {
	*x = UpdateMountPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMountPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMountPointRequest) ProtoMessage() {}

func (x *UpdateMountPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMountPointRequest.ProtoReflect.Descriptor instead.
func (*UpdateMountPointRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateMountPointRequest) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

func (x *UpdateMountPointRequest) GetNewMountOption() *MountOption {
	if x != nil {
		return x.NewMountOption
	}
	return nil
}

type GetAvailableDriveLettersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeCloudDrive bool `protobuf:"varint,1,opt,name=includeCloudDrive,proto3" json:"includeCloudDrive,omitempty"`
}

func (x *GetAvailableDriveLettersRequest) Reset() {
	*x = GetAvailableDriveLettersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableDriveLettersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableDriveLettersRequest) ProtoMessage() {}

func (x *GetAvailableDriveLettersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableDriveLettersRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableDriveLettersRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{47}
}

func (x *GetAvailableDriveLettersRequest) GetIncludeCloudDrive() bool {
	if x != nil {
		return x.IncludeCloudDrive
	}
	return false
}

type GetAvailableDriveLettersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriveLetters []string `protobuf:"bytes,1,rep,name=driveLetters,proto3" json:"driveLetters,omitempty"`
}

func (x *GetAvailableDriveLettersResult) Reset() {
	*x = GetAvailableDriveLettersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableDriveLettersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableDriveLettersResult) ProtoMessage() {}

func (x *GetAvailableDriveLettersResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableDriveLettersResult.ProtoReflect.Descriptor instead.
func (*GetAvailableDriveLettersResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{48}
}

func (x *GetAvailableDriveLettersResult) GetDriveLetters() []string {
	if x != nil {
		return x.DriveLetters
	}
	return nil
}

type HasDriveLettersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasDriveLetters bool `protobuf:"varint,1,opt,name=hasDriveLetters,proto3" json:"hasDriveLetters,omitempty"`
}

func (x *HasDriveLettersResult) Reset() {
	*x = HasDriveLettersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasDriveLettersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasDriveLettersResult) ProtoMessage() {}

func (x *HasDriveLettersResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasDriveLettersResult.ProtoReflect.Descriptor instead.
func (*HasDriveLettersResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{49}
}

func (x *HasDriveLettersResult) GetHasDriveLetters() bool {
	if x != nil {
		return x.HasDriveLetters
	}
	return false
}

type LocalGetSubFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentFolder          string `protobuf:"bytes,1,opt,name=parentFolder,proto3" json:"parentFolder,omitempty"`
	FolderOnly            bool   `protobuf:"varint,2,opt,name=folderOnly,proto3" json:"folderOnly,omitempty"`
	IncludeCloudDrive     bool   `protobuf:"varint,3,opt,name=includeCloudDrive,proto3" json:"includeCloudDrive,omitempty"`
	IncludeAvailableDrive bool   `protobuf:"varint,4,opt,name=includeAvailableDrive,proto3" json:"includeAvailableDrive,omitempty"`
}

func (x *LocalGetSubFilesRequest) Reset() {
	*x = LocalGetSubFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalGetSubFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalGetSubFilesRequest) ProtoMessage() {}

func (x *LocalGetSubFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalGetSubFilesRequest.ProtoReflect.Descriptor instead.
func (*LocalGetSubFilesRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{50}
}

func (x *LocalGetSubFilesRequest) GetParentFolder() string {
	if x != nil {
		return x.ParentFolder
	}
	return ""
}

func (x *LocalGetSubFilesRequest) GetFolderOnly() bool {
	if x != nil {
		return x.FolderOnly
	}
	return false
}

func (x *LocalGetSubFilesRequest) GetIncludeCloudDrive() bool {
	if x != nil {
		return x.IncludeCloudDrive
	}
	return false
}

func (x *LocalGetSubFilesRequest) GetIncludeAvailableDrive() bool {
	if x != nil {
		return x.IncludeAvailableDrive
	}
	return false
}

type LocalGetSubFilesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubFiles []string `protobuf:"bytes,1,rep,name=subFiles,proto3" json:"subFiles,omitempty"`
}

func (x *LocalGetSubFilesResult) Reset() {
	*x = LocalGetSubFilesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalGetSubFilesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalGetSubFilesResult) ProtoMessage() {}

func (x *LocalGetSubFilesResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalGetSubFilesResult.ProtoReflect.Descriptor instead.
func (*LocalGetSubFilesResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{51}
}

func (x *LocalGetSubFilesResult) GetSubFiles() []string {
	if x != nil {
		return x.SubFiles
	}
	return nil
}

type PushMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClouddriveVersion string `protobuf:"bytes,1,opt,name=clouddriveVersion,proto3" json:"clouddriveVersion,omitempty"`
}

func (x *PushMessage) Reset() {
	*x = PushMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMessage) ProtoMessage() {}

func (x *PushMessage) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMessage.ProtoReflect.Descriptor instead.
func (*PushMessage) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{52}
}

func (x *PushMessage) GetClouddriveVersion() string {
	if x != nil {
		return x.ClouddriveVersion
	}
	return ""
}

type GetAllTasksCountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadCount uint32       `protobuf:"varint,1,opt,name=downloadCount,proto3" json:"downloadCount,omitempty"`
	UploadCount   uint32       `protobuf:"varint,2,opt,name=uploadCount,proto3" json:"uploadCount,omitempty"`
	PushMessage   *PushMessage `protobuf:"bytes,3,opt,name=pushMessage,proto3" json:"pushMessage,omitempty"`
	HasUpdate     bool         `protobuf:"varint,4,opt,name=hasUpdate,proto3" json:"hasUpdate,omitempty"`
}

func (x *GetAllTasksCountResult) Reset() {
	*x = GetAllTasksCountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTasksCountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTasksCountResult) ProtoMessage() {}

func (x *GetAllTasksCountResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTasksCountResult.ProtoReflect.Descriptor instead.
func (*GetAllTasksCountResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{53}
}

func (x *GetAllTasksCountResult) GetDownloadCount() uint32 {
	if x != nil {
		return x.DownloadCount
	}
	return 0
}

func (x *GetAllTasksCountResult) GetUploadCount() uint32 {
	if x != nil {
		return x.UploadCount
	}
	return 0
}

func (x *GetAllTasksCountResult) GetPushMessage() *PushMessage {
	if x != nil {
		return x.PushMessage
	}
	return nil
}

func (x *GetAllTasksCountResult) GetHasUpdate() bool {
	if x != nil {
		return x.HasUpdate
	}
	return false
}

type GetDownloadFileCountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileCount uint32 `protobuf:"varint,1,opt,name=fileCount,proto3" json:"fileCount,omitempty"`
}

func (x *GetDownloadFileCountResult) Reset() {
	*x = GetDownloadFileCountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDownloadFileCountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadFileCountResult) ProtoMessage() {}

func (x *GetDownloadFileCountResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadFileCountResult.ProtoReflect.Descriptor instead.
func (*GetDownloadFileCountResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{54}
}

func (x *GetDownloadFileCountResult) GetFileCount() uint32 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

type DownloadFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath            string   `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	FileLength          uint64   `protobuf:"varint,2,opt,name=fileLength,proto3" json:"fileLength,omitempty"`
	TotalBufferUsed     uint64   `protobuf:"varint,3,opt,name=totalBufferUsed,proto3" json:"totalBufferUsed,omitempty"`
	DownloadThreadCount uint32   `protobuf:"varint,4,opt,name=downloadThreadCount,proto3" json:"downloadThreadCount,omitempty"`
	Process             []string `protobuf:"bytes,5,rep,name=process,proto3" json:"process,omitempty"`
	DetailDownloadInfo  string   `protobuf:"bytes,6,opt,name=detailDownloadInfo,proto3" json:"detailDownloadInfo,omitempty"`
}

func (x *DownloadFileInfo) Reset() {
	*x = DownloadFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileInfo) ProtoMessage() {}

func (x *DownloadFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileInfo.ProtoReflect.Descriptor instead.
func (*DownloadFileInfo) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{55}
}

func (x *DownloadFileInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *DownloadFileInfo) GetFileLength() uint64 {
	if x != nil {
		return x.FileLength
	}
	return 0
}

func (x *DownloadFileInfo) GetTotalBufferUsed() uint64 {
	if x != nil {
		return x.TotalBufferUsed
	}
	return 0
}

func (x *DownloadFileInfo) GetDownloadThreadCount() uint32 {
	if x != nil {
		return x.DownloadThreadCount
	}
	return 0
}

func (x *DownloadFileInfo) GetProcess() []string {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *DownloadFileInfo) GetDetailDownloadInfo() string {
	if x != nil {
		return x.DetailDownloadInfo
	}
	return ""
}

type GetDownloadFileListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalBytesPerSecond float64             `protobuf:"fixed64,1,opt,name=globalBytesPerSecond,proto3" json:"globalBytesPerSecond,omitempty"`
	DownloadFiles        []*DownloadFileInfo `protobuf:"bytes,4,rep,name=downloadFiles,proto3" json:"downloadFiles,omitempty"`
}

func (x *GetDownloadFileListResult) Reset() {
	*x = GetDownloadFileListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDownloadFileListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadFileListResult) ProtoMessage() {}

func (x *GetDownloadFileListResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadFileListResult.ProtoReflect.Descriptor instead.
func (*GetDownloadFileListResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{56}
}

func (x *GetDownloadFileListResult) GetGlobalBytesPerSecond() float64 {
	if x != nil {
		return x.GlobalBytesPerSecond
	}
	return 0
}

func (x *GetDownloadFileListResult) GetDownloadFiles() []*DownloadFileInfo {
	if x != nil {
		return x.DownloadFiles
	}
	return nil
}

type GetUploadFileCountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileCount uint32 `protobuf:"varint,1,opt,name=fileCount,proto3" json:"fileCount,omitempty"`
}

func (x *GetUploadFileCountResult) Reset() {
	*x = GetUploadFileCountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadFileCountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadFileCountResult) ProtoMessage() {}

func (x *GetUploadFileCountResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadFileCountResult.ProtoReflect.Descriptor instead.
func (*GetUploadFileCountResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{57}
}

func (x *GetUploadFileCountResult) GetFileCount() uint32 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

type UploadFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DestPath        string `protobuf:"bytes,2,opt,name=destPath,proto3" json:"destPath,omitempty"`
	Size            uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	TransferedBytes uint64 `protobuf:"varint,4,opt,name=transferedBytes,proto3" json:"transferedBytes,omitempty"`
	Status          string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	ErrorMessage    string `protobuf:"bytes,6,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *UploadFileInfo) Reset() {
	*x = UploadFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileInfo) ProtoMessage() {}

func (x *UploadFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileInfo.ProtoReflect.Descriptor instead.
func (*UploadFileInfo) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{58}
}

func (x *UploadFileInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UploadFileInfo) GetDestPath() string {
	if x != nil {
		return x.DestPath
	}
	return ""
}

func (x *UploadFileInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UploadFileInfo) GetTransferedBytes() uint64 {
	if x != nil {
		return x.TransferedBytes
	}
	return 0
}

func (x *UploadFileInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UploadFileInfo) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type GetUploadFileListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetAll       bool   `protobuf:"varint,1,opt,name=getAll,proto3" json:"getAll,omitempty"`
	ItemsPerPage uint32 `protobuf:"varint,2,opt,name=itemsPerPage,proto3" json:"itemsPerPage,omitempty"`
	PageNumber   uint32 `protobuf:"varint,3,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	Filter       string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetUploadFileListRequest) Reset() {
	*x = GetUploadFileListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadFileListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadFileListRequest) ProtoMessage() {}

func (x *GetUploadFileListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadFileListRequest.ProtoReflect.Descriptor instead.
func (*GetUploadFileListRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{59}
}

func (x *GetUploadFileListRequest) GetGetAll() bool {
	if x != nil {
		return x.GetAll
	}
	return false
}

func (x *GetUploadFileListRequest) GetItemsPerPage() uint32 {
	if x != nil {
		return x.ItemsPerPage
	}
	return 0
}

func (x *GetUploadFileListRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetUploadFileListRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type GetUploadFileListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount  uint32            `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	UploadFiles []*UploadFileInfo `protobuf:"bytes,2,rep,name=uploadFiles,proto3" json:"uploadFiles,omitempty"`
}

func (x *GetUploadFileListResult) Reset() {
	*x = GetUploadFileListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadFileListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadFileListResult) ProtoMessage() {}

func (x *GetUploadFileListResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadFileListResult.ProtoReflect.Descriptor instead.
func (*GetUploadFileListResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{60}
}

func (x *GetUploadFileListResult) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetUploadFileListResult) GetUploadFiles() []*UploadFileInfo {
	if x != nil {
		return x.UploadFiles
	}
	return nil
}

type MultpleUploadFileKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *MultpleUploadFileKeyRequest) Reset() {
	*x = MultpleUploadFileKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultpleUploadFileKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultpleUploadFileKeyRequest) ProtoMessage() {}

func (x *MultpleUploadFileKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultpleUploadFileKeyRequest.ProtoReflect.Descriptor instead.
func (*MultpleUploadFileKeyRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{61}
}

func (x *MultpleUploadFileKeyRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type Login115EditthiscookieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditThiscookieString string `protobuf:"bytes,1,opt,name=editThiscookieString,proto3" json:"editThiscookieString,omitempty"`
}

func (x *Login115EditthiscookieRequest) Reset() {
	*x = Login115EditthiscookieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login115EditthiscookieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login115EditthiscookieRequest) ProtoMessage() {}

func (x *Login115EditthiscookieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login115EditthiscookieRequest.ProtoReflect.Descriptor instead.
func (*Login115EditthiscookieRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{62}
}

func (x *Login115EditthiscookieRequest) GetEditThiscookieString() string {
	if x != nil {
		return x.EditThiscookieString
	}
	return ""
}

type Login115QrCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformString *string `protobuf:"bytes,1,opt,name=platformString,proto3,oneof" json:"platformString,omitempty"`
}

func (x *Login115QrCodeRequest) Reset() {
	*x = Login115QrCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login115QrCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login115QrCodeRequest) ProtoMessage() {}

func (x *Login115QrCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login115QrCodeRequest.ProtoReflect.Descriptor instead.
func (*Login115QrCodeRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{63}
}

func (x *Login115QrCodeRequest) GetPlatformString() string {
	if x != nil && x.PlatformString != nil {
		return *x.PlatformString
	}
	return ""
}

type LoginAliyundriveOAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken  string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	ExpiresIn    uint64 `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
}

func (x *LoginAliyundriveOAuthRequest) Reset() {
	*x = LoginAliyundriveOAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginAliyundriveOAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginAliyundriveOAuthRequest) ProtoMessage() {}

func (x *LoginAliyundriveOAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginAliyundriveOAuthRequest.ProtoReflect.Descriptor instead.
func (*LoginAliyundriveOAuthRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{64}
}

func (x *LoginAliyundriveOAuthRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *LoginAliyundriveOAuthRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginAliyundriveOAuthRequest) GetExpiresIn() uint64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

type LoginAliyundriveRefreshtokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	UseOpenAPI   bool   `protobuf:"varint,2,opt,name=useOpenAPI,proto3" json:"useOpenAPI,omitempty"`
}

func (x *LoginAliyundriveRefreshtokenRequest) Reset() {
	*x = LoginAliyundriveRefreshtokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginAliyundriveRefreshtokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginAliyundriveRefreshtokenRequest) ProtoMessage() {}

func (x *LoginAliyundriveRefreshtokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginAliyundriveRefreshtokenRequest.ProtoReflect.Descriptor instead.
func (*LoginAliyundriveRefreshtokenRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{65}
}

func (x *LoginAliyundriveRefreshtokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *LoginAliyundriveRefreshtokenRequest) GetUseOpenAPI() bool {
	if x != nil {
		return x.UseOpenAPI
	}
	return false
}

type LoginAliyundriveQRCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseOpenAPI bool `protobuf:"varint,1,opt,name=useOpenAPI,proto3" json:"useOpenAPI,omitempty"`
}

func (x *LoginAliyundriveQRCodeRequest) Reset() {
	*x = LoginAliyundriveQRCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginAliyundriveQRCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginAliyundriveQRCodeRequest) ProtoMessage() {}

func (x *LoginAliyundriveQRCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginAliyundriveQRCodeRequest.ProtoReflect.Descriptor instead.
func (*LoginAliyundriveQRCodeRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{66}
}

func (x *LoginAliyundriveQRCodeRequest) GetUseOpenAPI() bool {
	if x != nil {
		return x.UseOpenAPI
	}
	return false
}

type LoginBaiduPanOAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken  string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	ExpiresIn    uint64 `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
}

func (x *LoginBaiduPanOAuthRequest) Reset() {
	*x = LoginBaiduPanOAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginBaiduPanOAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginBaiduPanOAuthRequest) ProtoMessage() {}

func (x *LoginBaiduPanOAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginBaiduPanOAuthRequest.ProtoReflect.Descriptor instead.
func (*LoginBaiduPanOAuthRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{67}
}

func (x *LoginBaiduPanOAuthRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *LoginBaiduPanOAuthRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginBaiduPanOAuthRequest) GetExpiresIn() uint64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

type LoginOneDriveOAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken  string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	ExpiresIn    uint64 `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
}

func (x *LoginOneDriveOAuthRequest) Reset() {
	*x = LoginOneDriveOAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginOneDriveOAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginOneDriveOAuthRequest) ProtoMessage() {}

func (x *LoginOneDriveOAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginOneDriveOAuthRequest.ProtoReflect.Descriptor instead.
func (*LoginOneDriveOAuthRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{68}
}

func (x *LoginOneDriveOAuthRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *LoginOneDriveOAuthRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginOneDriveOAuthRequest) GetExpiresIn() uint64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

type LoginGoogleDriveOAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken  string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	ExpiresIn    uint64 `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
}

func (x *LoginGoogleDriveOAuthRequest) Reset() {
	*x = LoginGoogleDriveOAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginGoogleDriveOAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginGoogleDriveOAuthRequest) ProtoMessage() {}

func (x *LoginGoogleDriveOAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginGoogleDriveOAuthRequest.ProtoReflect.Descriptor instead.
func (*LoginGoogleDriveOAuthRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{69}
}

func (x *LoginGoogleDriveOAuthRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *LoginGoogleDriveOAuthRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginGoogleDriveOAuthRequest) GetExpiresIn() uint64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

type LoginGoogleDriveRefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	RefreshToken string `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *LoginGoogleDriveRefreshTokenRequest) Reset() {
	*x = LoginGoogleDriveRefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginGoogleDriveRefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginGoogleDriveRefreshTokenRequest) ProtoMessage() {}

func (x *LoginGoogleDriveRefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginGoogleDriveRefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*LoginGoogleDriveRefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{70}
}

func (x *LoginGoogleDriveRefreshTokenRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *LoginGoogleDriveRefreshTokenRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *LoginGoogleDriveRefreshTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type LoginXunleiOAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessToken  string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	ExpiresIn    uint64 `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
}

func (x *LoginXunleiOAuthRequest) Reset() {
	*x = LoginXunleiOAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginXunleiOAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginXunleiOAuthRequest) ProtoMessage() {}

func (x *LoginXunleiOAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginXunleiOAuthRequest.ProtoReflect.Descriptor instead.
func (*LoginXunleiOAuthRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{71}
}

func (x *LoginXunleiOAuthRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *LoginXunleiOAuthRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginXunleiOAuthRequest) GetExpiresIn() uint64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

type LoginWebDavRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUrl string `protobuf:"bytes,1,opt,name=serverUrl,proto3" json:"serverUrl,omitempty"`
	UserName  string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Password  string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginWebDavRequest) Reset() {
	*x = LoginWebDavRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginWebDavRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWebDavRequest) ProtoMessage() {}

func (x *LoginWebDavRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWebDavRequest.ProtoReflect.Descriptor instead.
func (*LoginWebDavRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{72}
}

func (x *LoginWebDavRequest) GetServerUrl() string {
	if x != nil {
		return x.ServerUrl
	}
	return ""
}

func (x *LoginWebDavRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *LoginWebDavRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type APILoginResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *APILoginResult) Reset() {
	*x = APILoginResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APILoginResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APILoginResult) ProtoMessage() {}

func (x *APILoginResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APILoginResult.ProtoReflect.Descriptor instead.
func (*APILoginResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{73}
}

func (x *APILoginResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *APILoginResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type AddLocalFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalFolderPath string `protobuf:"bytes,1,opt,name=localFolderPath,proto3" json:"localFolderPath,omitempty"`
}

func (x *AddLocalFolderRequest) Reset() {
	*x = AddLocalFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLocalFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLocalFolderRequest) ProtoMessage() {}

func (x *AddLocalFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLocalFolderRequest.ProtoReflect.Descriptor instead.
func (*AddLocalFolderRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{74}
}

func (x *AddLocalFolderRequest) GetLocalFolderPath() string {
	if x != nil {
		return x.LocalFolderPath
	}
	return ""
}

type RemoveCloudAPIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudName       string `protobuf:"bytes,1,opt,name=cloudName,proto3" json:"cloudName,omitempty"`
	UserName        string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	PermanentRemove bool   `protobuf:"varint,3,opt,name=permanentRemove,proto3" json:"permanentRemove,omitempty"`
}

func (x *RemoveCloudAPIRequest) Reset() {
	*x = RemoveCloudAPIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCloudAPIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCloudAPIRequest) ProtoMessage() {}

func (x *RemoveCloudAPIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCloudAPIRequest.ProtoReflect.Descriptor instead.
func (*RemoveCloudAPIRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{75}
}

func (x *RemoveCloudAPIRequest) GetCloudName() string {
	if x != nil {
		return x.CloudName
	}
	return ""
}

func (x *RemoveCloudAPIRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RemoveCloudAPIRequest) GetPermanentRemove() bool {
	if x != nil {
		return x.PermanentRemove
	}
	return false
}

type GetCloudAPIConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudName string `protobuf:"bytes,1,opt,name=cloudName,proto3" json:"cloudName,omitempty"`
	UserName  string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *GetCloudAPIConfigRequest) Reset() {
	*x = GetCloudAPIConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudAPIConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudAPIConfigRequest) ProtoMessage() {}

func (x *GetCloudAPIConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudAPIConfigRequest.ProtoReflect.Descriptor instead.
func (*GetCloudAPIConfigRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{76}
}

func (x *GetCloudAPIConfigRequest) GetCloudName() string {
	if x != nil {
		return x.CloudName
	}
	return ""
}

func (x *GetCloudAPIConfigRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type CloudAPIList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apis []*CloudAPI `protobuf:"bytes,1,rep,name=apis,proto3" json:"apis,omitempty"`
}

func (x *CloudAPIList) Reset() {
	*x = CloudAPIList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAPIList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAPIList) ProtoMessage() {}

func (x *CloudAPIList) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAPIList.ProtoReflect.Descriptor instead.
func (*CloudAPIList) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{77}
}

func (x *CloudAPIList) GetApis() []*CloudAPI {
	if x != nil {
		return x.Apis
	}
	return nil
}

type CloudAPIConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxDownloadThreads  uint32  `protobuf:"varint,1,opt,name=maxDownloadThreads,proto3" json:"maxDownloadThreads,omitempty"`
	MinReadLengthKB     uint64  `protobuf:"varint,2,opt,name=minReadLengthKB,proto3" json:"minReadLengthKB,omitempty"`
	MaxReadLengthKB     uint64  `protobuf:"varint,3,opt,name=maxReadLengthKB,proto3" json:"maxReadLengthKB,omitempty"`
	DefaultReadLengthKB uint64  `protobuf:"varint,4,opt,name=defaultReadLengthKB,proto3" json:"defaultReadLengthKB,omitempty"`
	MaxBufferPoolSizeMB uint64  `protobuf:"varint,5,opt,name=maxBufferPoolSizeMB,proto3" json:"maxBufferPoolSizeMB,omitempty"`
	MaxQueriesPerSecond float64 `protobuf:"fixed64,6,opt,name=maxQueriesPerSecond,proto3" json:"maxQueriesPerSecond,omitempty"`
	ForceIpv4           bool    `protobuf:"varint,7,opt,name=forceIpv4,proto3" json:"forceIpv4,omitempty"`
}

func (x *CloudAPIConfig) Reset() {
	*x = CloudAPIConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudAPIConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudAPIConfig) ProtoMessage() {}

func (x *CloudAPIConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudAPIConfig.ProtoReflect.Descriptor instead.
func (*CloudAPIConfig) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{78}
}

func (x *CloudAPIConfig) GetMaxDownloadThreads() uint32 {
	if x != nil {
		return x.MaxDownloadThreads
	}
	return 0
}

func (x *CloudAPIConfig) GetMinReadLengthKB() uint64 {
	if x != nil {
		return x.MinReadLengthKB
	}
	return 0
}

func (x *CloudAPIConfig) GetMaxReadLengthKB() uint64 {
	if x != nil {
		return x.MaxReadLengthKB
	}
	return 0
}

func (x *CloudAPIConfig) GetDefaultReadLengthKB() uint64 {
	if x != nil {
		return x.DefaultReadLengthKB
	}
	return 0
}

func (x *CloudAPIConfig) GetMaxBufferPoolSizeMB() uint64 {
	if x != nil {
		return x.MaxBufferPoolSizeMB
	}
	return 0
}

func (x *CloudAPIConfig) GetMaxQueriesPerSecond() float64 {
	if x != nil {
		return x.MaxQueriesPerSecond
	}
	return 0
}

func (x *CloudAPIConfig) GetForceIpv4() bool {
	if x != nil {
		return x.ForceIpv4
	}
	return false
}

type SetCloudAPIConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudName string          `protobuf:"bytes,1,opt,name=cloudName,proto3" json:"cloudName,omitempty"`
	UserName  string          `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Config    *CloudAPIConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SetCloudAPIConfigRequest) Reset() {
	*x = SetCloudAPIConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCloudAPIConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCloudAPIConfigRequest) ProtoMessage() {}

func (x *SetCloudAPIConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCloudAPIConfigRequest.ProtoReflect.Descriptor instead.
func (*SetCloudAPIConfigRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{79}
}

func (x *SetCloudAPIConfigRequest) GetCloudName() string {
	if x != nil {
		return x.CloudName
	}
	return ""
}

func (x *SetCloudAPIConfigRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SetCloudAPIConfigRequest) GetConfig() *CloudAPIConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type CommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{80}
}

func (x *CommandRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type CommandResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CommandResult) Reset() {
	*x = CommandResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResult) ProtoMessage() {}

func (x *CommandResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResult.ProtoReflect.Descriptor instead.
func (*CommandResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{81}
}

func (x *CommandResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type StringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringValue) Reset() {
	*x = StringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValue) ProtoMessage() {}

func (x *StringValue) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValue.ProtoReflect.Descriptor instead.
func (*StringValue) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{82}
}

func (x *StringValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type QRCodeScanMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType QRCodeScanMessageType `protobuf:"varint,1,opt,name=messageType,proto3,enum=clouddrive.QRCodeScanMessageType" json:"messageType,omitempty"`
	Message     string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QRCodeScanMessage) Reset() {
	*x = QRCodeScanMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRCodeScanMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRCodeScanMessage) ProtoMessage() {}

func (x *QRCodeScanMessage) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRCodeScanMessage.ProtoReflect.Descriptor instead.
func (*QRCodeScanMessage) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{83}
}

func (x *QRCodeScanMessage) GetMessageType() QRCodeScanMessageType {
	if x != nil {
		return x.MessageType
	}
	return QRCodeScanMessageType_SHOW_IMAGE
}

func (x *QRCodeScanMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringList) Reset() {
	*x = StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringList.ProtoReflect.Descriptor instead.
func (*StringList) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{84}
}

func (x *StringList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type SystemSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0 means never expire, will live forever
	DirCacheTimeToLiveSecs *uint64 `protobuf:"varint,1,opt,name=dirCacheTimeToLiveSecs,proto3,oneof" json:"dirCacheTimeToLiveSecs,omitempty"`
	MaxPreProcessTasks     *uint64 `protobuf:"varint,2,opt,name=maxPreProcessTasks,proto3,oneof" json:"maxPreProcessTasks,omitempty"`
	MaxProcessTasks        *uint64 `protobuf:"varint,3,opt,name=maxProcessTasks,proto3,oneof" json:"maxProcessTasks,omitempty"`
	TempFileLocation       *string `protobuf:"bytes,4,opt,name=tempFileLocation,proto3,oneof" json:"tempFileLocation,omitempty"`
	SyncWithCloud          *bool   `protobuf:"varint,5,opt,name=syncWithCloud,proto3,oneof" json:"syncWithCloud,omitempty"`
	// time in secs to clear download task when no read operation
	ReadDownloaderTimeoutSecs *uint64 `protobuf:"varint,6,opt,name=readDownloaderTimeoutSecs,proto3,oneof" json:"readDownloaderTimeoutSecs,omitempty"`
	// time in secs to wait before upload a local temp file
	UploadDelaySecs         *uint64        `protobuf:"varint,7,opt,name=uploadDelaySecs,proto3,oneof" json:"uploadDelaySecs,omitempty"`
	ProcessBlackList        *StringList    `protobuf:"bytes,8,opt,name=processBlackList,proto3,oneof" json:"processBlackList,omitempty"`
	UploadIgnoredExtensions *StringList    `protobuf:"bytes,9,opt,name=uploadIgnoredExtensions,proto3,oneof" json:"uploadIgnoredExtensions,omitempty"`
	UpdateChannel           *UpdateChannel `protobuf:"varint,10,opt,name=updateChannel,proto3,enum=clouddrive.UpdateChannel,oneof" json:"updateChannel,omitempty"`
}

func (x *SystemSettings) Reset() {
	*x = SystemSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettings) ProtoMessage() {}

func (x *SystemSettings) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettings.ProtoReflect.Descriptor instead.
func (*SystemSettings) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{85}
}

func (x *SystemSettings) GetDirCacheTimeToLiveSecs() uint64 {
	if x != nil && x.DirCacheTimeToLiveSecs != nil {
		return *x.DirCacheTimeToLiveSecs
	}
	return 0
}

func (x *SystemSettings) GetMaxPreProcessTasks() uint64 {
	if x != nil && x.MaxPreProcessTasks != nil {
		return *x.MaxPreProcessTasks
	}
	return 0
}

func (x *SystemSettings) GetMaxProcessTasks() uint64 {
	if x != nil && x.MaxProcessTasks != nil {
		return *x.MaxProcessTasks
	}
	return 0
}

func (x *SystemSettings) GetTempFileLocation() string {
	if x != nil && x.TempFileLocation != nil {
		return *x.TempFileLocation
	}
	return ""
}

func (x *SystemSettings) GetSyncWithCloud() bool {
	if x != nil && x.SyncWithCloud != nil {
		return *x.SyncWithCloud
	}
	return false
}

func (x *SystemSettings) GetReadDownloaderTimeoutSecs() uint64 {
	if x != nil && x.ReadDownloaderTimeoutSecs != nil {
		return *x.ReadDownloaderTimeoutSecs
	}
	return 0
}

func (x *SystemSettings) GetUploadDelaySecs() uint64 {
	if x != nil && x.UploadDelaySecs != nil {
		return *x.UploadDelaySecs
	}
	return 0
}

func (x *SystemSettings) GetProcessBlackList() *StringList {
	if x != nil {
		return x.ProcessBlackList
	}
	return nil
}

func (x *SystemSettings) GetUploadIgnoredExtensions() *StringList {
	if x != nil {
		return x.UploadIgnoredExtensions
	}
	return nil
}

func (x *SystemSettings) GetUpdateChannel() UpdateChannel {
	if x != nil && x.UpdateChannel != nil {
		return *x.UpdateChannel
	}
	return UpdateChannel_Release
}

type SetDirCacheTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// if not present, please delete the value to restore default
	DirCachTimeToLiveSecs *uint64 `protobuf:"varint,2,opt,name=dirCachTimeToLiveSecs,proto3,oneof" json:"dirCachTimeToLiveSecs,omitempty"`
}

func (x *SetDirCacheTimeRequest) Reset() {
	*x = SetDirCacheTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDirCacheTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDirCacheTimeRequest) ProtoMessage() {}

func (x *SetDirCacheTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDirCacheTimeRequest.ProtoReflect.Descriptor instead.
func (*SetDirCacheTimeRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{86}
}

func (x *SetDirCacheTimeRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SetDirCacheTimeRequest) GetDirCachTimeToLiveSecs() uint64 {
	if x != nil && x.DirCachTimeToLiveSecs != nil {
		return *x.DirCachTimeToLiveSecs
	}
	return 0
}

type GetEffectiveDirCacheTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GetEffectiveDirCacheTimeRequest) Reset() {
	*x = GetEffectiveDirCacheTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEffectiveDirCacheTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEffectiveDirCacheTimeRequest) ProtoMessage() {}

func (x *GetEffectiveDirCacheTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEffectiveDirCacheTimeRequest.ProtoReflect.Descriptor instead.
func (*GetEffectiveDirCacheTimeRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{87}
}

func (x *GetEffectiveDirCacheTimeRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type GetOpenFileTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeDir bool `protobuf:"varint,1,opt,name=includeDir,proto3" json:"includeDir,omitempty"`
}

func (x *GetOpenFileTableRequest) Reset() {
	*x = GetOpenFileTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenFileTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenFileTableRequest) ProtoMessage() {}

func (x *GetOpenFileTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenFileTableRequest.ProtoReflect.Descriptor instead.
func (*GetOpenFileTableRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{88}
}

func (x *GetOpenFileTableRequest) GetIncludeDir() bool {
	if x != nil {
		return x.IncludeDir
	}
	return false
}

type GetEffectiveDirCacheTimeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirCacheTimeSecs uint64 `protobuf:"varint,1,opt,name=dirCacheTimeSecs,proto3" json:"dirCacheTimeSecs,omitempty"`
}

func (x *GetEffectiveDirCacheTimeResult) Reset() {
	*x = GetEffectiveDirCacheTimeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEffectiveDirCacheTimeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEffectiveDirCacheTimeResult) ProtoMessage() {}

func (x *GetEffectiveDirCacheTimeResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEffectiveDirCacheTimeResult.ProtoReflect.Descriptor instead.
func (*GetEffectiveDirCacheTimeResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{89}
}

func (x *GetEffectiveDirCacheTimeResult) GetDirCacheTimeSecs() uint64 {
	if x != nil {
		return x.DirCacheTimeSecs
	}
	return 0
}

type UpdateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasUpdate   bool   `protobuf:"varint,1,opt,name=hasUpdate,proto3" json:"hasUpdate,omitempty"`
	NewVersion  string `protobuf:"bytes,2,opt,name=newVersion,proto3" json:"newVersion,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateResult) Reset() {
	*x = UpdateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResult) ProtoMessage() {}

func (x *UpdateResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResult.ProtoReflect.Descriptor instead.
func (*UpdateResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{90}
}

func (x *UpdateResult) GetHasUpdate() bool {
	if x != nil {
		return x.HasUpdate
	}
	return false
}

func (x *UpdateResult) GetNewVersion() string {
	if x != nil {
		return x.NewVersion
	}
	return ""
}

func (x *UpdateResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type OpenFileTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenFileTable      map[uint64]string `protobuf:"bytes,1,rep,name=openFileTable,proto3" json:"openFileTable,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LocalOpenFileCount uint64            `protobuf:"varint,2,opt,name=localOpenFileCount,proto3" json:"localOpenFileCount,omitempty"`
}

func (x *OpenFileTable) Reset() {
	*x = OpenFileTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenFileTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFileTable) ProtoMessage() {}

func (x *OpenFileTable) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFileTable.ProtoReflect.Descriptor instead.
func (*OpenFileTable) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{91}
}

func (x *OpenFileTable) GetOpenFileTable() map[uint64]string {
	if x != nil {
		return x.OpenFileTable
	}
	return nil
}

func (x *OpenFileTable) GetLocalOpenFileCount() uint64 {
	if x != nil {
		return x.LocalOpenFileCount
	}
	return 0
}

type DirCacheItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsertTime           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=insertTime,proto3" json:"insertTime,omitempty"`
	TimeToLiveSecs       uint64                 `protobuf:"varint,2,opt,name=timeToLiveSecs,proto3" json:"timeToLiveSecs,omitempty"`
	ReferencedSubfileLen uint64                 `protobuf:"varint,3,opt,name=referencedSubfileLen,proto3" json:"referencedSubfileLen,omitempty"`
}

func (x *DirCacheItem) Reset() {
	*x = DirCacheItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirCacheItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirCacheItem) ProtoMessage() {}

func (x *DirCacheItem) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirCacheItem.ProtoReflect.Descriptor instead.
func (*DirCacheItem) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{92}
}

func (x *DirCacheItem) GetInsertTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InsertTime
	}
	return nil
}

func (x *DirCacheItem) GetTimeToLiveSecs() uint64 {
	if x != nil {
		return x.TimeToLiveSecs
	}
	return 0
}

func (x *DirCacheItem) GetReferencedSubfileLen() uint64 {
	if x != nil {
		return x.ReferencedSubfileLen
	}
	return 0
}

type DirCacheTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirCacheTable map[string]*DirCacheItem `protobuf:"bytes,1,rep,name=dirCacheTable,proto3" json:"dirCacheTable,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DirCacheTable) Reset() {
	*x = DirCacheTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirCacheTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirCacheTable) ProtoMessage() {}

func (x *DirCacheTable) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirCacheTable.ProtoReflect.Descriptor instead.
func (*DirCacheTable) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{93}
}

func (x *DirCacheTable) GetDirCacheTable() map[string]*DirCacheItem {
	if x != nil {
		return x.DirCacheTable
	}
	return nil
}

type TempFileTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count     uint64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	TempFiles []string `protobuf:"bytes,2,rep,name=tempFiles,proto3" json:"tempFiles,omitempty"`
}

func (x *TempFileTable) Reset() {
	*x = TempFileTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempFileTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempFileTable) ProtoMessage() {}

func (x *TempFileTable) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempFileTable.ProtoReflect.Descriptor instead.
func (*TempFileTable) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{94}
}

func (x *TempFileTable) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TempFileTable) GetTempFiles() []string {
	if x != nil {
		return x.TempFiles
	}
	return nil
}

type ConfirmEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmCode string `protobuf:"bytes,1,opt,name=confirmCode,proto3" json:"confirmCode,omitempty"`
}

func (x *ConfirmEmailRequest) Reset() {
	*x = ConfirmEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmEmailRequest) ProtoMessage() {}

func (x *ConfirmEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmEmailRequest.ProtoReflect.Descriptor instead.
func (*ConfirmEmailRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{95}
}

func (x *ConfirmEmailRequest) GetConfirmCode() string {
	if x != nil {
		return x.ConfirmCode
	}
	return ""
}

type SendResetAccountEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *SendResetAccountEmailRequest) Reset() {
	*x = SendResetAccountEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResetAccountEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResetAccountEmailRequest) ProtoMessage() {}

func (x *SendResetAccountEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResetAccountEmailRequest.ProtoReflect.Descriptor instead.
func (*SendResetAccountEmailRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{96}
}

func (x *SendResetAccountEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ResetAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResetCode   string `protobuf:"bytes,1,opt,name=resetCode,proto3" json:"resetCode,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
}

func (x *ResetAccountRequest) Reset() {
	*x = ResetAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetAccountRequest) ProtoMessage() {}

func (x *ResetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetAccountRequest.ProtoReflect.Descriptor instead.
func (*ResetAccountRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{97}
}

func (x *ResetAccountRequest) GetResetCode() string {
	if x != nil {
		return x.ResetCode
	}
	return ""
}

func (x *ResetAccountRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type CloudDrivePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description         string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Price               float64  `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	Duration            *int64   `protobuf:"varint,5,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	DurationDescription string   `protobuf:"bytes,6,opt,name=durationDescription,proto3" json:"durationDescription,omitempty"`
	IsActive            bool     `protobuf:"varint,7,opt,name=isActive,proto3" json:"isActive,omitempty"`
	FontAwesomeIcon     *string  `protobuf:"bytes,8,opt,name=fontAwesomeIcon,proto3,oneof" json:"fontAwesomeIcon,omitempty"`
	OriginalPrice       *float64 `protobuf:"fixed64,9,opt,name=originalPrice,proto3,oneof" json:"originalPrice,omitempty"`
}

func (x *CloudDrivePlan) Reset() {
	*x = CloudDrivePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudDrivePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudDrivePlan) ProtoMessage() {}

func (x *CloudDrivePlan) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudDrivePlan.ProtoReflect.Descriptor instead.
func (*CloudDrivePlan) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{98}
}

func (x *CloudDrivePlan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudDrivePlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudDrivePlan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CloudDrivePlan) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CloudDrivePlan) GetDuration() int64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CloudDrivePlan) GetDurationDescription() string {
	if x != nil {
		return x.DurationDescription
	}
	return ""
}

func (x *CloudDrivePlan) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CloudDrivePlan) GetFontAwesomeIcon() string {
	if x != nil && x.FontAwesomeIcon != nil {
		return *x.FontAwesomeIcon
	}
	return ""
}

func (x *CloudDrivePlan) GetOriginalPrice() float64 {
	if x != nil && x.OriginalPrice != nil {
		return *x.OriginalPrice
	}
	return 0
}

type GetCloudDrivePlansResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plans []*CloudDrivePlan `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty"`
}

func (x *GetCloudDrivePlansResult) Reset() {
	*x = GetCloudDrivePlansResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudDrivePlansResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudDrivePlansResult) ProtoMessage() {}

func (x *GetCloudDrivePlansResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudDrivePlansResult.ProtoReflect.Descriptor instead.
func (*GetCloudDrivePlansResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{99}
}

func (x *GetCloudDrivePlansResult) GetPlans() []*CloudDrivePlan {
	if x != nil {
		return x.Plans
	}
	return nil
}

type JoinPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId     string  `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	CouponCode *string `protobuf:"bytes,2,opt,name=couponCode,proto3,oneof" json:"couponCode,omitempty"`
}

func (x *JoinPlanRequest) Reset() {
	*x = JoinPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinPlanRequest) ProtoMessage() {}

func (x *JoinPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinPlanRequest.ProtoReflect.Descriptor instead.
func (*JoinPlanRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{100}
}

func (x *JoinPlanRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *JoinPlanRequest) GetCouponCode() string {
	if x != nil && x.CouponCode != nil {
		return *x.CouponCode
	}
	return ""
}

type PaymentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string            `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlanId         string            `protobuf:"bytes,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	PaymentMethods map[string]string `protobuf:"bytes,3,rep,name=paymentMethods,proto3" json:"paymentMethods,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PaymentInfo) Reset() {
	*x = PaymentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentInfo) ProtoMessage() {}

func (x *PaymentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentInfo.ProtoReflect.Descriptor instead.
func (*PaymentInfo) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{101}
}

func (x *PaymentInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PaymentInfo) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *PaymentInfo) GetPaymentMethods() map[string]string {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

type JoinPlanResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Balance         float64                `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`
	PlanName        string                 `protobuf:"bytes,3,opt,name=planName,proto3" json:"planName,omitempty"`
	PlanDescription string                 `protobuf:"bytes,4,opt,name=planDescription,proto3" json:"planDescription,omitempty"`
	ExpireTime      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expireTime,proto3,oneof" json:"expireTime,omitempty"`
	PaymentInfo     *PaymentInfo           `protobuf:"bytes,6,opt,name=paymentInfo,proto3,oneof" json:"paymentInfo,omitempty"`
}

func (x *JoinPlanResult) Reset() {
	*x = JoinPlanResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinPlanResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinPlanResult) ProtoMessage() {}

func (x *JoinPlanResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinPlanResult.ProtoReflect.Descriptor instead.
func (*JoinPlanResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{102}
}

func (x *JoinPlanResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JoinPlanResult) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *JoinPlanResult) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *JoinPlanResult) GetPlanDescription() string {
	if x != nil {
		return x.PlanDescription
	}
	return ""
}

func (x *JoinPlanResult) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *JoinPlanResult) GetPaymentInfo() *PaymentInfo {
	if x != nil {
		return x.PaymentInfo
	}
	return nil
}

type Promotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CloudName string  `protobuf:"bytes,2,opt,name=cloudName,proto3" json:"cloudName,omitempty"`
	Title     string  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	SubTitle  *string `protobuf:"bytes,4,opt,name=subTitle,proto3,oneof" json:"subTitle,omitempty"`
	Rules     string  `protobuf:"bytes,5,opt,name=rules,proto3" json:"rules,omitempty"`
	Notice    *string `protobuf:"bytes,6,opt,name=notice,proto3,oneof" json:"notice,omitempty"`
	Url       string  `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Promotion) Reset() {
	*x = Promotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Promotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Promotion) ProtoMessage() {}

func (x *Promotion) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Promotion.ProtoReflect.Descriptor instead.
func (*Promotion) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{103}
}

func (x *Promotion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Promotion) GetCloudName() string {
	if x != nil {
		return x.CloudName
	}
	return ""
}

func (x *Promotion) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Promotion) GetSubTitle() string {
	if x != nil && x.SubTitle != nil {
		return *x.SubTitle
	}
	return ""
}

func (x *Promotion) GetRules() string {
	if x != nil {
		return x.Rules
	}
	return ""
}

func (x *Promotion) GetNotice() string {
	if x != nil && x.Notice != nil {
		return *x.Notice
	}
	return ""
}

func (x *Promotion) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetPromotionsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Promotions []*Promotion `protobuf:"bytes,1,rep,name=promotions,proto3" json:"promotions,omitempty"`
}

func (x *GetPromotionsResult) Reset() {
	*x = GetPromotionsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPromotionsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPromotionsResult) ProtoMessage() {}

func (x *GetPromotionsResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPromotionsResult.ProtoReflect.Descriptor instead.
func (*GetPromotionsResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{104}
}

func (x *GetPromotionsResult) GetPromotions() []*Promotion {
	if x != nil {
		return x.Promotions
	}
	return nil
}

type OfflineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quota uint32 `protobuf:"varint,1,opt,name=quota,proto3" json:"quota,omitempty"`
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OfflineStatus) Reset() {
	*x = OfflineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineStatus) ProtoMessage() {}

func (x *OfflineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineStatus.ProtoReflect.Descriptor instead.
func (*OfflineStatus) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{105}
}

func (x *OfflineStatus) GetQuota() uint32 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *OfflineStatus) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OfflineFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size        uint64            `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Url         string            `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Status      OfflineFileStatus `protobuf:"varint,4,opt,name=status,proto3,enum=clouddrive.OfflineFileStatus" json:"status,omitempty"`
	InfoHash    string            `protobuf:"bytes,5,opt,name=infoHash,proto3" json:"infoHash,omitempty"`
	FileId      string            `protobuf:"bytes,6,opt,name=fileId,proto3" json:"fileId,omitempty"`
	AddTime     uint64            `protobuf:"varint,7,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	ParentId    string            `protobuf:"bytes,8,opt,name=parentId,proto3" json:"parentId,omitempty"`
	PercendDone float64           `protobuf:"fixed64,9,opt,name=percendDone,proto3" json:"percendDone,omitempty"`
	Peers       uint64            `protobuf:"varint,10,opt,name=peers,proto3" json:"peers,omitempty"`
}

func (x *OfflineFile) Reset() {
	*x = OfflineFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineFile) ProtoMessage() {}

func (x *OfflineFile) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineFile.ProtoReflect.Descriptor instead.
func (*OfflineFile) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{106}
}

func (x *OfflineFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OfflineFile) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OfflineFile) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *OfflineFile) GetStatus() OfflineFileStatus {
	if x != nil {
		return x.Status
	}
	return OfflineFileStatus_OFFLINE_INIT
}

func (x *OfflineFile) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *OfflineFile) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *OfflineFile) GetAddTime() uint64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *OfflineFile) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *OfflineFile) GetPercendDone() float64 {
	if x != nil {
		return x.PercendDone
	}
	return 0
}

func (x *OfflineFile) GetPeers() uint64 {
	if x != nil {
		return x.Peers
	}
	return 0
}

type OfflineFileListAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudName      string `protobuf:"bytes,1,opt,name=cloudName,proto3" json:"cloudName,omitempty"`
	CloudAccountId string `protobuf:"bytes,2,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
	Page           uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *OfflineFileListAllRequest) Reset() {
	*x = OfflineFileListAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineFileListAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineFileListAllRequest) ProtoMessage() {}

func (x *OfflineFileListAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineFileListAllRequest.ProtoReflect.Descriptor instead.
func (*OfflineFileListAllRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{107}
}

func (x *OfflineFileListAllRequest) GetCloudName() string {
	if x != nil {
		return x.CloudName
	}
	return ""
}

func (x *OfflineFileListAllRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *OfflineFileListAllRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type OfflineFileListAllResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo       uint32         `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageRowCount uint32         `protobuf:"varint,2,opt,name=pageRowCount,proto3" json:"pageRowCount,omitempty"`
	PageCount    uint32         `protobuf:"varint,3,opt,name=pageCount,proto3" json:"pageCount,omitempty"`
	TotalCount   uint32         `protobuf:"varint,4,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Status       *OfflineStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	OfflineFiles []*OfflineFile `protobuf:"bytes,6,rep,name=offlineFiles,proto3" json:"offlineFiles,omitempty"`
}

func (x *OfflineFileListAllResult) Reset() {
	*x = OfflineFileListAllResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineFileListAllResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineFileListAllResult) ProtoMessage() {}

func (x *OfflineFileListAllResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineFileListAllResult.ProtoReflect.Descriptor instead.
func (*OfflineFileListAllResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{108}
}

func (x *OfflineFileListAllResult) GetPageNo() uint32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *OfflineFileListAllResult) GetPageRowCount() uint32 {
	if x != nil {
		return x.PageRowCount
	}
	return 0
}

func (x *OfflineFileListAllResult) GetPageCount() uint32 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

func (x *OfflineFileListAllResult) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *OfflineFileListAllResult) GetStatus() *OfflineStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *OfflineFileListAllResult) GetOfflineFiles() []*OfflineFile {
	if x != nil {
		return x.OfflineFiles
	}
	return nil
}

type OfflineFileListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfflineFiles []*OfflineFile `protobuf:"bytes,1,rep,name=offlineFiles,proto3" json:"offlineFiles,omitempty"`
	Status       *OfflineStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *OfflineFileListResult) Reset() {
	*x = OfflineFileListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineFileListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineFileListResult) ProtoMessage() {}

func (x *OfflineFileListResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineFileListResult.ProtoReflect.Descriptor instead.
func (*OfflineFileListResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{109}
}

func (x *OfflineFileListResult) GetOfflineFiles() []*OfflineFile {
	if x != nil {
		return x.OfflineFiles
	}
	return nil
}

func (x *OfflineFileListResult) GetStatus() *OfflineStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type BindCloudAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudName      string `protobuf:"bytes,1,opt,name=cloudName,proto3" json:"cloudName,omitempty"`
	CloudAccountId string `protobuf:"bytes,2,opt,name=cloudAccountId,proto3" json:"cloudAccountId,omitempty"`
}

func (x *BindCloudAccountRequest) Reset() {
	*x = BindCloudAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindCloudAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindCloudAccountRequest) ProtoMessage() {}

func (x *BindCloudAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindCloudAccountRequest.ProtoReflect.Descriptor instead.
func (*BindCloudAccountRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{110}
}

func (x *BindCloudAccountRequest) GetCloudName() string {
	if x != nil {
		return x.CloudName
	}
	return ""
}

func (x *BindCloudAccountRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

type TransferBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToUserName string  `protobuf:"bytes,1,opt,name=toUserName,proto3" json:"toUserName,omitempty"`
	Amount     float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Password   string  `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *TransferBalanceRequest) Reset() {
	*x = TransferBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferBalanceRequest) ProtoMessage() {}

func (x *TransferBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferBalanceRequest.ProtoReflect.Descriptor instead.
func (*TransferBalanceRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{111}
}

func (x *TransferBalanceRequest) GetToUserName() string {
	if x != nil {
		return x.ToUserName
	}
	return ""
}

func (x *TransferBalanceRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransferBalanceRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ChangeUserNameEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewUserName string `protobuf:"bytes,1,opt,name=newUserName,proto3" json:"newUserName,omitempty"`
	NewEmail    string `protobuf:"bytes,2,opt,name=newEmail,proto3" json:"newEmail,omitempty"`
	Password    string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ChangeUserNameEmailRequest) Reset() {
	*x = ChangeUserNameEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeUserNameEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeUserNameEmailRequest) ProtoMessage() {}

func (x *ChangeUserNameEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeUserNameEmailRequest.ProtoReflect.Descriptor instead.
func (*ChangeUserNameEmailRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{112}
}

func (x *ChangeUserNameEmailRequest) GetNewUserName() string {
	if x != nil {
		return x.NewUserName
	}
	return ""
}

func (x *ChangeUserNameEmailRequest) GetNewEmail() string {
	if x != nil {
		return x.NewEmail
	}
	return ""
}

func (x *ChangeUserNameEmailRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type BalanceLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalanceBefore   float64                            `protobuf:"fixed64,1,opt,name=balance_before,json=balanceBefore,proto3" json:"balance_before,omitempty"`
	BalanceAfter    float64                            `protobuf:"fixed64,2,opt,name=balance_after,json=balanceAfter,proto3" json:"balance_after,omitempty"`
	BalanceChange   float64                            `protobuf:"fixed64,3,opt,name=balance_change,json=balanceChange,proto3" json:"balance_change,omitempty"`
	Operation       BalanceLog_BalancceChangeOperation `protobuf:"varint,4,opt,name=operation,proto3,enum=clouddrive.BalanceLog_BalancceChangeOperation" json:"operation,omitempty"`
	OperationSource string                             `protobuf:"bytes,5,opt,name=operation_source,json=operationSource,proto3" json:"operation_source,omitempty"`
	OperationId     string                             `protobuf:"bytes,6,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	OperationTime   *timestamppb.Timestamp             `protobuf:"bytes,7,opt,name=operation_time,json=operationTime,proto3" json:"operation_time,omitempty"`
}

func (x *BalanceLog) Reset() {
	*x = BalanceLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceLog) ProtoMessage() {}

func (x *BalanceLog) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceLog.ProtoReflect.Descriptor instead.
func (*BalanceLog) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{113}
}

func (x *BalanceLog) GetBalanceBefore() float64 {
	if x != nil {
		return x.BalanceBefore
	}
	return 0
}

func (x *BalanceLog) GetBalanceAfter() float64 {
	if x != nil {
		return x.BalanceAfter
	}
	return 0
}

func (x *BalanceLog) GetBalanceChange() float64 {
	if x != nil {
		return x.BalanceChange
	}
	return 0
}

func (x *BalanceLog) GetOperation() BalanceLog_BalancceChangeOperation {
	if x != nil {
		return x.Operation
	}
	return BalanceLog_Unknown
}

func (x *BalanceLog) GetOperationSource() string {
	if x != nil {
		return x.OperationSource
	}
	return ""
}

func (x *BalanceLog) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *BalanceLog) GetOperationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OperationTime
	}
	return nil
}

type BalanceLogResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*BalanceLog `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *BalanceLogResult) Reset() {
	*x = BalanceLogResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceLogResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceLogResult) ProtoMessage() {}

func (x *BalanceLogResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceLogResult.ProtoReflect.Descriptor instead.
func (*BalanceLogResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{114}
}

func (x *BalanceLogResult) GetLogs() []*BalanceLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type CheckFinalPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId     string `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	CouponCode string `protobuf:"bytes,2,opt,name=couponCode,proto3" json:"couponCode,omitempty"`
}

func (x *CheckFinalPriceRequest) Reset() {
	*x = CheckFinalPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFinalPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFinalPriceRequest) ProtoMessage() {}

func (x *CheckFinalPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFinalPriceRequest.ProtoReflect.Descriptor instead.
func (*CheckFinalPriceRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{115}
}

func (x *CheckFinalPriceRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *CheckFinalPriceRequest) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

type CheckFinalPriceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId               string  `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	PlanPrice            float64 `protobuf:"fixed64,2,opt,name=planPrice,proto3" json:"planPrice,omitempty"`
	UserBalance          float64 `protobuf:"fixed64,3,opt,name=userBalance,proto3" json:"userBalance,omitempty"`
	CouponDiscountAmount float64 `protobuf:"fixed64,4,opt,name=couponDiscountAmount,proto3" json:"couponDiscountAmount,omitempty"`
	CouponError          *string `protobuf:"bytes,5,opt,name=couponError,proto3,oneof" json:"couponError,omitempty"`
	FinalPrice           float64 `protobuf:"fixed64,6,opt,name=finalPrice,proto3" json:"finalPrice,omitempty"`
}

func (x *CheckFinalPriceResult) Reset() {
	*x = CheckFinalPriceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFinalPriceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFinalPriceResult) ProtoMessage() {}

func (x *CheckFinalPriceResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFinalPriceResult.ProtoReflect.Descriptor instead.
func (*CheckFinalPriceResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{116}
}

func (x *CheckFinalPriceResult) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *CheckFinalPriceResult) GetPlanPrice() float64 {
	if x != nil {
		return x.PlanPrice
	}
	return 0
}

func (x *CheckFinalPriceResult) GetUserBalance() float64 {
	if x != nil {
		return x.UserBalance
	}
	return 0
}

func (x *CheckFinalPriceResult) GetCouponDiscountAmount() float64 {
	if x != nil {
		return x.CouponDiscountAmount
	}
	return 0
}

func (x *CheckFinalPriceResult) GetCouponError() string {
	if x != nil && x.CouponError != nil {
		return *x.CouponError
	}
	return ""
}

func (x *CheckFinalPriceResult) GetFinalPrice() float64 {
	if x != nil {
		return x.FinalPrice
	}
	return 0
}

type CheckActivationCodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId          string `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	PlanName        string `protobuf:"bytes,2,opt,name=planName,proto3" json:"planName,omitempty"`
	PlanDescription string `protobuf:"bytes,3,opt,name=planDescription,proto3" json:"planDescription,omitempty"`
}

func (x *CheckActivationCodeResult) Reset() {
	*x = CheckActivationCodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckActivationCodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckActivationCodeResult) ProtoMessage() {}

func (x *CheckActivationCodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckActivationCodeResult.ProtoReflect.Descriptor instead.
func (*CheckActivationCodeResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{117}
}

func (x *CheckActivationCodeResult) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *CheckActivationCodeResult) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *CheckActivationCodeResult) GetPlanDescription() string {
	if x != nil {
		return x.PlanDescription
	}
	return ""
}

type CheckCouponCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId     string `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
	CouponCode string `protobuf:"bytes,2,opt,name=couponCode,proto3" json:"couponCode,omitempty"`
}

func (x *CheckCouponCodeRequest) Reset() {
	*x = CheckCouponCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCouponCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCouponCodeRequest) ProtoMessage() {}

func (x *CheckCouponCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCouponCodeRequest.ProtoReflect.Descriptor instead.
func (*CheckCouponCodeRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{118}
}

func (x *CheckCouponCodeRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *CheckCouponCodeRequest) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

type CouponCodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponCode           string  `protobuf:"bytes,1,opt,name=couponCode,proto3" json:"couponCode,omitempty"`
	CouponDescription    string  `protobuf:"bytes,2,opt,name=couponDescription,proto3" json:"couponDescription,omitempty"`
	IsPercentage         bool    `protobuf:"varint,3,opt,name=isPercentage,proto3" json:"isPercentage,omitempty"`
	CouponDiscountAmount float64 `protobuf:"fixed64,4,opt,name=couponDiscountAmount,proto3" json:"couponDiscountAmount,omitempty"`
}

func (x *CouponCodeResult) Reset() {
	*x = CouponCodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponCodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponCodeResult) ProtoMessage() {}

func (x *CouponCodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponCodeResult.ProtoReflect.Descriptor instead.
func (*CouponCodeResult) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{119}
}

func (x *CouponCodeResult) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

func (x *CouponCodeResult) GetCouponDescription() string {
	if x != nil {
		return x.CouponDescription
	}
	return ""
}

func (x *CouponCodeResult) GetIsPercentage() bool {
	if x != nil {
		return x.IsPercentage
	}
	return false
}

func (x *CouponCodeResult) GetCouponDiscountAmount() float64 {
	if x != nil {
		return x.CouponDiscountAmount
	}
	return 0
}

type FileBackupRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rule:
	//	*FileBackupRule_Extensions
	//	*FileBackupRule_FileNames
	//	*FileBackupRule_Regex
	//	*FileBackupRule_MinSize
	Rule          isFileBackupRule_Rule `protobuf_oneof:"rule"`
	IsEnabled     bool                  `protobuf:"varint,100,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`
	IsBlackList   bool                  `protobuf:"varint,101,opt,name=isBlackList,proto3" json:"isBlackList,omitempty"`
	ApplyToFolder bool                  `protobuf:"varint,102,opt,name=applyToFolder,proto3" json:"applyToFolder,omitempty"`
}

func (x *FileBackupRule) Reset() {
	*x = FileBackupRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileBackupRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileBackupRule) ProtoMessage() {}

func (x *FileBackupRule) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileBackupRule.ProtoReflect.Descriptor instead.
func (*FileBackupRule) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{120}
}

func (m *FileBackupRule) GetRule() isFileBackupRule_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (x *FileBackupRule) GetExtensions() string {
	if x, ok := x.GetRule().(*FileBackupRule_Extensions); ok {
		return x.Extensions
	}
	return ""
}

func (x *FileBackupRule) GetFileNames() string {
	if x, ok := x.GetRule().(*FileBackupRule_FileNames); ok {
		return x.FileNames
	}
	return ""
}

func (x *FileBackupRule) GetRegex() string {
	if x, ok := x.GetRule().(*FileBackupRule_Regex); ok {
		return x.Regex
	}
	return ""
}

func (x *FileBackupRule) GetMinSize() uint64 {
	if x, ok := x.GetRule().(*FileBackupRule_MinSize); ok {
		return x.MinSize
	}
	return 0
}

func (x *FileBackupRule) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *FileBackupRule) GetIsBlackList() bool {
	if x != nil {
		return x.IsBlackList
	}
	return false
}

func (x *FileBackupRule) GetApplyToFolder() bool {
	if x != nil {
		return x.ApplyToFolder
	}
	return false
}

type isFileBackupRule_Rule interface {
	isFileBackupRule_Rule()
}

type FileBackupRule_Extensions struct {
	Extensions string `protobuf:"bytes,1,opt,name=extensions,proto3,oneof"`
}

type FileBackupRule_FileNames struct {
	FileNames string `protobuf:"bytes,2,opt,name=fileNames,proto3,oneof"`
}

type FileBackupRule_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof"`
}

type FileBackupRule_MinSize struct {
	MinSize uint64 `protobuf:"varint,4,opt,name=minSize,proto3,oneof"`
}

func (*FileBackupRule_Extensions) isFileBackupRule_Rule() {}

func (*FileBackupRule_FileNames) isFileBackupRule_Rule() {}

func (*FileBackupRule_Regex) isFileBackupRule_Rule() {}

func (*FileBackupRule_MinSize) isFileBackupRule_Rule() {}

type BackupDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationPath string                 `protobuf:"bytes,1,opt,name=destinationPath,proto3" json:"destinationPath,omitempty"`
	IsEnabled       bool                   `protobuf:"varint,2,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`
	LastFinishTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lastFinishTime,proto3,oneof" json:"lastFinishTime,omitempty"`
}

func (x *BackupDestination) Reset() {
	*x = BackupDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupDestination) ProtoMessage() {}

func (x *BackupDestination) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupDestination.ProtoReflect.Descriptor instead.
func (*BackupDestination) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{121}
}

func (x *BackupDestination) GetDestinationPath() string {
	if x != nil {
		return x.DestinationPath
	}
	return ""
}

func (x *BackupDestination) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *BackupDestination) GetLastFinishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastFinishTime
	}
	return nil
}

type DaysOfWeek struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DaysOfWeek []uint32 `protobuf:"varint,1,rep,packed,name=daysOfWeek,proto3" json:"daysOfWeek,omitempty"` //Mon: 1, Tue: 2, ..., Sun: 0
}

func (x *DaysOfWeek) Reset() {
	*x = DaysOfWeek{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaysOfWeek) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaysOfWeek) ProtoMessage() {}

func (x *DaysOfWeek) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaysOfWeek.ProtoReflect.Descriptor instead.
func (*DaysOfWeek) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{122}
}

func (x *DaysOfWeek) GetDaysOfWeek() []uint32 {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

type TimeSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnabled  bool        `protobuf:"varint,1,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`
	Hour       uint32      `protobuf:"varint,2,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute     uint32      `protobuf:"varint,3,opt,name=minute,proto3" json:"minute,omitempty"`
	Second     uint32      `protobuf:"varint,4,opt,name=second,proto3" json:"second,omitempty"`
	DaysOfWeek *DaysOfWeek `protobuf:"bytes,5,opt,name=daysOfWeek,proto3,oneof" json:"daysOfWeek,omitempty"` //none means every day
}

func (x *TimeSchedule) Reset() {
	*x = TimeSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSchedule) ProtoMessage() {}

func (x *TimeSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSchedule.ProtoReflect.Descriptor instead.
func (*TimeSchedule) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{123}
}

func (x *TimeSchedule) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *TimeSchedule) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *TimeSchedule) GetMinute() uint32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *TimeSchedule) GetSecond() uint32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *TimeSchedule) GetDaysOfWeek() *DaysOfWeek {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

type Backup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePath                 string               `protobuf:"bytes,1,opt,name=sourcePath,proto3" json:"sourcePath,omitempty"`
	Destinations               []*BackupDestination `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	FileBackupRules            []*FileBackupRule    `protobuf:"bytes,3,rep,name=fileBackupRules,proto3" json:"fileBackupRules,omitempty"`
	FileReplaceRule            FileReplaceRule      `protobuf:"varint,4,opt,name=fileReplaceRule,proto3,enum=clouddrive.FileReplaceRule" json:"fileReplaceRule,omitempty"`
	FileDeleteRule             FileDeleteRule       `protobuf:"varint,5,opt,name=fileDeleteRule,proto3,enum=clouddrive.FileDeleteRule" json:"fileDeleteRule,omitempty"`
	IsEnabled                  bool                 `protobuf:"varint,6,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`
	FileSystemWatchEnabled     bool                 `protobuf:"varint,7,opt,name=fileSystemWatchEnabled,proto3" json:"fileSystemWatchEnabled,omitempty"`
	WalkingThroughIntervalSecs int64                `protobuf:"varint,8,opt,name=walkingThroughIntervalSecs,proto3" json:"walkingThroughIntervalSecs,omitempty"` // 0 means never auto walking through
	ForceWalkingThroughOnStart bool                 `protobuf:"varint,9,opt,name=forceWalkingThroughOnStart,proto3" json:"forceWalkingThroughOnStart,omitempty"`
	TimeSchedules              []*TimeSchedule      `protobuf:"bytes,10,rep,name=timeSchedules,proto3" json:"timeSchedules,omitempty"`
	IsTimeSchedulesEnabled     bool                 `protobuf:"varint,11,opt,name=isTimeSchedulesEnabled,proto3" json:"isTimeSchedulesEnabled,omitempty"`
}

func (x *Backup) Reset() {
	*x = Backup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup) ProtoMessage() {}

func (x *Backup) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup.ProtoReflect.Descriptor instead.
func (*Backup) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{124}
}

func (x *Backup) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *Backup) GetDestinations() []*BackupDestination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *Backup) GetFileBackupRules() []*FileBackupRule {
	if x != nil {
		return x.FileBackupRules
	}
	return nil
}

func (x *Backup) GetFileReplaceRule() FileReplaceRule {
	if x != nil {
		return x.FileReplaceRule
	}
	return FileReplaceRule_Skip
}

func (x *Backup) GetFileDeleteRule() FileDeleteRule {
	if x != nil {
		return x.FileDeleteRule
	}
	return FileDeleteRule_Delete
}

func (x *Backup) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Backup) GetFileSystemWatchEnabled() bool {
	if x != nil {
		return x.FileSystemWatchEnabled
	}
	return false
}

func (x *Backup) GetWalkingThroughIntervalSecs() int64 {
	if x != nil {
		return x.WalkingThroughIntervalSecs
	}
	return 0
}

func (x *Backup) GetForceWalkingThroughOnStart() bool {
	if x != nil {
		return x.ForceWalkingThroughOnStart
	}
	return false
}

func (x *Backup) GetTimeSchedules() []*TimeSchedule {
	if x != nil {
		return x.TimeSchedules
	}
	return nil
}

func (x *Backup) GetIsTimeSchedulesEnabled() bool {
	if x != nil {
		return x.IsTimeSchedulesEnabled
	}
	return false
}

type BackupStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backup               *Backup                      `protobuf:"bytes,1,opt,name=backup,proto3" json:"backup,omitempty"`
	Status               BackupStatus_Status          `protobuf:"varint,2,opt,name=status,proto3,enum=clouddrive.BackupStatus_Status" json:"status,omitempty"`
	StatusMessage        string                       `protobuf:"bytes,3,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	WatcherStatus        BackupStatus_FileWatchStatus `protobuf:"varint,4,opt,name=watcherStatus,proto3,enum=clouddrive.BackupStatus_FileWatchStatus" json:"watcherStatus,omitempty"`
	WatcherStatusMessage string                       `protobuf:"bytes,5,opt,name=watcherStatusMessage,proto3" json:"watcherStatusMessage,omitempty"`
}

func (x *BackupStatus) Reset() {
	*x = BackupStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupStatus) ProtoMessage() {}

func (x *BackupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupStatus.ProtoReflect.Descriptor instead.
func (*BackupStatus) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{125}
}

func (x *BackupStatus) GetBackup() *Backup {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *BackupStatus) GetStatus() BackupStatus_Status {
	if x != nil {
		return x.Status
	}
	return BackupStatus_Idle
}

func (x *BackupStatus) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *BackupStatus) GetWatcherStatus() BackupStatus_FileWatchStatus {
	if x != nil {
		return x.WatcherStatus
	}
	return BackupStatus_WatcherIdle
}

func (x *BackupStatus) GetWatcherStatusMessage() string {
	if x != nil {
		return x.WatcherStatusMessage
	}
	return ""
}

type BackupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backups []*BackupStatus `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
}

func (x *BackupList) Reset() {
	*x = BackupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupList) ProtoMessage() {}

func (x *BackupList) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupList.ProtoReflect.Descriptor instead.
func (*BackupList) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{126}
}

func (x *BackupList) GetBackups() []*BackupStatus {
	if x != nil {
		return x.Backups
	}
	return nil
}

type BackupModifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePath                 string               `protobuf:"bytes,1,opt,name=sourcePath,proto3" json:"sourcePath,omitempty"`
	Destinations               []*BackupDestination `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	FileBackupRules            []*FileBackupRule    `protobuf:"bytes,3,rep,name=fileBackupRules,proto3" json:"fileBackupRules,omitempty"`
	FileReplaceRule            *FileReplaceRule     `protobuf:"varint,4,opt,name=fileReplaceRule,proto3,enum=clouddrive.FileReplaceRule,oneof" json:"fileReplaceRule,omitempty"`
	FileDeleteRule             *FileDeleteRule      `protobuf:"varint,5,opt,name=fileDeleteRule,proto3,enum=clouddrive.FileDeleteRule,oneof" json:"fileDeleteRule,omitempty"`
	FileSystemWatchEnabled     *bool                `protobuf:"varint,6,opt,name=fileSystemWatchEnabled,proto3,oneof" json:"fileSystemWatchEnabled,omitempty"`
	WalkingThroughIntervalSecs *int64               `protobuf:"varint,7,opt,name=walkingThroughIntervalSecs,proto3,oneof" json:"walkingThroughIntervalSecs,omitempty"`
}

func (x *BackupModifyRequest) Reset() {
	*x = BackupModifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupModifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupModifyRequest) ProtoMessage() {}

func (x *BackupModifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupModifyRequest.ProtoReflect.Descriptor instead.
func (*BackupModifyRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{127}
}

func (x *BackupModifyRequest) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *BackupModifyRequest) GetDestinations() []*BackupDestination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *BackupModifyRequest) GetFileBackupRules() []*FileBackupRule {
	if x != nil {
		return x.FileBackupRules
	}
	return nil
}

func (x *BackupModifyRequest) GetFileReplaceRule() FileReplaceRule {
	if x != nil && x.FileReplaceRule != nil {
		return *x.FileReplaceRule
	}
	return FileReplaceRule_Skip
}

func (x *BackupModifyRequest) GetFileDeleteRule() FileDeleteRule {
	if x != nil && x.FileDeleteRule != nil {
		return *x.FileDeleteRule
	}
	return FileDeleteRule_Delete
}

func (x *BackupModifyRequest) GetFileSystemWatchEnabled() bool {
	if x != nil && x.FileSystemWatchEnabled != nil {
		return *x.FileSystemWatchEnabled
	}
	return false
}

func (x *BackupModifyRequest) GetWalkingThroughIntervalSecs() int64 {
	if x != nil && x.WalkingThroughIntervalSecs != nil {
		return *x.WalkingThroughIntervalSecs
	}
	return 0
}

type BackupSetEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePath string `protobuf:"bytes,1,opt,name=sourcePath,proto3" json:"sourcePath,omitempty"`
	IsEnabled  bool   `protobuf:"varint,2,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`
}

func (x *BackupSetEnabledRequest) Reset() {
	*x = BackupSetEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddrive_CloudDrive_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupSetEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupSetEnabledRequest) ProtoMessage() {}

func (x *BackupSetEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddrive_CloudDrive_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupSetEnabledRequest.ProtoReflect.Descriptor instead.
func (*BackupSetEnabledRequest) Descriptor() ([]byte, []int) {
	return file_clouddrive_CloudDrive_proto_rawDescGZIP(), []int{128}
}

func (x *BackupSetEnabledRequest) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *BackupSetEnabledRequest) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

var File_clouddrive_CloudDrive_proto protoreflect.FileDescriptor

var file_clouddrive_CloudDrive_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2f, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x4a, 0x57, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x21, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x26, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x7d, 0x0a, 0x13, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0x26, 0x0a, 0x0c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x2e, 0x0a, 0x14, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x12, 0x27, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x22, 0x47, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x19,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x4b, 0x0a,
	0x15, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x55, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x4f, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x32, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x51, 0x0a, 0x0f,
	0x4d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x68, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x9c, 0x01, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x35,
	0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x22, 0x4f, 0x0a, 0x11, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x68, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0b,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x80, 0x0c,
	0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x52, 0x08, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50,
	0x49, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x6f,
	0x6f, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x73, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x55, 0x6e, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55,
	0x52, 0x4c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x68, 0x61, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x10, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x63, 0x61, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61,
	0x6e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3b, 0x0a,
	0x16, 0x64, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x16, 0x64, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x12, 0x4a,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x46, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x46, 0x69,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x02, 0x22, 0x3a, 0x0a, 0x08, 0x48, 0x61, 0x73,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x64, 0x35, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x68, 0x61, 0x31, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x69, 0x6b, 0x50, 0x61, 0x6b, 0x53,
	0x68, 0x61, 0x31, 0x10, 0x03, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x64, 0x69, 0x72, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x73,
	0x22, 0x67, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x66, 0x72, 0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x72, 0x0a, 0x08, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x50, 0x49, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xa2, 0x01,
	0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x51, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x61, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x61, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x46,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x14,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x79, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x22, 0x4d,
	0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x41, 0x0a,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x53,
	0x22, 0x5b, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xf9, 0x01,
	0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x6e, 0x74, 0x41,
	0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x66, 0x6f, 0x6e, 0x74, 0x41, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x0b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0b,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50,
	0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcd, 0x01, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x42, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x42, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x68, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66,
	0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xff, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x69, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x67, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x0a, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x69, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x11, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x10, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x22, 0x44, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x22, 0x41, 0x0a, 0x15,
	0x48, 0x61, 0x73, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x68, 0x61, 0x73, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x22,
	0xc1, 0x01, 0x0a, 0x17, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x22, 0x34, 0x0a, 0x16, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x0b, 0x50, 0x75, 0x73,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x75, 0x73,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x3a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf4,
	0x01, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x8e, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x77, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x4d, 0x75,
	0x6c, 0x74, 0x70, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x53, 0x0a,
	0x1d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x31, 0x31, 0x35, 0x45, 0x64, 0x69, 0x74, 0x74, 0x68, 0x69,
	0x73, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x65, 0x64, 0x69, 0x74, 0x54, 0x68, 0x69, 0x73, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x64,
	0x69, 0x74, 0x54, 0x68, 0x69, 0x73, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0x57, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x31, 0x31, 0x35, 0x51, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x1c,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x49, 0x6e, 0x22, 0x69, 0x0a, 0x23, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x79,
	0x75, 0x6e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x22, 0x3f,
	0x0a, 0x1d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x22,
	0x82, 0x01, 0x0a, 0x19, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x50, 0x61,
	0x6e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x49, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x6e,
	0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x1c, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49,
	0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x23, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x80, 0x01, 0x0a, 0x17, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x58, 0x75, 0x6e, 0x6c, 0x65, 0x69,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x49, 0x6e, 0x22, 0x6a, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x62, 0x44,
	0x61, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x4e, 0x0a, 0x0e, 0x41, 0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x41, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x7b, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22,
	0x54, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50,
	0x49, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x70, 0x69, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73, 0x22,
	0xc8, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x4b, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4b, 0x42, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4b, 0x42, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x4b, 0x42, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4b, 0x42, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4b, 0x42, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61,
	0x78, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x70, 0x76, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x70, 0x76, 0x34, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2a, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x22, 0x27, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x72, 0x0a, 0x11, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x24, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc7, 0x06, 0x0a, 0x0e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x16,
	0x64, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x16,
	0x64, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x50, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x74, 0x65, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x72, 0x65, 0x61,
	0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x19,
	0x72, 0x65, 0x61, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x07, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x17, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x08, 0x52,
	0x17, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x09, 0x52,
	0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x64, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x73, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x1c,
	0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x73,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x44, 0x69, 0x72, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x39, 0x0a, 0x15, 0x64, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x15, 0x64, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x64, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x73, 0x22, 0x35, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x39,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x44, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x69, 0x72, 0x22, 0x4c, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x64,
	0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x73, 0x22, 0x6e, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x6f, 0x70, 0x65,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x40, 0x0a,
	0x12, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xa6, 0x01, 0x0a, 0x0c, 0x44, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x53, 0x65, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x53, 0x75, 0x62, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x75,
	0x62, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x72,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x64, 0x69,
	0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x44,
	0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x72,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x64, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x5a,
	0x0a, 0x12, 0x44, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x0d, 0x54, 0x65,
	0x6d, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0x37, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x1c, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x55,
	0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xe8, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x0f, 0x66, 0x6f, 0x6e, 0x74, 0x41, 0x77, 0x65, 0x73, 0x6f,
	0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f,
	0x66, 0x6f, 0x6e, 0x74, 0x41, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0d, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66,
	0x6f, 0x6e, 0x74, 0x41, 0x77, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x05,
	0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x5d,
	0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd7, 0x01,
	0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x53, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x02, 0x0a, 0x0e, 0x4a, 0x6f, 0x69, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcd, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x3b, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xa1, 0x02, 0x0a, 0x0b, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x64, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x64, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x22, 0x75, 0x0a, 0x19, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x18, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5f, 0x0a, 0x17, 0x42,
	0x69, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x16,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x76, 0x0a, 0x1a, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x9f, 0x03, 0x0a, 0x0a, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f,
	0x67, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x17, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x10, 0x02, 0x22, 0x3e, 0x0a, 0x10, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0b,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x79, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50,
	0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xb8, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x0e,
	0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1e, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x47, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x0a,
	0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61,
	0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3b, 0x0a,
	0x0a, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x44,
	0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x79,
	0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x22, 0x8a, 0x05, 0x0a, 0x06, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x1a, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1a, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x73, 0x12, 0x3e,
	0x0a, 0x1a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3e,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x16, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb7, 0x03, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x61,
	0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x22, 0x57, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03,
	0x22, 0x40, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x73, 0x22, 0xb6, 0x04, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x47, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x16, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x1a, 0x77, 0x61, 0x6c,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x1d, 0x0a, 0x1b,
	0x5f, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x73, 0x22, 0x57, 0x0a, 0x17, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x2a, 0x68, 0x0a, 0x15, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x26,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x65, 0x74, 0x61, 0x10, 0x01, 0x2a, 0x7c, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x4f,
	0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x04, 0x2a, 0x42, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6b, 0x69, 0x70, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x4b, 0x65, 0x65, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x65, 0x70, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x03, 0x32, 0x8a, 0x4a, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x72, 0x76, 0x12, 0x4b, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x2e, 0x4a, 0x57, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x10, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x62, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0e, 0x46, 0x69, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x12, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6c, 0x6c, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x15, 0x43, 0x61,
	0x6e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x05, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x07, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x48, 0x61, 0x73, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x48,
	0x61, 0x73, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x70, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x50, 0x61, 0x75, 0x73, 0x65, 0x41, 0x6c,
	0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x10, 0x50, 0x61, 0x75, 0x73, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x70, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x41,
	0x6c, 0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x70, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x41, 0x64,
	0x64, 0x4d, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x19, 0x41, 0x50, 0x49,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x31, 0x31, 0x35, 0x45, 0x64, 0x69, 0x74, 0x74, 0x68, 0x69, 0x73,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x31, 0x31, 0x35, 0x45, 0x64, 0x69, 0x74,
	0x74, 0x68, 0x69, 0x73, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x41,
	0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x31, 0x31, 0x35, 0x51, 0x52,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x31, 0x31, 0x35, 0x51, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x18, 0x41, 0x50,
	0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x50,
	0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x70,
	0x0a, 0x1f, 0x41, 0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x79, 0x75, 0x6e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x41, 0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x69, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x79,
	0x75, 0x6e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x41, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x51, 0x52, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x15, 0x41,
	0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x50, 0x61, 0x6e, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x69, 0x64, 0x75, 0x50, 0x61, 0x6e, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x15, 0x41, 0x50, 0x49,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x6e, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x18, 0x41, 0x70, 0x69, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x1f, 0x41,
	0x70, 0x69, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x50, 0x49,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x13, 0x41, 0x70, 0x69, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x58, 0x75, 0x6e, 0x6c, 0x65, 0x69, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x58, 0x75, 0x6e, 0x6c, 0x65, 0x69, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x31, 0x38, 0x39, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0e, 0x41, 0x50, 0x49, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x50, 0x69, 0x6b, 0x50, 0x61, 0x6b, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x41, 0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x57, 0x65, 0x62, 0x44, 0x61, 0x76, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x62, 0x44, 0x61, 0x76,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x41, 0x64, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x12, 0x21, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x50, 0x49, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x50, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x50,
	0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x44, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x54,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x44, 0x69,
	0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x31, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x09, 0x48, 0x61, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x6f, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x28, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x42, 0x69,
	0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x12, 0x12, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x17, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x1f, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x16, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x1b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x4d, 0x6f,
	0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x42, 0x2e, 0x5a, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x72, 0x69, 0x76, 0x65, 0xaa, 0x02, 0x14,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x72, 0x69, 0x76, 0x65, 0x53, 0x72, 0x76, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clouddrive_CloudDrive_proto_rawDescOnce sync.Once
	file_clouddrive_CloudDrive_proto_rawDescData = file_clouddrive_CloudDrive_proto_rawDesc
)

func file_clouddrive_CloudDrive_proto_rawDescGZIP() []byte {
	file_clouddrive_CloudDrive_proto_rawDescOnce.Do(func() {
		file_clouddrive_CloudDrive_proto_rawDescData = protoimpl.X.CompressGZIP(file_clouddrive_CloudDrive_proto_rawDescData)
	})
	return file_clouddrive_CloudDrive_proto_rawDescData
}

var file_clouddrive_CloudDrive_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_clouddrive_CloudDrive_proto_msgTypes = make([]protoimpl.MessageInfo, 134)
var file_clouddrive_CloudDrive_proto_goTypes = []interface{}{
	(QRCodeScanMessageType)(0),                  // 0: clouddrive.QRCodeScanMessageType
	(UpdateChannel)(0),                          // 1: clouddrive.UpdateChannel
	(OfflineFileStatus)(0),                      // 2: clouddrive.OfflineFileStatus
	(FileReplaceRule)(0),                        // 3: clouddrive.FileReplaceRule
	(FileDeleteRule)(0),                         // 4: clouddrive.FileDeleteRule
	(CloudDriveFile_FileType)(0),                // 5: clouddrive.CloudDriveFile.FileType
	(CloudDriveFile_HashType)(0),                // 6: clouddrive.CloudDriveFile.HashType
	(BalanceLog_BalancceChangeOperation)(0),     // 7: clouddrive.BalanceLog.BalancceChangeOperation
	(BackupStatus_Status)(0),                    // 8: clouddrive.BackupStatus.Status
	(BackupStatus_FileWatchStatus)(0),           // 9: clouddrive.BackupStatus.FileWatchStatus
	(*GetTokenRequest)(nil),                     // 10: clouddrive.GetTokenRequest
	(*JWTToken)(nil),                            // 11: clouddrive.JWTToken
	(*FileRequest)(nil),                         // 12: clouddrive.FileRequest
	(*MultiFileRequest)(nil),                    // 13: clouddrive.MultiFileRequest
	(*FileOperationResult)(nil),                 // 14: clouddrive.FileOperationResult
	(*StringResult)(nil),                        // 15: clouddrive.StringResult
	(*UnmountArchiveResult)(nil),                // 16: clouddrive.UnmountArchiveResult
	(*ListSubFileRequest)(nil),                  // 17: clouddrive.ListSubFileRequest
	(*SearchRequest)(nil),                       // 18: clouddrive.SearchRequest
	(*AddOfflineFileRequest)(nil),               // 19: clouddrive.AddOfflineFileRequest
	(*RemoveOfflineFilesRequest)(nil),           // 20: clouddrive.RemoveOfflineFilesRequest
	(*AddSharedLinkRequest)(nil),                // 21: clouddrive.AddSharedLinkRequest
	(*SubFilesReply)(nil),                       // 22: clouddrive.SubFilesReply
	(*FindFileByPathRequest)(nil),               // 23: clouddrive.FindFileByPathRequest
	(*CreateFolderRequest)(nil),                 // 24: clouddrive.CreateFolderRequest
	(*CreateFolderResult)(nil),                  // 25: clouddrive.CreateFolderResult
	(*CreateFileRequest)(nil),                   // 26: clouddrive.CreateFileRequest
	(*CreateFileResult)(nil),                    // 27: clouddrive.CreateFileResult
	(*CloseFileRequest)(nil),                    // 28: clouddrive.CloseFileRequest
	(*MoveFileRequest)(nil),                     // 29: clouddrive.MoveFileRequest
	(*WriteFileRequest)(nil),                    // 30: clouddrive.WriteFileRequest
	(*WriteFileResult)(nil),                     // 31: clouddrive.WriteFileResult
	(*RenameFileRequest)(nil),                   // 32: clouddrive.RenameFileRequest
	(*RenameFilesRequest)(nil),                  // 33: clouddrive.RenameFilesRequest
	(*CloudDriveFile)(nil),                      // 34: clouddrive.CloudDriveFile
	(*SpaceInfo)(nil),                           // 35: clouddrive.SpaceInfo
	(*CloudAPI)(nil),                            // 36: clouddrive.CloudAPI
	(*CloudMembership)(nil),                     // 37: clouddrive.CloudMembership
	(*CloudMemberships)(nil),                    // 38: clouddrive.CloudMemberships
	(*FileDetailProperties)(nil),                // 39: clouddrive.FileDetailProperties
	(*FileMetaData)(nil),                        // 40: clouddrive.FileMetaData
	(*CloudDriveSystemInfo)(nil),                // 41: clouddrive.CloudDriveSystemInfo
	(*UserLoginRequest)(nil),                    // 42: clouddrive.UserLoginRequest
	(*UserRegisterRequest)(nil),                 // 43: clouddrive.UserRegisterRequest
	(*UserLogoutRequest)(nil),                   // 44: clouddrive.UserLogoutRequest
	(*ChangePasswordRequest)(nil),               // 45: clouddrive.ChangePasswordRequest
	(*AccountStatusResult)(nil),                 // 46: clouddrive.AccountStatusResult
	(*AccountPlan)(nil),                         // 47: clouddrive.AccountPlan
	(*AccountRole)(nil),                         // 48: clouddrive.AccountRole
	(*RuntimeInfo)(nil),                         // 49: clouddrive.RuntimeInfo
	(*RunInfo)(nil),                             // 50: clouddrive.RunInfo
	(*MountOption)(nil),                         // 51: clouddrive.MountOption
	(*MountPoint)(nil),                          // 52: clouddrive.MountPoint
	(*MountPointRequest)(nil),                   // 53: clouddrive.MountPointRequest
	(*GetMountPointsResult)(nil),                // 54: clouddrive.GetMountPointsResult
	(*MountPointResult)(nil),                    // 55: clouddrive.MountPointResult
	(*UpdateMountPointRequest)(nil),             // 56: clouddrive.UpdateMountPointRequest
	(*GetAvailableDriveLettersRequest)(nil),     // 57: clouddrive.GetAvailableDriveLettersRequest
	(*GetAvailableDriveLettersResult)(nil),      // 58: clouddrive.GetAvailableDriveLettersResult
	(*HasDriveLettersResult)(nil),               // 59: clouddrive.HasDriveLettersResult
	(*LocalGetSubFilesRequest)(nil),             // 60: clouddrive.LocalGetSubFilesRequest
	(*LocalGetSubFilesResult)(nil),              // 61: clouddrive.LocalGetSubFilesResult
	(*PushMessage)(nil),                         // 62: clouddrive.PushMessage
	(*GetAllTasksCountResult)(nil),              // 63: clouddrive.GetAllTasksCountResult
	(*GetDownloadFileCountResult)(nil),          // 64: clouddrive.GetDownloadFileCountResult
	(*DownloadFileInfo)(nil),                    // 65: clouddrive.DownloadFileInfo
	(*GetDownloadFileListResult)(nil),           // 66: clouddrive.GetDownloadFileListResult
	(*GetUploadFileCountResult)(nil),            // 67: clouddrive.GetUploadFileCountResult
	(*UploadFileInfo)(nil),                      // 68: clouddrive.UploadFileInfo
	(*GetUploadFileListRequest)(nil),            // 69: clouddrive.GetUploadFileListRequest
	(*GetUploadFileListResult)(nil),             // 70: clouddrive.GetUploadFileListResult
	(*MultpleUploadFileKeyRequest)(nil),         // 71: clouddrive.MultpleUploadFileKeyRequest
	(*Login115EditthiscookieRequest)(nil),       // 72: clouddrive.Login115EditthiscookieRequest
	(*Login115QrCodeRequest)(nil),               // 73: clouddrive.Login115QrCodeRequest
	(*LoginAliyundriveOAuthRequest)(nil),        // 74: clouddrive.LoginAliyundriveOAuthRequest
	(*LoginAliyundriveRefreshtokenRequest)(nil), // 75: clouddrive.LoginAliyundriveRefreshtokenRequest
	(*LoginAliyundriveQRCodeRequest)(nil),       // 76: clouddrive.LoginAliyundriveQRCodeRequest
	(*LoginBaiduPanOAuthRequest)(nil),           // 77: clouddrive.LoginBaiduPanOAuthRequest
	(*LoginOneDriveOAuthRequest)(nil),           // 78: clouddrive.LoginOneDriveOAuthRequest
	(*LoginGoogleDriveOAuthRequest)(nil),        // 79: clouddrive.LoginGoogleDriveOAuthRequest
	(*LoginGoogleDriveRefreshTokenRequest)(nil), // 80: clouddrive.LoginGoogleDriveRefreshTokenRequest
	(*LoginXunleiOAuthRequest)(nil),             // 81: clouddrive.LoginXunleiOAuthRequest
	(*LoginWebDavRequest)(nil),                  // 82: clouddrive.LoginWebDavRequest
	(*APILoginResult)(nil),                      // 83: clouddrive.APILoginResult
	(*AddLocalFolderRequest)(nil),               // 84: clouddrive.AddLocalFolderRequest
	(*RemoveCloudAPIRequest)(nil),               // 85: clouddrive.RemoveCloudAPIRequest
	(*GetCloudAPIConfigRequest)(nil),            // 86: clouddrive.GetCloudAPIConfigRequest
	(*CloudAPIList)(nil),                        // 87: clouddrive.CloudAPIList
	(*CloudAPIConfig)(nil),                      // 88: clouddrive.CloudAPIConfig
	(*SetCloudAPIConfigRequest)(nil),            // 89: clouddrive.SetCloudAPIConfigRequest
	(*CommandRequest)(nil),                      // 90: clouddrive.CommandRequest
	(*CommandResult)(nil),                       // 91: clouddrive.CommandResult
	(*StringValue)(nil),                         // 92: clouddrive.StringValue
	(*QRCodeScanMessage)(nil),                   // 93: clouddrive.QRCodeScanMessage
	(*StringList)(nil),                          // 94: clouddrive.StringList
	(*SystemSettings)(nil),                      // 95: clouddrive.SystemSettings
	(*SetDirCacheTimeRequest)(nil),              // 96: clouddrive.SetDirCacheTimeRequest
	(*GetEffectiveDirCacheTimeRequest)(nil),     // 97: clouddrive.GetEffectiveDirCacheTimeRequest
	(*GetOpenFileTableRequest)(nil),             // 98: clouddrive.GetOpenFileTableRequest
	(*GetEffectiveDirCacheTimeResult)(nil),      // 99: clouddrive.GetEffectiveDirCacheTimeResult
	(*UpdateResult)(nil),                        // 100: clouddrive.UpdateResult
	(*OpenFileTable)(nil),                       // 101: clouddrive.OpenFileTable
	(*DirCacheItem)(nil),                        // 102: clouddrive.DirCacheItem
	(*DirCacheTable)(nil),                       // 103: clouddrive.DirCacheTable
	(*TempFileTable)(nil),                       // 104: clouddrive.TempFileTable
	(*ConfirmEmailRequest)(nil),                 // 105: clouddrive.ConfirmEmailRequest
	(*SendResetAccountEmailRequest)(nil),        // 106: clouddrive.SendResetAccountEmailRequest
	(*ResetAccountRequest)(nil),                 // 107: clouddrive.ResetAccountRequest
	(*CloudDrivePlan)(nil),                      // 108: clouddrive.CloudDrivePlan
	(*GetCloudDrivePlansResult)(nil),            // 109: clouddrive.GetCloudDrivePlansResult
	(*JoinPlanRequest)(nil),                     // 110: clouddrive.JoinPlanRequest
	(*PaymentInfo)(nil),                         // 111: clouddrive.PaymentInfo
	(*JoinPlanResult)(nil),                      // 112: clouddrive.JoinPlanResult
	(*Promotion)(nil),                           // 113: clouddrive.Promotion
	(*GetPromotionsResult)(nil),                 // 114: clouddrive.GetPromotionsResult
	(*OfflineStatus)(nil),                       // 115: clouddrive.OfflineStatus
	(*OfflineFile)(nil),                         // 116: clouddrive.OfflineFile
	(*OfflineFileListAllRequest)(nil),           // 117: clouddrive.OfflineFileListAllRequest
	(*OfflineFileListAllResult)(nil),            // 118: clouddrive.OfflineFileListAllResult
	(*OfflineFileListResult)(nil),               // 119: clouddrive.OfflineFileListResult
	(*BindCloudAccountRequest)(nil),             // 120: clouddrive.BindCloudAccountRequest
	(*TransferBalanceRequest)(nil),              // 121: clouddrive.TransferBalanceRequest
	(*ChangeUserNameEmailRequest)(nil),          // 122: clouddrive.ChangeUserNameEmailRequest
	(*BalanceLog)(nil),                          // 123: clouddrive.BalanceLog
	(*BalanceLogResult)(nil),                    // 124: clouddrive.BalanceLogResult
	(*CheckFinalPriceRequest)(nil),              // 125: clouddrive.CheckFinalPriceRequest
	(*CheckFinalPriceResult)(nil),               // 126: clouddrive.CheckFinalPriceResult
	(*CheckActivationCodeResult)(nil),           // 127: clouddrive.CheckActivationCodeResult
	(*CheckCouponCodeRequest)(nil),              // 128: clouddrive.CheckCouponCodeRequest
	(*CouponCodeResult)(nil),                    // 129: clouddrive.CouponCodeResult
	(*FileBackupRule)(nil),                      // 130: clouddrive.FileBackupRule
	(*BackupDestination)(nil),                   // 131: clouddrive.BackupDestination
	(*DaysOfWeek)(nil),                          // 132: clouddrive.DaysOfWeek
	(*TimeSchedule)(nil),                        // 133: clouddrive.TimeSchedule
	(*Backup)(nil),                              // 134: clouddrive.Backup
	(*BackupStatus)(nil),                        // 135: clouddrive.BackupStatus
	(*BackupList)(nil),                          // 136: clouddrive.BackupList
	(*BackupModifyRequest)(nil),                 // 137: clouddrive.BackupModifyRequest
	(*BackupSetEnabledRequest)(nil),             // 138: clouddrive.BackupSetEnabledRequest
	nil,                                         // 139: clouddrive.CloudDriveFile.FileHashesEntry
	nil,                                         // 140: clouddrive.FileMetaData.MetadataEntry
	nil,                                         // 141: clouddrive.OpenFileTable.OpenFileTableEntry
	nil,                                         // 142: clouddrive.DirCacheTable.DirCacheTableEntry
	nil,                                         // 143: clouddrive.PaymentInfo.PaymentMethodsEntry
	(*timestamppb.Timestamp)(nil),               // 144: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                       // 145: google.protobuf.Empty
}
var file_clouddrive_CloudDrive_proto_depIdxs = []int32{
	144, // 0: clouddrive.JWTToken.expiration:type_name -> google.protobuf.Timestamp
	34,  // 1: clouddrive.SubFilesReply.subFiles:type_name -> clouddrive.CloudDriveFile
	34,  // 2: clouddrive.CreateFolderResult.folderCreated:type_name -> clouddrive.CloudDriveFile
	14,  // 3: clouddrive.CreateFolderResult.result:type_name -> clouddrive.FileOperationResult
	32,  // 4: clouddrive.RenameFilesRequest.renameFiles:type_name -> clouddrive.RenameFileRequest
	5,   // 5: clouddrive.CloudDriveFile.fileType:type_name -> clouddrive.CloudDriveFile.FileType
	144, // 6: clouddrive.CloudDriveFile.createTime:type_name -> google.protobuf.Timestamp
	144, // 7: clouddrive.CloudDriveFile.writeTime:type_name -> google.protobuf.Timestamp
	144, // 8: clouddrive.CloudDriveFile.accessTime:type_name -> google.protobuf.Timestamp
	36,  // 9: clouddrive.CloudDriveFile.CloudAPI:type_name -> clouddrive.CloudAPI
	39,  // 10: clouddrive.CloudDriveFile.detailProperties:type_name -> clouddrive.FileDetailProperties
	139, // 11: clouddrive.CloudDriveFile.fileHashes:type_name -> clouddrive.CloudDriveFile.FileHashesEntry
	144, // 12: clouddrive.CloudMembership.expireTime:type_name -> google.protobuf.Timestamp
	37,  // 13: clouddrive.CloudMemberships.memberships:type_name -> clouddrive.CloudMembership
	140, // 14: clouddrive.FileMetaData.metadata:type_name -> clouddrive.FileMetaData.MetadataEntry
	47,  // 15: clouddrive.AccountStatusResult.accountPlan:type_name -> clouddrive.AccountPlan
	48,  // 16: clouddrive.AccountStatusResult.accountRoles:type_name -> clouddrive.AccountRole
	144, // 17: clouddrive.AccountPlan.endTime:type_name -> google.protobuf.Timestamp
	52,  // 18: clouddrive.GetMountPointsResult.mountPoints:type_name -> clouddrive.MountPoint
	51,  // 19: clouddrive.UpdateMountPointRequest.newMountOption:type_name -> clouddrive.MountOption
	62,  // 20: clouddrive.GetAllTasksCountResult.pushMessage:type_name -> clouddrive.PushMessage
	65,  // 21: clouddrive.GetDownloadFileListResult.downloadFiles:type_name -> clouddrive.DownloadFileInfo
	68,  // 22: clouddrive.GetUploadFileListResult.uploadFiles:type_name -> clouddrive.UploadFileInfo
	36,  // 23: clouddrive.CloudAPIList.apis:type_name -> clouddrive.CloudAPI
	88,  // 24: clouddrive.SetCloudAPIConfigRequest.config:type_name -> clouddrive.CloudAPIConfig
	0,   // 25: clouddrive.QRCodeScanMessage.messageType:type_name -> clouddrive.QRCodeScanMessageType
	94,  // 26: clouddrive.SystemSettings.processBlackList:type_name -> clouddrive.StringList
	94,  // 27: clouddrive.SystemSettings.uploadIgnoredExtensions:type_name -> clouddrive.StringList
	1,   // 28: clouddrive.SystemSettings.updateChannel:type_name -> clouddrive.UpdateChannel
	141, // 29: clouddrive.OpenFileTable.openFileTable:type_name -> clouddrive.OpenFileTable.OpenFileTableEntry
	144, // 30: clouddrive.DirCacheItem.insertTime:type_name -> google.protobuf.Timestamp
	142, // 31: clouddrive.DirCacheTable.dirCacheTable:type_name -> clouddrive.DirCacheTable.DirCacheTableEntry
	108, // 32: clouddrive.GetCloudDrivePlansResult.plans:type_name -> clouddrive.CloudDrivePlan
	143, // 33: clouddrive.PaymentInfo.paymentMethods:type_name -> clouddrive.PaymentInfo.PaymentMethodsEntry
	144, // 34: clouddrive.JoinPlanResult.expireTime:type_name -> google.protobuf.Timestamp
	111, // 35: clouddrive.JoinPlanResult.paymentInfo:type_name -> clouddrive.PaymentInfo
	113, // 36: clouddrive.GetPromotionsResult.promotions:type_name -> clouddrive.Promotion
	2,   // 37: clouddrive.OfflineFile.status:type_name -> clouddrive.OfflineFileStatus
	115, // 38: clouddrive.OfflineFileListAllResult.status:type_name -> clouddrive.OfflineStatus
	116, // 39: clouddrive.OfflineFileListAllResult.offlineFiles:type_name -> clouddrive.OfflineFile
	116, // 40: clouddrive.OfflineFileListResult.offlineFiles:type_name -> clouddrive.OfflineFile
	115, // 41: clouddrive.OfflineFileListResult.status:type_name -> clouddrive.OfflineStatus
	7,   // 42: clouddrive.BalanceLog.operation:type_name -> clouddrive.BalanceLog.BalancceChangeOperation
	144, // 43: clouddrive.BalanceLog.operation_time:type_name -> google.protobuf.Timestamp
	123, // 44: clouddrive.BalanceLogResult.logs:type_name -> clouddrive.BalanceLog
	144, // 45: clouddrive.BackupDestination.lastFinishTime:type_name -> google.protobuf.Timestamp
	132, // 46: clouddrive.TimeSchedule.daysOfWeek:type_name -> clouddrive.DaysOfWeek
	131, // 47: clouddrive.Backup.destinations:type_name -> clouddrive.BackupDestination
	130, // 48: clouddrive.Backup.fileBackupRules:type_name -> clouddrive.FileBackupRule
	3,   // 49: clouddrive.Backup.fileReplaceRule:type_name -> clouddrive.FileReplaceRule
	4,   // 50: clouddrive.Backup.fileDeleteRule:type_name -> clouddrive.FileDeleteRule
	133, // 51: clouddrive.Backup.timeSchedules:type_name -> clouddrive.TimeSchedule
	134, // 52: clouddrive.BackupStatus.backup:type_name -> clouddrive.Backup
	8,   // 53: clouddrive.BackupStatus.status:type_name -> clouddrive.BackupStatus.Status
	9,   // 54: clouddrive.BackupStatus.watcherStatus:type_name -> clouddrive.BackupStatus.FileWatchStatus
	135, // 55: clouddrive.BackupList.backups:type_name -> clouddrive.BackupStatus
	131, // 56: clouddrive.BackupModifyRequest.destinations:type_name -> clouddrive.BackupDestination
	130, // 57: clouddrive.BackupModifyRequest.fileBackupRules:type_name -> clouddrive.FileBackupRule
	3,   // 58: clouddrive.BackupModifyRequest.fileReplaceRule:type_name -> clouddrive.FileReplaceRule
	4,   // 59: clouddrive.BackupModifyRequest.fileDeleteRule:type_name -> clouddrive.FileDeleteRule
	102, // 60: clouddrive.DirCacheTable.DirCacheTableEntry.value:type_name -> clouddrive.DirCacheItem
	145, // 61: clouddrive.CloudDriveFileSrv.GetSystemInfo:input_type -> google.protobuf.Empty
	10,  // 62: clouddrive.CloudDriveFileSrv.GetToken:input_type -> clouddrive.GetTokenRequest
	42,  // 63: clouddrive.CloudDriveFileSrv.Login:input_type -> clouddrive.UserLoginRequest
	43,  // 64: clouddrive.CloudDriveFileSrv.Register:input_type -> clouddrive.UserRegisterRequest
	106, // 65: clouddrive.CloudDriveFileSrv.SendResetAccountEmail:input_type -> clouddrive.SendResetAccountEmailRequest
	107, // 66: clouddrive.CloudDriveFileSrv.ResetAccount:input_type -> clouddrive.ResetAccountRequest
	145, // 67: clouddrive.CloudDriveFileSrv.SendConfirmEmail:input_type -> google.protobuf.Empty
	105, // 68: clouddrive.CloudDriveFileSrv.ConfirmEmail:input_type -> clouddrive.ConfirmEmailRequest
	145, // 69: clouddrive.CloudDriveFileSrv.GetAccountStatus:input_type -> google.protobuf.Empty
	17,  // 70: clouddrive.CloudDriveFileSrv.GetSubFiles:input_type -> clouddrive.ListSubFileRequest
	18,  // 71: clouddrive.CloudDriveFileSrv.GetSearchResults:input_type -> clouddrive.SearchRequest
	23,  // 72: clouddrive.CloudDriveFileSrv.FindFileByPath:input_type -> clouddrive.FindFileByPathRequest
	24,  // 73: clouddrive.CloudDriveFileSrv.CreateFolder:input_type -> clouddrive.CreateFolderRequest
	32,  // 74: clouddrive.CloudDriveFileSrv.RenameFile:input_type -> clouddrive.RenameFileRequest
	33,  // 75: clouddrive.CloudDriveFileSrv.RenameFiles:input_type -> clouddrive.RenameFilesRequest
	29,  // 76: clouddrive.CloudDriveFileSrv.MoveFile:input_type -> clouddrive.MoveFileRequest
	12,  // 77: clouddrive.CloudDriveFileSrv.DeleteFile:input_type -> clouddrive.FileRequest
	12,  // 78: clouddrive.CloudDriveFileSrv.DeleteFilePermanently:input_type -> clouddrive.FileRequest
	13,  // 79: clouddrive.CloudDriveFileSrv.DeleteFiles:input_type -> clouddrive.MultiFileRequest
	13,  // 80: clouddrive.CloudDriveFileSrv.DeleteFilesPermanently:input_type -> clouddrive.MultiFileRequest
	19,  // 81: clouddrive.CloudDriveFileSrv.AddOfflineFiles:input_type -> clouddrive.AddOfflineFileRequest
	20,  // 82: clouddrive.CloudDriveFileSrv.RemoveOfflineFiles:input_type -> clouddrive.RemoveOfflineFilesRequest
	12,  // 83: clouddrive.CloudDriveFileSrv.ListOfflineFilesByPath:input_type -> clouddrive.FileRequest
	117, // 84: clouddrive.CloudDriveFileSrv.ListAllOfflineFiles:input_type -> clouddrive.OfflineFileListAllRequest
	12,  // 85: clouddrive.CloudDriveFileSrv.GetFileDetailProperties:input_type -> clouddrive.FileRequest
	12,  // 86: clouddrive.CloudDriveFileSrv.GetSpaceInfo:input_type -> clouddrive.FileRequest
	12,  // 87: clouddrive.CloudDriveFileSrv.GetCloudMemberships:input_type -> clouddrive.FileRequest
	145, // 88: clouddrive.CloudDriveFileSrv.GetRuntimeInfo:input_type -> google.protobuf.Empty
	145, // 89: clouddrive.CloudDriveFileSrv.GetRunningInfo:input_type -> google.protobuf.Empty
	44,  // 90: clouddrive.CloudDriveFileSrv.Logout:input_type -> clouddrive.UserLogoutRequest
	145, // 91: clouddrive.CloudDriveFileSrv.CanAddMoreMountPoints:input_type -> google.protobuf.Empty
	145, // 92: clouddrive.CloudDriveFileSrv.GetMountPoints:input_type -> google.protobuf.Empty
	51,  // 93: clouddrive.CloudDriveFileSrv.AddMountPoint:input_type -> clouddrive.MountOption
	53,  // 94: clouddrive.CloudDriveFileSrv.RemoveMountPoint:input_type -> clouddrive.MountPointRequest
	53,  // 95: clouddrive.CloudDriveFileSrv.Mount:input_type -> clouddrive.MountPointRequest
	53,  // 96: clouddrive.CloudDriveFileSrv.Unmount:input_type -> clouddrive.MountPointRequest
	56,  // 97: clouddrive.CloudDriveFileSrv.UpdateMountPoint:input_type -> clouddrive.UpdateMountPointRequest
	145, // 98: clouddrive.CloudDriveFileSrv.GetAvailableDriveLetters:input_type -> google.protobuf.Empty
	145, // 99: clouddrive.CloudDriveFileSrv.HasDriveLetters:input_type -> google.protobuf.Empty
	60,  // 100: clouddrive.CloudDriveFileSrv.LocalGetSubFiles:input_type -> clouddrive.LocalGetSubFilesRequest
	145, // 101: clouddrive.CloudDriveFileSrv.GetAllTasksCount:input_type -> google.protobuf.Empty
	145, // 102: clouddrive.CloudDriveFileSrv.GetDownloadFileCount:input_type -> google.protobuf.Empty
	145, // 103: clouddrive.CloudDriveFileSrv.GetDownloadFileList:input_type -> google.protobuf.Empty
	145, // 104: clouddrive.CloudDriveFileSrv.GetUploadFileCount:input_type -> google.protobuf.Empty
	69,  // 105: clouddrive.CloudDriveFileSrv.GetUploadFileList:input_type -> clouddrive.GetUploadFileListRequest
	145, // 106: clouddrive.CloudDriveFileSrv.CancelAllUploadFiles:input_type -> google.protobuf.Empty
	71,  // 107: clouddrive.CloudDriveFileSrv.CancelUploadFiles:input_type -> clouddrive.MultpleUploadFileKeyRequest
	145, // 108: clouddrive.CloudDriveFileSrv.PauseAllUploadFiles:input_type -> google.protobuf.Empty
	71,  // 109: clouddrive.CloudDriveFileSrv.PauseUploadFiles:input_type -> clouddrive.MultpleUploadFileKeyRequest
	145, // 110: clouddrive.CloudDriveFileSrv.ResumeAllUploadFiles:input_type -> google.protobuf.Empty
	71,  // 111: clouddrive.CloudDriveFileSrv.ResumeUploadFiles:input_type -> clouddrive.MultpleUploadFileKeyRequest
	145, // 112: clouddrive.CloudDriveFileSrv.CanAddMoreCloudApis:input_type -> google.protobuf.Empty
	72,  // 113: clouddrive.CloudDriveFileSrv.APILogin115Editthiscookie:input_type -> clouddrive.Login115EditthiscookieRequest
	73,  // 114: clouddrive.CloudDriveFileSrv.APILogin115QRCode:input_type -> clouddrive.Login115QrCodeRequest
	74,  // 115: clouddrive.CloudDriveFileSrv.APILoginAliyundriveOAuth:input_type -> clouddrive.LoginAliyundriveOAuthRequest
	75,  // 116: clouddrive.CloudDriveFileSrv.APILoginAliyundriveRefreshtoken:input_type -> clouddrive.LoginAliyundriveRefreshtokenRequest
	76,  // 117: clouddrive.CloudDriveFileSrv.APILoginAliyunDriveQRCode:input_type -> clouddrive.LoginAliyundriveQRCodeRequest
	77,  // 118: clouddrive.CloudDriveFileSrv.APILoginBaiduPanOAuth:input_type -> clouddrive.LoginBaiduPanOAuthRequest
	78,  // 119: clouddrive.CloudDriveFileSrv.APILoginOneDriveOAuth:input_type -> clouddrive.LoginOneDriveOAuthRequest
	79,  // 120: clouddrive.CloudDriveFileSrv.ApiLoginGoogleDriveOAuth:input_type -> clouddrive.LoginGoogleDriveOAuthRequest
	80,  // 121: clouddrive.CloudDriveFileSrv.ApiLoginGoogleDriveRefreshToken:input_type -> clouddrive.LoginGoogleDriveRefreshTokenRequest
	81,  // 122: clouddrive.CloudDriveFileSrv.ApiLoginXunleiOAuth:input_type -> clouddrive.LoginXunleiOAuthRequest
	145, // 123: clouddrive.CloudDriveFileSrv.APILogin189QRCode:input_type -> google.protobuf.Empty
	42,  // 124: clouddrive.CloudDriveFileSrv.APILoginPikPak:input_type -> clouddrive.UserLoginRequest
	82,  // 125: clouddrive.CloudDriveFileSrv.APILoginWebDav:input_type -> clouddrive.LoginWebDavRequest
	84,  // 126: clouddrive.CloudDriveFileSrv.APIAddLocalFolder:input_type -> clouddrive.AddLocalFolderRequest
	85,  // 127: clouddrive.CloudDriveFileSrv.RemoveCloudAPI:input_type -> clouddrive.RemoveCloudAPIRequest
	145, // 128: clouddrive.CloudDriveFileSrv.GetAllCloudApis:input_type -> google.protobuf.Empty
	86,  // 129: clouddrive.CloudDriveFileSrv.GetCloudAPIConfig:input_type -> clouddrive.GetCloudAPIConfigRequest
	89,  // 130: clouddrive.CloudDriveFileSrv.SetCloudAPIConfig:input_type -> clouddrive.SetCloudAPIConfigRequest
	145, // 131: clouddrive.CloudDriveFileSrv.GetSystemSettings:input_type -> google.protobuf.Empty
	95,  // 132: clouddrive.CloudDriveFileSrv.SetSystemSettings:input_type -> clouddrive.SystemSettings
	96,  // 133: clouddrive.CloudDriveFileSrv.SetDirCacheTimeSecs:input_type -> clouddrive.SetDirCacheTimeRequest
	97,  // 134: clouddrive.CloudDriveFileSrv.GetEffectiveDirCacheTimeSecs:input_type -> clouddrive.GetEffectiveDirCacheTimeRequest
	98,  // 135: clouddrive.CloudDriveFileSrv.GetOpenFileTable:input_type -> clouddrive.GetOpenFileTableRequest
	145, // 136: clouddrive.CloudDriveFileSrv.GetDirCacheTable:input_type -> google.protobuf.Empty
	12,  // 137: clouddrive.CloudDriveFileSrv.GetReferencedEntryPaths:input_type -> clouddrive.FileRequest
	145, // 138: clouddrive.CloudDriveFileSrv.GetTempFileTable:input_type -> google.protobuf.Empty
	145, // 139: clouddrive.CloudDriveFileSrv.PushTaskChange:input_type -> google.protobuf.Empty
	145, // 140: clouddrive.CloudDriveFileSrv.GetCloudDrive1UserData:input_type -> google.protobuf.Empty
	145, // 141: clouddrive.CloudDriveFileSrv.RestartService:input_type -> google.protobuf.Empty
	145, // 142: clouddrive.CloudDriveFileSrv.ShutdownService:input_type -> google.protobuf.Empty
	145, // 143: clouddrive.CloudDriveFileSrv.HasUpdate:input_type -> google.protobuf.Empty
	145, // 144: clouddrive.CloudDriveFileSrv.CheckUpdate:input_type -> google.protobuf.Empty
	145, // 145: clouddrive.CloudDriveFileSrv.DownloadUpdate:input_type -> google.protobuf.Empty
	145, // 146: clouddrive.CloudDriveFileSrv.UpdateSystem:input_type -> google.protobuf.Empty
	12,  // 147: clouddrive.CloudDriveFileSrv.GetMetaData:input_type -> clouddrive.FileRequest
	12,  // 148: clouddrive.CloudDriveFileSrv.GetOriginalPath:input_type -> clouddrive.FileRequest
	45,  // 149: clouddrive.CloudDriveFileSrv.ChangePassword:input_type -> clouddrive.ChangePasswordRequest
	26,  // 150: clouddrive.CloudDriveFileSrv.CreateFile:input_type -> clouddrive.CreateFileRequest
	28,  // 151: clouddrive.CloudDriveFileSrv.CloseFile:input_type -> clouddrive.CloseFileRequest
	30,  // 152: clouddrive.CloudDriveFileSrv.WriteToFileStream:input_type -> clouddrive.WriteFileRequest
	30,  // 153: clouddrive.CloudDriveFileSrv.WriteToFile:input_type -> clouddrive.WriteFileRequest
	145, // 154: clouddrive.CloudDriveFileSrv.GetPromotions:input_type -> google.protobuf.Empty
	145, // 155: clouddrive.CloudDriveFileSrv.UpdatePromotionResult:input_type -> google.protobuf.Empty
	145, // 156: clouddrive.CloudDriveFileSrv.GetCloudDrivePlans:input_type -> google.protobuf.Empty
	110, // 157: clouddrive.CloudDriveFileSrv.JoinPlan:input_type -> clouddrive.JoinPlanRequest
	120, // 158: clouddrive.CloudDriveFileSrv.BindCloudAccount:input_type -> clouddrive.BindCloudAccountRequest
	121, // 159: clouddrive.CloudDriveFileSrv.TransferBalance:input_type -> clouddrive.TransferBalanceRequest
	122, // 160: clouddrive.CloudDriveFileSrv.ChangeEmail:input_type -> clouddrive.ChangeUserNameEmailRequest
	145, // 161: clouddrive.CloudDriveFileSrv.GetBalanceLog:input_type -> google.protobuf.Empty
	92,  // 162: clouddrive.CloudDriveFileSrv.CheckActivationCode:input_type -> clouddrive.StringValue
	92,  // 163: clouddrive.CloudDriveFileSrv.ActivatePlan:input_type -> clouddrive.StringValue
	128, // 164: clouddrive.CloudDriveFileSrv.CheckCouponCode:input_type -> clouddrive.CheckCouponCodeRequest
	145, // 165: clouddrive.CloudDriveFileSrv.GetReferralCode:input_type -> google.protobuf.Empty
	145, // 166: clouddrive.CloudDriveFileSrv.BackupGetAll:input_type -> google.protobuf.Empty
	134, // 167: clouddrive.CloudDriveFileSrv.BackupAdd:input_type -> clouddrive.Backup
	92,  // 168: clouddrive.CloudDriveFileSrv.BackupRemove:input_type -> clouddrive.StringValue
	134, // 169: clouddrive.CloudDriveFileSrv.BackupUpdate:input_type -> clouddrive.Backup
	137, // 170: clouddrive.CloudDriveFileSrv.BackupAddDestination:input_type -> clouddrive.BackupModifyRequest
	137, // 171: clouddrive.CloudDriveFileSrv.BackupRemoveDestination:input_type -> clouddrive.BackupModifyRequest
	138, // 172: clouddrive.CloudDriveFileSrv.BackupSetEnabled:input_type -> clouddrive.BackupSetEnabledRequest
	137, // 173: clouddrive.CloudDriveFileSrv.BackupSetFileSystemWatchEnabled:input_type -> clouddrive.BackupModifyRequest
	137, // 174: clouddrive.CloudDriveFileSrv.BackupUpdateStrategies:input_type -> clouddrive.BackupModifyRequest
	92,  // 175: clouddrive.CloudDriveFileSrv.BackupRestartWalkingThrough:input_type -> clouddrive.StringValue
	145, // 176: clouddrive.CloudDriveFileSrv.CanAddMoreBackups:input_type -> google.protobuf.Empty
	41,  // 177: clouddrive.CloudDriveFileSrv.GetSystemInfo:output_type -> clouddrive.CloudDriveSystemInfo
	11,  // 178: clouddrive.CloudDriveFileSrv.GetToken:output_type -> clouddrive.JWTToken
	14,  // 179: clouddrive.CloudDriveFileSrv.Login:output_type -> clouddrive.FileOperationResult
	14,  // 180: clouddrive.CloudDriveFileSrv.Register:output_type -> clouddrive.FileOperationResult
	145, // 181: clouddrive.CloudDriveFileSrv.SendResetAccountEmail:output_type -> google.protobuf.Empty
	145, // 182: clouddrive.CloudDriveFileSrv.ResetAccount:output_type -> google.protobuf.Empty
	145, // 183: clouddrive.CloudDriveFileSrv.SendConfirmEmail:output_type -> google.protobuf.Empty
	145, // 184: clouddrive.CloudDriveFileSrv.ConfirmEmail:output_type -> google.protobuf.Empty
	46,  // 185: clouddrive.CloudDriveFileSrv.GetAccountStatus:output_type -> clouddrive.AccountStatusResult
	22,  // 186: clouddrive.CloudDriveFileSrv.GetSubFiles:output_type -> clouddrive.SubFilesReply
	22,  // 187: clouddrive.CloudDriveFileSrv.GetSearchResults:output_type -> clouddrive.SubFilesReply
	34,  // 188: clouddrive.CloudDriveFileSrv.FindFileByPath:output_type -> clouddrive.CloudDriveFile
	25,  // 189: clouddrive.CloudDriveFileSrv.CreateFolder:output_type -> clouddrive.CreateFolderResult
	14,  // 190: clouddrive.CloudDriveFileSrv.RenameFile:output_type -> clouddrive.FileOperationResult
	14,  // 191: clouddrive.CloudDriveFileSrv.RenameFiles:output_type -> clouddrive.FileOperationResult
	14,  // 192: clouddrive.CloudDriveFileSrv.MoveFile:output_type -> clouddrive.FileOperationResult
	14,  // 193: clouddrive.CloudDriveFileSrv.DeleteFile:output_type -> clouddrive.FileOperationResult
	14,  // 194: clouddrive.CloudDriveFileSrv.DeleteFilePermanently:output_type -> clouddrive.FileOperationResult
	14,  // 195: clouddrive.CloudDriveFileSrv.DeleteFiles:output_type -> clouddrive.FileOperationResult
	14,  // 196: clouddrive.CloudDriveFileSrv.DeleteFilesPermanently:output_type -> clouddrive.FileOperationResult
	14,  // 197: clouddrive.CloudDriveFileSrv.AddOfflineFiles:output_type -> clouddrive.FileOperationResult
	14,  // 198: clouddrive.CloudDriveFileSrv.RemoveOfflineFiles:output_type -> clouddrive.FileOperationResult
	119, // 199: clouddrive.CloudDriveFileSrv.ListOfflineFilesByPath:output_type -> clouddrive.OfflineFileListResult
	118, // 200: clouddrive.CloudDriveFileSrv.ListAllOfflineFiles:output_type -> clouddrive.OfflineFileListAllResult
	39,  // 201: clouddrive.CloudDriveFileSrv.GetFileDetailProperties:output_type -> clouddrive.FileDetailProperties
	35,  // 202: clouddrive.CloudDriveFileSrv.GetSpaceInfo:output_type -> clouddrive.SpaceInfo
	38,  // 203: clouddrive.CloudDriveFileSrv.GetCloudMemberships:output_type -> clouddrive.CloudMemberships
	49,  // 204: clouddrive.CloudDriveFileSrv.GetRuntimeInfo:output_type -> clouddrive.RuntimeInfo
	50,  // 205: clouddrive.CloudDriveFileSrv.GetRunningInfo:output_type -> clouddrive.RunInfo
	14,  // 206: clouddrive.CloudDriveFileSrv.Logout:output_type -> clouddrive.FileOperationResult
	14,  // 207: clouddrive.CloudDriveFileSrv.CanAddMoreMountPoints:output_type -> clouddrive.FileOperationResult
	54,  // 208: clouddrive.CloudDriveFileSrv.GetMountPoints:output_type -> clouddrive.GetMountPointsResult
	55,  // 209: clouddrive.CloudDriveFileSrv.AddMountPoint:output_type -> clouddrive.MountPointResult
	55,  // 210: clouddrive.CloudDriveFileSrv.RemoveMountPoint:output_type -> clouddrive.MountPointResult
	55,  // 211: clouddrive.CloudDriveFileSrv.Mount:output_type -> clouddrive.MountPointResult
	55,  // 212: clouddrive.CloudDriveFileSrv.Unmount:output_type -> clouddrive.MountPointResult
	55,  // 213: clouddrive.CloudDriveFileSrv.UpdateMountPoint:output_type -> clouddrive.MountPointResult
	58,  // 214: clouddrive.CloudDriveFileSrv.GetAvailableDriveLetters:output_type -> clouddrive.GetAvailableDriveLettersResult
	59,  // 215: clouddrive.CloudDriveFileSrv.HasDriveLetters:output_type -> clouddrive.HasDriveLettersResult
	61,  // 216: clouddrive.CloudDriveFileSrv.LocalGetSubFiles:output_type -> clouddrive.LocalGetSubFilesResult
	63,  // 217: clouddrive.CloudDriveFileSrv.GetAllTasksCount:output_type -> clouddrive.GetAllTasksCountResult
	64,  // 218: clouddrive.CloudDriveFileSrv.GetDownloadFileCount:output_type -> clouddrive.GetDownloadFileCountResult
	66,  // 219: clouddrive.CloudDriveFileSrv.GetDownloadFileList:output_type -> clouddrive.GetDownloadFileListResult
	67,  // 220: clouddrive.CloudDriveFileSrv.GetUploadFileCount:output_type -> clouddrive.GetUploadFileCountResult
	70,  // 221: clouddrive.CloudDriveFileSrv.GetUploadFileList:output_type -> clouddrive.GetUploadFileListResult
	145, // 222: clouddrive.CloudDriveFileSrv.CancelAllUploadFiles:output_type -> google.protobuf.Empty
	145, // 223: clouddrive.CloudDriveFileSrv.CancelUploadFiles:output_type -> google.protobuf.Empty
	145, // 224: clouddrive.CloudDriveFileSrv.PauseAllUploadFiles:output_type -> google.protobuf.Empty
	145, // 225: clouddrive.CloudDriveFileSrv.PauseUploadFiles:output_type -> google.protobuf.Empty
	145, // 226: clouddrive.CloudDriveFileSrv.ResumeAllUploadFiles:output_type -> google.protobuf.Empty
	145, // 227: clouddrive.CloudDriveFileSrv.ResumeUploadFiles:output_type -> google.protobuf.Empty
	14,  // 228: clouddrive.CloudDriveFileSrv.CanAddMoreCloudApis:output_type -> clouddrive.FileOperationResult
	83,  // 229: clouddrive.CloudDriveFileSrv.APILogin115Editthiscookie:output_type -> clouddrive.APILoginResult
	93,  // 230: clouddrive.CloudDriveFileSrv.APILogin115QRCode:output_type -> clouddrive.QRCodeScanMessage
	83,  // 231: clouddrive.CloudDriveFileSrv.APILoginAliyundriveOAuth:output_type -> clouddrive.APILoginResult
	83,  // 232: clouddrive.CloudDriveFileSrv.APILoginAliyundriveRefreshtoken:output_type -> clouddrive.APILoginResult
	93,  // 233: clouddrive.CloudDriveFileSrv.APILoginAliyunDriveQRCode:output_type -> clouddrive.QRCodeScanMessage
	83,  // 234: clouddrive.CloudDriveFileSrv.APILoginBaiduPanOAuth:output_type -> clouddrive.APILoginResult
	83,  // 235: clouddrive.CloudDriveFileSrv.APILoginOneDriveOAuth:output_type -> clouddrive.APILoginResult
	83,  // 236: clouddrive.CloudDriveFileSrv.ApiLoginGoogleDriveOAuth:output_type -> clouddrive.APILoginResult
	83,  // 237: clouddrive.CloudDriveFileSrv.ApiLoginGoogleDriveRefreshToken:output_type -> clouddrive.APILoginResult
	83,  // 238: clouddrive.CloudDriveFileSrv.ApiLoginXunleiOAuth:output_type -> clouddrive.APILoginResult
	93,  // 239: clouddrive.CloudDriveFileSrv.APILogin189QRCode:output_type -> clouddrive.QRCodeScanMessage
	83,  // 240: clouddrive.CloudDriveFileSrv.APILoginPikPak:output_type -> clouddrive.APILoginResult
	83,  // 241: clouddrive.CloudDriveFileSrv.APILoginWebDav:output_type -> clouddrive.APILoginResult
	83,  // 242: clouddrive.CloudDriveFileSrv.APIAddLocalFolder:output_type -> clouddrive.APILoginResult
	14,  // 243: clouddrive.CloudDriveFileSrv.RemoveCloudAPI:output_type -> clouddrive.FileOperationResult
	87,  // 244: clouddrive.CloudDriveFileSrv.GetAllCloudApis:output_type -> clouddrive.CloudAPIList
	88,  // 245: clouddrive.CloudDriveFileSrv.GetCloudAPIConfig:output_type -> clouddrive.CloudAPIConfig
	145, // 246: clouddrive.CloudDriveFileSrv.SetCloudAPIConfig:output_type -> google.protobuf.Empty
	95,  // 247: clouddrive.CloudDriveFileSrv.GetSystemSettings:output_type -> clouddrive.SystemSettings
	145, // 248: clouddrive.CloudDriveFileSrv.SetSystemSettings:output_type -> google.protobuf.Empty
	145, // 249: clouddrive.CloudDriveFileSrv.SetDirCacheTimeSecs:output_type -> google.protobuf.Empty
	99,  // 250: clouddrive.CloudDriveFileSrv.GetEffectiveDirCacheTimeSecs:output_type -> clouddrive.GetEffectiveDirCacheTimeResult
	101, // 251: clouddrive.CloudDriveFileSrv.GetOpenFileTable:output_type -> clouddrive.OpenFileTable
	103, // 252: clouddrive.CloudDriveFileSrv.GetDirCacheTable:output_type -> clouddrive.DirCacheTable
	94,  // 253: clouddrive.CloudDriveFileSrv.GetReferencedEntryPaths:output_type -> clouddrive.StringList
	104, // 254: clouddrive.CloudDriveFileSrv.GetTempFileTable:output_type -> clouddrive.TempFileTable
	63,  // 255: clouddrive.CloudDriveFileSrv.PushTaskChange:output_type -> clouddrive.GetAllTasksCountResult
	15,  // 256: clouddrive.CloudDriveFileSrv.GetCloudDrive1UserData:output_type -> clouddrive.StringResult
	145, // 257: clouddrive.CloudDriveFileSrv.RestartService:output_type -> google.protobuf.Empty
	145, // 258: clouddrive.CloudDriveFileSrv.ShutdownService:output_type -> google.protobuf.Empty
	100, // 259: clouddrive.CloudDriveFileSrv.HasUpdate:output_type -> clouddrive.UpdateResult
	100, // 260: clouddrive.CloudDriveFileSrv.CheckUpdate:output_type -> clouddrive.UpdateResult
	145, // 261: clouddrive.CloudDriveFileSrv.DownloadUpdate:output_type -> google.protobuf.Empty
	145, // 262: clouddrive.CloudDriveFileSrv.UpdateSystem:output_type -> google.protobuf.Empty
	40,  // 263: clouddrive.CloudDriveFileSrv.GetMetaData:output_type -> clouddrive.FileMetaData
	15,  // 264: clouddrive.CloudDriveFileSrv.GetOriginalPath:output_type -> clouddrive.StringResult
	14,  // 265: clouddrive.CloudDriveFileSrv.ChangePassword:output_type -> clouddrive.FileOperationResult
	27,  // 266: clouddrive.CloudDriveFileSrv.CreateFile:output_type -> clouddrive.CreateFileResult
	14,  // 267: clouddrive.CloudDriveFileSrv.CloseFile:output_type -> clouddrive.FileOperationResult
	31,  // 268: clouddrive.CloudDriveFileSrv.WriteToFileStream:output_type -> clouddrive.WriteFileResult
	31,  // 269: clouddrive.CloudDriveFileSrv.WriteToFile:output_type -> clouddrive.WriteFileResult
	114, // 270: clouddrive.CloudDriveFileSrv.GetPromotions:output_type -> clouddrive.GetPromotionsResult
	145, // 271: clouddrive.CloudDriveFileSrv.UpdatePromotionResult:output_type -> google.protobuf.Empty
	109, // 272: clouddrive.CloudDriveFileSrv.GetCloudDrivePlans:output_type -> clouddrive.GetCloudDrivePlansResult
	112, // 273: clouddrive.CloudDriveFileSrv.JoinPlan:output_type -> clouddrive.JoinPlanResult
	145, // 274: clouddrive.CloudDriveFileSrv.BindCloudAccount:output_type -> google.protobuf.Empty
	145, // 275: clouddrive.CloudDriveFileSrv.TransferBalance:output_type -> google.protobuf.Empty
	145, // 276: clouddrive.CloudDriveFileSrv.ChangeEmail:output_type -> google.protobuf.Empty
	124, // 277: clouddrive.CloudDriveFileSrv.GetBalanceLog:output_type -> clouddrive.BalanceLogResult
	127, // 278: clouddrive.CloudDriveFileSrv.CheckActivationCode:output_type -> clouddrive.CheckActivationCodeResult
	112, // 279: clouddrive.CloudDriveFileSrv.ActivatePlan:output_type -> clouddrive.JoinPlanResult
	129, // 280: clouddrive.CloudDriveFileSrv.CheckCouponCode:output_type -> clouddrive.CouponCodeResult
	92,  // 281: clouddrive.CloudDriveFileSrv.GetReferralCode:output_type -> clouddrive.StringValue
	136, // 282: clouddrive.CloudDriveFileSrv.BackupGetAll:output_type -> clouddrive.BackupList
	145, // 283: clouddrive.CloudDriveFileSrv.BackupAdd:output_type -> google.protobuf.Empty
	145, // 284: clouddrive.CloudDriveFileSrv.BackupRemove:output_type -> google.protobuf.Empty
	145, // 285: clouddrive.CloudDriveFileSrv.BackupUpdate:output_type -> google.protobuf.Empty
	145, // 286: clouddrive.CloudDriveFileSrv.BackupAddDestination:output_type -> google.protobuf.Empty
	145, // 287: clouddrive.CloudDriveFileSrv.BackupRemoveDestination:output_type -> google.protobuf.Empty
	145, // 288: clouddrive.CloudDriveFileSrv.BackupSetEnabled:output_type -> google.protobuf.Empty
	145, // 289: clouddrive.CloudDriveFileSrv.BackupSetFileSystemWatchEnabled:output_type -> google.protobuf.Empty
	145, // 290: clouddrive.CloudDriveFileSrv.BackupUpdateStrategies:output_type -> google.protobuf.Empty
	145, // 291: clouddrive.CloudDriveFileSrv.BackupRestartWalkingThrough:output_type -> google.protobuf.Empty
	14,  // 292: clouddrive.CloudDriveFileSrv.CanAddMoreBackups:output_type -> clouddrive.FileOperationResult
	177, // [177:293] is the sub-list for method output_type
	61,  // [61:177] is the sub-list for method input_type
	61,  // [61:61] is the sub-list for extension type_name
	61,  // [61:61] is the sub-list for extension extendee
	0,   // [0:61] is the sub-list for field type_name
}

func init() { file_clouddrive_CloudDrive_proto_init() }
func file_clouddrive_CloudDrive_proto_init() {
	if File_clouddrive_CloudDrive_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clouddrive_CloudDrive_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOperationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmountArchiveResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOfflineFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOfflineFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSharedLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubFilesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFileByPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFolderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteFileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudDriveFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudMemberships); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDetailProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudDriveSystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStatusResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMountPointsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountPointResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMountPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableDriveLettersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableDriveLettersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasDriveLettersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalGetSubFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalGetSubFilesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTasksCountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDownloadFileCountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDownloadFileListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploadFileCountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploadFileListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploadFileListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultpleUploadFileKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login115EditthiscookieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login115QrCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginAliyundriveOAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginAliyundriveRefreshtokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginAliyundriveQRCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginBaiduPanOAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginOneDriveOAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginGoogleDriveOAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginGoogleDriveRefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginXunleiOAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginWebDavRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APILoginResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLocalFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCloudAPIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudAPIConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAPIList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudAPIConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCloudAPIConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRCodeScanMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDirCacheTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEffectiveDirCacheTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenFileTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEffectiveDirCacheTimeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenFileTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirCacheItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirCacheTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempFileTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResetAccountEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudDrivePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudDrivePlansResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinPlanResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Promotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPromotionsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineFileListAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineFileListAllResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineFileListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindCloudAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeUserNameEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceLogResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckFinalPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckFinalPriceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckActivationCodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCouponCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponCodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileBackupRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaysOfWeek); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupModifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddrive_CloudDrive_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupSetEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_clouddrive_CloudDrive_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[85].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[86].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[98].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[100].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[102].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[103].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[116].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[120].OneofWrappers = []interface{}{
		(*FileBackupRule_Extensions)(nil),
		(*FileBackupRule_FileNames)(nil),
		(*FileBackupRule_Regex)(nil),
		(*FileBackupRule_MinSize)(nil),
	}
	file_clouddrive_CloudDrive_proto_msgTypes[121].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[123].OneofWrappers = []interface{}{}
	file_clouddrive_CloudDrive_proto_msgTypes[127].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clouddrive_CloudDrive_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   134,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clouddrive_CloudDrive_proto_goTypes,
		DependencyIndexes: file_clouddrive_CloudDrive_proto_depIdxs,
		EnumInfos:         file_clouddrive_CloudDrive_proto_enumTypes,
		MessageInfos:      file_clouddrive_CloudDrive_proto_msgTypes,
	}.Build()
	File_clouddrive_CloudDrive_proto = out.File
	file_clouddrive_CloudDrive_proto_rawDesc = nil
	file_clouddrive_CloudDrive_proto_goTypes = nil
	file_clouddrive_CloudDrive_proto_depIdxs = nil
}
