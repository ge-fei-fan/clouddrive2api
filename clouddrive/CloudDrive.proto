syntax = "proto3";

option go_package = "clouddrive/clouddrive";

package clouddrive;

// 0.6.4-beta

option csharp_namespace = "CloudDriveSrv.Protos";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

service CloudDriveFileSrv {
  // public methods, no authorization is required
  // returns if clouddrive has logged in to cloudfs server and the user name
  rpc GetSystemInfo(google.protobuf.Empty) returns (CloudDriveSystemInfo) {}
  // get bearer token by username and password
  rpc GetToken(GetTokenRequest) returns (JWTToken) {}
  // login to cloudfs server
  rpc Login(UserLoginRequest) returns (FileOperationResult) {}
  // register a new count
  rpc Register(UserRegisterRequest) returns (FileOperationResult) {}
  // asks cloudfs server to send reset account email with reset link
  rpc SendResetAccountEmail(SendResetAccountEmailRequest)
      returns (google.protobuf.Empty) {}
  // reset account's data, set new password, with received reset code from email
  rpc ResetAccount(ResetAccountRequest) returns (google.protobuf.Empty) {}

  // authorized methods, Authorization header with Bearer {token} is requirerd
  // asks cloudfs server to send confirm email with confirm link
  rpc SendConfirmEmail(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // confirm email by confirm code
  rpc ConfirmEmail(ConfirmEmailRequest) returns (google.protobuf.Empty) {}
  // get account status
  rpc GetAccountStatus(google.protobuf.Empty) returns (AccountStatusResult) {}
  // get all subfiles by path
  rpc GetSubFiles(ListSubFileRequest) returns (stream SubFilesReply) {}
  // search under path
  rpc GetSearchResults(SearchRequest) returns (stream SubFilesReply) {}
  // find file info by full path
  rpc FindFileByPath(FindFileByPathRequest) returns (CloudDriveFile) {}
  // create a folder under path
  rpc CreateFolder(CreateFolderRequest) returns (CreateFolderResult) {}
  // rename a single file
  rpc RenameFile(RenameFileRequest) returns (FileOperationResult) {}
  // batch rename files
  rpc RenameFiles(RenameFilesRequest) returns (FileOperationResult) {}
  // move files to a dest folder
  rpc MoveFile(MoveFileRequest) returns (FileOperationResult) {}
  // delete a single file
  rpc DeleteFile(FileRequest) returns (FileOperationResult) {}
  // delete a single file permanently, only aliyundrive supports this currently
  rpc DeleteFilePermanently(FileRequest) returns (FileOperationResult) {}
  // batch delete files
  rpc DeleteFiles(MultiFileRequest) returns (FileOperationResult) {}
  // batch delete files permanently, only aliyundrive supports this currently
  rpc DeleteFilesPermanently(MultiFileRequest) returns (FileOperationResult) {}
  // add offline files by providing magnet, sha1, ..., applies only with folders
  // with canOfflineDownload is tru
  rpc AddOfflineFiles(AddOfflineFileRequest) returns (FileOperationResult) {}
  // remove offline files by info hash
  rpc RemoveOfflineFiles(RemoveOfflineFilesRequest)
      returns (FileOperationResult) {}
  // list offline files
  rpc ListOfflineFilesByPath(FileRequest) returns (OfflineFileListResult) {}
  // list all offline files of a cloud with pagination
  rpc ListAllOfflineFiles(OfflineFileListAllRequest)
      returns (OfflineFileListAllResult) {}
  // get folder properties, applies only with folders with hasDetailProperties
  // is true
  rpc GetFileDetailProperties(FileRequest) returns (FileDetailProperties) {}
  // get total/free/used space of a cloud path
  rpc GetSpaceInfo(FileRequest) returns (SpaceInfo) {}
  // get cloud account memberships
  rpc GetCloudMemberships(FileRequest) returns (CloudMemberships) {}
  // get server runtime info
  rpc GetRuntimeInfo(google.protobuf.Empty) returns (RuntimeInfo) {}
  // get server stats, including cpu/mem/uptime
  rpc GetRunningInfo(google.protobuf.Empty) returns (RunInfo) {}
  // logout from cloudfs server
  rpc Logout(UserLogoutRequest) returns (FileOperationResult) {}
  // check if current user can add more mount point
  rpc CanAddMoreMountPoints(google.protobuf.Empty)
      returns (FileOperationResult) {}
  // get all mount points
  rpc GetMountPoints(google.protobuf.Empty) returns (GetMountPointsResult) {}
  // add a new mount point
  rpc AddMountPoint(MountOption) returns (MountPointResult) {}
  // remove a mountpoint
  rpc RemoveMountPoint(MountPointRequest) returns (MountPointResult) {}
  // mount a mount point
  rpc Mount(MountPointRequest) returns (MountPointResult) {}
  // unmount a mount point
  rpc Unmount(MountPointRequest) returns (MountPointResult) {}
  // change mount point settings
  rpc UpdateMountPoint(UpdateMountPointRequest) returns (MountPointResult) {}
  // get all unused drive letters from server's local storage, applies to
  // windows only
  rpc GetAvailableDriveLetters(google.protobuf.Empty)
      returns (GetAvailableDriveLettersResult) {}
  // check if server has driver letters, returns true only on windows
  rpc HasDriveLetters(google.protobuf.Empty) returns (HasDriveLettersResult) {}
  // get subfiles of a local path, used for adding mountpoint from web ui
  rpc LocalGetSubFiles(LocalGetSubFilesRequest)
      returns (stream LocalGetSubFilesResult) {}
  // get all transfer tasks' count
  rpc GetAllTasksCount(google.protobuf.Empty) returns (GetAllTasksCountResult) {
  }
  // get download tasks' count
  rpc GetDownloadFileCount(google.protobuf.Empty)
      returns (GetDownloadFileCountResult) {}
  // get all download tasks
  rpc GetDownloadFileList(google.protobuf.Empty)
      returns (GetDownloadFileListResult) {}
  // get all upload tasks' count
  rpc GetUploadFileCount(google.protobuf.Empty)
      returns (GetUploadFileCountResult) {}
  // get upload tasks, paged by providing page number and items per page and
  // file name filter
  rpc GetUploadFileList(GetUploadFileListRequest)
      returns (GetUploadFileListResult) {}
  // cancel all upload tasks
  rpc CancelAllUploadFiles(google.protobuf.Empty)
      returns (google.protobuf.Empty) {}
  // cancel selected upload tasks
  rpc CancelUploadFiles(MultpleUploadFileKeyRequest)
      returns (google.protobuf.Empty) {}
  // pause all upload tasks
  rpc PauseAllUploadFiles(google.protobuf.Empty)
      returns (google.protobuf.Empty) {}
  // pause selected upload tasks
  rpc PauseUploadFiles(MultpleUploadFileKeyRequest)
      returns (google.protobuf.Empty) {}
  // resume all upload tasks
  rpc ResumeAllUploadFiles(google.protobuf.Empty)
      returns (google.protobuf.Empty) {}
  // resume selected upload tasks
  rpc ResumeUploadFiles(MultpleUploadFileKeyRequest)
      returns (google.protobuf.Empty) {}
  // check if current user can add more cloud apis
  rpc CanAddMoreCloudApis(google.protobuf.Empty) returns (FileOperationResult) {
  }
  // add 115 cloud with editthiscookie
  rpc APILogin115Editthiscookie(Login115EditthiscookieRequest)
      returns (APILoginResult) {}
  // add 115 cloud with qr scanning
  rpc APILogin115QRCode(Login115QrCodeRequest)
      returns (stream QRCodeScanMessage) {}
  // add AliyunDriveOpen with OAuth result
  rpc APILoginAliyundriveOAuth(LoginAliyundriveOAuthRequest)
      returns (APILoginResult) {}
  // add AliyunDrive with refresh token
  rpc APILoginAliyundriveRefreshtoken(LoginAliyundriveRefreshtokenRequest)
      returns (APILoginResult) {}
  // add AliyunDrive with qr scanning
  rpc APILoginAliyunDriveQRCode(LoginAliyundriveQRCodeRequest)
      returns (stream QRCodeScanMessage) {}
  // add BaiduPan with OAuth result
  rpc APILoginBaiduPanOAuth(LoginBaiduPanOAuthRequest)
      returns (APILoginResult) {}
  // add OneDrive with OAuth result
  rpc APILoginOneDriveOAuth(LoginOneDriveOAuthRequest)
      returns (APILoginResult) {}
  // add Google Drive with OAuth result
  rpc ApiLoginGoogleDriveOAuth(LoginGoogleDriveOAuthRequest)
      returns (APILoginResult) {}
  // add Google Drive with refresh token
  rpc ApiLoginGoogleDriveRefreshToken(LoginGoogleDriveRefreshTokenRequest)
      returns (APILoginResult) {}
  // add Xunlei Drive with OAuth result
  rpc ApiLoginXunleiOAuth(LoginXunleiOAuthRequest)
    returns (APILoginResult) {}
  // add 189 cloud with qr scanning
  rpc APILogin189QRCode(google.protobuf.Empty)
      returns (stream QRCodeScanMessage) {}
  // add PikPak cloud with username and password
  rpc APILoginPikPak(UserLoginRequest) returns (APILoginResult) {}
  // add webdav
  rpc APILoginWebDav(LoginWebDavRequest) returns (APILoginResult) {}
  // add local folder
  rpc APIAddLocalFolder(AddLocalFolderRequest) returns (APILoginResult) {}
  // remove a cloud
  rpc RemoveCloudAPI(RemoveCloudAPIRequest) returns (FileOperationResult) {}
  // get all cloud apis
  rpc GetAllCloudApis(google.protobuf.Empty) returns (CloudAPIList) {}
  // get CloudAPI configuration
  rpc GetCloudAPIConfig(GetCloudAPIConfigRequest) returns (CloudAPIConfig) {}
  // set CloudAPI configuration
  rpc SetCloudAPIConfig(SetCloudAPIConfigRequest)
      returns (google.protobuf.Empty) {}
  // get all system setings value
  rpc GetSystemSettings(google.protobuf.Empty) returns (SystemSettings) {}
  // set selected system settings value
  rpc SetSystemSettings(SystemSettings) returns (google.protobuf.Empty) {}
  // set dir cache time
  rpc SetDirCacheTimeSecs(SetDirCacheTimeRequest)
      returns (google.protobuf.Empty) {}
  // get dir cache time in effect (default value will be returned)
  rpc GetEffectiveDirCacheTimeSecs(GetEffectiveDirCacheTimeRequest)
      returns (GetEffectiveDirCacheTimeResult) {}
  // get open file table
  rpc GetOpenFileTable(GetOpenFileTableRequest) returns (OpenFileTable) {}
  // get dir cache table
  rpc GetDirCacheTable(google.protobuf.Empty) returns (DirCacheTable) {}
  // get referenced entry paths of parent path
  rpc GetReferencedEntryPaths(FileRequest) returns (StringList) {}

  // get temp file table
  rpc GetTempFileTable(google.protobuf.Empty) returns (TempFileTable) {}

  // push upload/download task count changes to client, also can be used for
  // client to detect conenction broken
  rpc PushTaskChange(google.protobuf.Empty)
      returns (stream GetAllTasksCountResult) {}
  // get CloudDrive1's user data string
  rpc GetCloudDrive1UserData(google.protobuf.Empty) returns (StringResult) {}
  // restart service
  rpc RestartService(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // shutdown service
  rpc ShutdownService(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // check if has updates available
  rpc HasUpdate(google.protobuf.Empty) returns (UpdateResult) {}
  // check software updates
  rpc CheckUpdate(google.protobuf.Empty) returns (UpdateResult) {}
  // download newest version
  rpc DownloadUpdate(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // update to newest version
  rpc UpdateSystem(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // get file metadata
  rpc GetMetaData(FileRequest) returns (FileMetaData) {}
  // get file's original path from search result
  rpc GetOriginalPath(FileRequest) returns (StringResult) {}
  // change password
  rpc ChangePassword(ChangePasswordRequest) returns (FileOperationResult) {}
  // create a new file
  rpc CreateFile(CreateFileRequest) returns (CreateFileResult) {}
  // close an opened file
  rpc CloseFile(CloseFileRequest) returns (FileOperationResult) {}
  // write a stream to an opened file
  rpc WriteToFileStream(stream WriteFileRequest) returns (WriteFileResult) {}
  // write to an opened file
  rpc WriteToFile(WriteFileRequest) returns (WriteFileResult) {}
  // get promotions
  rpc GetPromotions(google.protobuf.Empty) returns (GetPromotionsResult) {}
  // update promotion result after purchased
  rpc UpdatePromotionResult(google.protobuf.Empty)
      returns (google.protobuf.Empty) {}
  // get cloudfs plans
  rpc GetCloudDrivePlans(google.protobuf.Empty)
      returns (GetCloudDrivePlansResult) {}
  // join a plan
  rpc JoinPlan(JoinPlanRequest) returns (JoinPlanResult) {}
  // bind account to a cloud account id
  rpc BindCloudAccount(BindCloudAccountRequest)
      returns (google.protobuf.Empty) {}
  // transfer balance to another user
  rpc TransferBalance(TransferBalanceRequest) returns (google.protobuf.Empty) {}
  // change email
  rpc ChangeEmail(ChangeUserNameEmailRequest) returns (google.protobuf.Empty) {}
  // chech balance log
  rpc GetBalanceLog(google.protobuf.Empty) returns (BalanceLogResult) {}
  // check activation code for a plan
  rpc CheckActivationCode(StringValue) returns (CheckActivationCodeResult) {}
  // Activate plan using an activation code
  rpc ActivatePlan(StringValue) returns (JoinPlanResult) {}
  // check counpon code for a plan
  rpc CheckCouponCode(CheckCouponCodeRequest) returns (CouponCodeResult) {}
  // get referral code of current user
  rpc GetReferralCode(google.protobuf.Empty) returns (StringValue) {}
  // // list all backups
  rpc BackupGetAll(google.protobuf.Empty) returns (BackupList) {}
  // add a backup
  rpc BackupAdd(Backup)
      returns (google.protobuf.Empty) {}
  // remove a backup by it's source path
  rpc BackupRemove(StringValue)
      returns (google.protobuf.Empty) {}
  // update a backup
  rpc BackupUpdate(Backup)
      returns (google.protobuf.Empty) {}
  // add destinations to a backup
  rpc BackupAddDestination(BackupModifyRequest)
      returns (google.protobuf.Empty) {}
  // remove destinations from a backup
  rpc BackupRemoveDestination(BackupModifyRequest)
      returns (google.protobuf.Empty) {}
  // enable/disable a backup
  rpc BackupSetEnabled(BackupSetEnabledRequest)
      returns (google.protobuf.Empty) {}
  // enable/disable a backup's FileSystemWatch
  rpc BackupSetFileSystemWatchEnabled(BackupModifyRequest)
      returns (google.protobuf.Empty) {}
  // deprecated, use BackupUpdate instead
  rpc BackupUpdateStrategies(BackupModifyRequest)
      returns (google.protobuf.Empty) {}
  rpc BackupRestartWalkingThrough(StringValue)
      returns (google.protobuf.Empty) {}
  rpc CanAddMoreBackups(google.protobuf.Empty)
      returns (FileOperationResult) {}
}
message GetTokenRequest {
  string userName = 1;
  string password = 2;
}
message JWTToken {
  bool success = 1;
  string errorMessage = 2;
  string token = 3;
  google.protobuf.Timestamp expiration = 4;
}
message FileRequest { string path = 1; }
message MultiFileRequest { repeated string path = 1; }
message FileOperationResult {
  bool success = 1;
  string errorMessage = 2;
  repeated string resultFilePaths = 3;
}
message StringResult { string result = 1; }
message UnmountArchiveResult { string result = 1; }

message ListSubFileRequest {
  string path = 1;
  bool forceRefresh = 2;
  optional bool checkExpires = 3;
}
message SearchRequest {
  string path = 1;
  string searchFor = 2;
  bool forceRefresh = 3;
  bool fuzzyMatch = 4;
}
message AddOfflineFileRequest {
  string urls = 1;
  string toFolder = 2;
}
message RemoveOfflineFilesRequest {
  string cloudName = 1;
  string cloudAccountId = 2;
  bool deleteFiles = 3;
  repeated string infoHashes = 4;
}
message AddSharedLinkRequest {
  string sharedLinkUrl = 1;
  string sharedPassword = 2;
  string toFolder = 3;
}
message SubFilesReply { repeated CloudDriveFile subFiles = 1; }
message FindFileByPathRequest {
  string parentPath = 1;
  string path = 2;
}

message CreateFolderRequest {
  string parentPath = 1;
  string folderName = 2;
}
message CreateFolderResult {
  CloudDriveFile folderCreated = 1;
  FileOperationResult result = 2;
}

message CreateFileRequest {
  string parentPath = 1;
  string fileName = 2;
}
message CreateFileResult { uint64 fileHandle = 1; }
message CloseFileRequest { uint64 fileHandle = 1; }
message MoveFileRequest {
  repeated string theFilePaths = 1;
  string destPath = 2;
}
message WriteFileRequest {
  uint64 fileHandle = 1;
  uint64 startPos = 2;
  uint64 length = 3;
  bytes buffer = 4;
  bool closeFile = 5;
}
message WriteFileResult { uint64 bytesWritten = 1; }
message RenameFileRequest {
  string theFilePath = 1;
  string newName = 2;
}
message RenameFilesRequest { repeated RenameFileRequest renameFiles = 1; }
message CloudDriveFile {
  string id = 1;
  string name = 2;
  string fullPathName = 3;
  int64 size = 4;
  enum FileType {
    Directory = 0;
    File = 1;
    Other = 2;
  }
  FileType fileType = 5;
  google.protobuf.Timestamp createTime = 6;
  google.protobuf.Timestamp writeTime = 7;
  google.protobuf.Timestamp accessTime = 8;
  CloudAPI CloudAPI = 9;
  string thumbnailUrl = 10;
  string previewUrl = 11;
  string originalPath = 14;

  bool isDirectory = 30;
  bool isRoot = 31;
  bool isCloudRoot = 32;
  bool isCloudDirectory = 33;
  bool isCloudFile = 34;
  bool isSearchResult = 35;
  bool isForbidden = 36;
  bool isLocal = 37;

  bool canMount = 60;
  bool canUnmount = 61;
  bool canDirectAccessThumbnailURL = 62;
  bool canSearch = 63;
  bool hasDetailProperties = 64;
  FileDetailProperties detailProperties = 65;
  bool canOfflineDownload = 66;
  bool canAddShareLink = 67;
  optional uint64 dirCacheTimeToLiveSecs = 68;
  bool canDeletePermanently = 69;
  enum HashType {
    Unknown = 0;
    Md5 = 1;
    Sha1 = 2;
    PikPakSha1 = 3;
  }
  map<uint32, string> fileHashes = 70;
}

message SpaceInfo {
  int64 totalSpace = 1;
  int64 usedSpace = 2;
  int64 freeSpace = 3;
}
message CloudAPI {
  string name = 1;
  string userName = 2;
  string nickName = 3;
  bool isLocked = 4; // isLocked means the cloudAPI is set to can't open files,
                     // due to user's membership issue
}
message CloudMembership {
  string identity = 1;
  optional google.protobuf.Timestamp expireTime = 2;
  optional string level = 3;
}
message CloudMemberships { repeated CloudMembership memberships = 1; }
message FileDetailProperties {
  int64 totalFileCount = 1;
  int64 totalFolderCount = 2;
  int64 totalSize = 3;
  bool isFaved = 4;
  bool isShared = 5;
  string originalPath = 6;
}
message FileMetaData { map<string, string> metadata = 1; }
message CloudDriveSystemInfo {
  bool IsLogin = 1;
  string UserName = 2;
}
message UserLoginRequest {
  string userName = 1;
  string password = 2;
  bool synDataToCloud = 3;
}
message UserRegisterRequest {
  string userName = 1;
  string password = 2;
}
message UserLogoutRequest { bool logoutFromCloudFS = 1; }
message ChangePasswordRequest {
  string oldPassword = 1;
  string newPassword = 2;
}
message AccountStatusResult {
  string userName = 1;
  string emailConfirmed = 2;
  double accountBalance = 3;
  AccountPlan accountPlan = 4;
  repeated AccountRole accountRoles = 5;
}
message AccountPlan {
  string planName = 1;
  string description = 2;
  string fontAwesomeIcon = 3;
  string durationDescription = 4;
  google.protobuf.Timestamp endTime = 5;
}
message AccountRole {
  string roleName = 1;
  string description = 2;
  optional int32 value = 3;
}
message RuntimeInfo {
  string productName = 1;
  string productVersion = 2;
  string CloudAPIVersion = 3;
  string osInfo = 4;
}
message RunInfo {
  double cpuUsage = 1;
  uint64 memUsageKB = 2;
  double uptime = 3;
  uint64 fhTableCount = 4;
  uint64 dirCacheCount = 5;
  uint64 tempFileCount = 6;
}
message MountOption {
  string mountPoint = 1;
  string sourceDir = 2;
  bool localMount = 3;
  bool readOnly = 4;
  bool autoMount = 5;
  uint32 uid = 6;
  uint32 gid = 7;
  string permissions = 8;
  string name = 9;
}
message MountPoint {
  string mountPoint = 1;
  string sourceDir = 2;
  bool localMount = 3;
  bool readOnly = 4;
  bool autoMount = 5;
  uint32 uid = 6;
  uint32 gid = 7;
  string permissions = 8;
  bool isMounted = 9;
  string failReason = 10;
}
message MountPointRequest { string MountPoint = 1; }
message GetMountPointsResult { repeated MountPoint mountPoints = 1; }
message MountPointResult {
  bool success = 1;
  string failReason = 2;
}
message UpdateMountPointRequest {
  string mountPoint = 1;
  MountOption newMountOption = 2;
}
message GetAvailableDriveLettersRequest { bool includeCloudDrive = 1; }
message GetAvailableDriveLettersResult { repeated string driveLetters = 1; }
message HasDriveLettersResult { bool hasDriveLetters = 1; }
message LocalGetSubFilesRequest {
  string parentFolder = 1;
  bool folderOnly = 2;
  bool includeCloudDrive = 3;
  bool includeAvailableDrive = 4;
}
message LocalGetSubFilesResult { repeated string subFiles = 1; }
message PushMessage { string clouddriveVersion = 1; }
message GetAllTasksCountResult {
  uint32 downloadCount = 1;
  uint32 uploadCount = 2;
  PushMessage pushMessage = 3;
  bool hasUpdate = 4;
}
message GetDownloadFileCountResult { uint32 fileCount = 1; }
message DownloadFileInfo {
  string filePath = 1;
  uint64 fileLength = 2;
  uint64 totalBufferUsed = 3;
  uint32 downloadThreadCount = 4;
  repeated string process = 5;
  string detailDownloadInfo = 6;
}
message GetDownloadFileListResult {
  double globalBytesPerSecond = 1;
  repeated DownloadFileInfo downloadFiles = 4;
}
message GetUploadFileCountResult { uint32 fileCount = 1; }
message UploadFileInfo {
  string key = 1;
  string destPath = 2;
  uint64 size = 3;
  uint64 transferedBytes = 4;
  string status = 5;
  string errorMessage = 6;
}
message GetUploadFileListRequest {
  bool getAll = 1;
  uint32 itemsPerPage = 2;
  uint32 pageNumber = 3;
  string filter = 4;
}
message GetUploadFileListResult {
  uint32 totalCount = 1;
  repeated UploadFileInfo uploadFiles = 2;
}
message MultpleUploadFileKeyRequest { repeated string keys = 1; }
message Login115EditthiscookieRequest { string editThiscookieString = 1; }
message Login115QrCodeRequest { optional string platformString = 1; }
message LoginAliyundriveOAuthRequest {
  string refresh_token = 1;
  string access_token = 2;
  uint64 expires_in = 3;
}
message LoginAliyundriveRefreshtokenRequest {
  string refreshToken = 1;
  bool useOpenAPI = 2;
}
message LoginAliyundriveQRCodeRequest { bool useOpenAPI = 1; }
message LoginBaiduPanOAuthRequest {
  string refresh_token = 1;
  string access_token = 2;
  uint64 expires_in = 3;
}
message LoginOneDriveOAuthRequest {
  string refresh_token = 1;
  string access_token = 2;
  uint64 expires_in = 3;
}
message LoginGoogleDriveOAuthRequest {
  string refresh_token = 1;
  string access_token = 2;
  uint64 expires_in = 3;
}
message LoginGoogleDriveRefreshTokenRequest {
  string client_id = 1;
  string client_secret = 2;
  string refresh_token = 3;
}
message LoginXunleiOAuthRequest {
  string refresh_token = 1;
  string access_token = 2;
  uint64 expires_in = 3;
}
message LoginWebDavRequest {
  string serverUrl = 1;
  string userName = 2;
  string password = 3;
}
message APILoginResult {
  bool success = 1;
  string errorMessage = 2;
}
message AddLocalFolderRequest { string localFolderPath = 1; }
message RemoveCloudAPIRequest {
  string cloudName = 1;
  string userName = 2;
  bool permanentRemove = 3;
}
message GetCloudAPIConfigRequest {
  string cloudName = 1;
  string userName = 2;
}
message CloudAPIList { repeated CloudAPI apis = 1; }
message CloudAPIConfig {
  uint32 maxDownloadThreads = 1;
  uint64 minReadLengthKB = 2;
  uint64 maxReadLengthKB = 3;
  uint64 defaultReadLengthKB = 4;
  uint64 maxBufferPoolSizeMB = 5;
  double maxQueriesPerSecond = 6;
  bool forceIpv4 = 7;
}
message SetCloudAPIConfigRequest {
  string cloudName = 1;
  string userName = 2;
  CloudAPIConfig config = 3;
}
message CommandRequest { string command = 1; }
message CommandResult { string result = 1; }

message StringValue { string value = 1; }
enum QRCodeScanMessageType {
  SHOW_IMAGE = 0;
  SHOW_IMAGE_CONTENT = 1;
  CHANGE_STATUS = 2;
  CLOSE = 3;
  ERROR = 4;
}
message QRCodeScanMessage {
  QRCodeScanMessageType messageType = 1;
  string message = 2;
}
message StringList { repeated string values = 1; }
enum UpdateChannel {
  Release = 0;
  Beta = 1;
}
message SystemSettings {
  // 0 means never expire, will live forever
  optional uint64 dirCacheTimeToLiveSecs = 1;
  optional uint64 maxPreProcessTasks = 2;
  optional uint64 maxProcessTasks = 3;
  optional string tempFileLocation = 4;
  optional bool syncWithCloud = 5;
  // time in secs to clear download task when no read operation
  optional uint64 readDownloaderTimeoutSecs = 6;
  // time in secs to wait before upload a local temp file
  optional uint64 uploadDelaySecs = 7;
  optional StringList processBlackList = 8;
  optional StringList uploadIgnoredExtensions = 9;
  optional UpdateChannel updateChannel = 10;
}
message SetDirCacheTimeRequest {
  string path = 1;
  // if not present, please delete the value to restore default
  optional uint64 dirCachTimeToLiveSecs = 2;
}
message GetEffectiveDirCacheTimeRequest { string path = 1; }
message GetOpenFileTableRequest { bool includeDir = 1; }
message GetEffectiveDirCacheTimeResult { uint64 dirCacheTimeSecs = 1; }
message UpdateResult {
  bool hasUpdate = 1;
  string newVersion = 2;
  string description = 3;
}
message OpenFileTable {
  map<uint64, string> openFileTable = 1;
  uint64 localOpenFileCount = 2;
}
message DirCacheItem {
  google.protobuf.Timestamp insertTime = 1;
  uint64 timeToLiveSecs = 2;
  uint64 referencedSubfileLen = 3;
}
message DirCacheTable { map<string, DirCacheItem> dirCacheTable = 1; }
message TempFileTable {
  uint64 count = 1;
  repeated string tempFiles = 2;
}
message ConfirmEmailRequest { string confirmCode = 1; }
message SendResetAccountEmailRequest { string email = 1; }
message ResetAccountRequest {
  string resetCode = 1;
  string newPassword = 2;
}
message CloudDrivePlan {
  string id = 1;
  string name = 2;
  string description = 3;
  double price = 4;
  optional int64 duration = 5;
  string durationDescription = 6;
  bool isActive = 7;
  optional string fontAwesomeIcon = 8;
  optional double originalPrice = 9;
}
message GetCloudDrivePlansResult { repeated CloudDrivePlan plans = 1; }
message JoinPlanRequest {
  string planId = 1;
  optional string couponCode = 2;
}
message PaymentInfo {
  string user_id = 1;
  string plan_id = 2;
  map<string, string> paymentMethods = 3;
}
message JoinPlanResult {
  bool success = 1;
  double balance = 2;
  string planName = 3;
  string planDescription = 4;
  optional google.protobuf.Timestamp expireTime = 5;
  optional PaymentInfo paymentInfo = 6;
}
message Promotion {
  string id = 1;
  string cloudName = 2;
  string title = 3;
  optional string subTitle = 4;
  string rules = 5;
  optional string notice = 6;
  string url = 7;
}
message GetPromotionsResult { repeated Promotion promotions = 1; }
message OfflineStatus {
  uint32 quota = 1;
  uint32 total = 2;
}
enum OfflineFileStatus {
  OFFLINE_INIT = 0;
  OFFLINE_DOWNLOADING = 1;
  OFFLINE_FINISHED = 2;
  OFFLINE_ERROR = 3;
  OFFLINE_UNKNOWN = 4;
}
message OfflineFile {
  string name = 1;
  uint64 size = 2;
  string url = 3;
  OfflineFileStatus status = 4;
  string infoHash = 5;
  string fileId = 6;
  uint64 add_time = 7;
  string parentId = 8;
  double percendDone = 9;
  uint64 peers = 10;
}
message OfflineFileListAllRequest {
  string cloudName = 1;
  string cloudAccountId = 2;
  uint32 page = 3;
}
message OfflineFileListAllResult {
  uint32 pageNo = 1;
  uint32 pageRowCount = 2;
  uint32 pageCount = 3;
  uint32 totalCount = 4;
  OfflineStatus status = 5;
  repeated OfflineFile offlineFiles = 6;
}
message OfflineFileListResult {
  repeated OfflineFile offlineFiles = 1;
  OfflineStatus status = 2;
}
message BindCloudAccountRequest {
  string cloudName = 1;
  string cloudAccountId = 2;
}
message TransferBalanceRequest {
  string toUserName = 1;
  double amount = 2;
  string password = 3;
}
message ChangeUserNameEmailRequest {
  string newUserName = 1;
  string newEmail = 2;
  string password = 3;
}
message BalanceLog {
  double balance_before = 1;
  double balance_after = 2;
  double balance_change = 3;
  enum BalancceChangeOperation {
    Unknown = 0;
    Deposit = 1;
    Refund = 2;
  }
  BalancceChangeOperation operation = 4;
  string operation_source = 5;
  string operation_id = 6;
  google.protobuf.Timestamp operation_time = 7;
}
message BalanceLogResult { repeated BalanceLog logs = 1; }
message CheckFinalPriceRequest {
  string planId = 1;
  string couponCode = 2;
}
message CheckFinalPriceResult {
  string planId = 1;
  double planPrice = 2;
  double userBalance = 3;
  double couponDiscountAmount = 4;
  optional string couponError = 5;
  double finalPrice = 6;
}
message CheckActivationCodeResult {
  string planId = 1;
  string planName = 2;
  string planDescription = 3;
}
message CheckCouponCodeRequest {
  string planId = 1;
  string couponCode = 2;
}
message CouponCodeResult {
  string couponCode = 1;
  string couponDescription = 2;
  bool isPercentage = 3;
  double couponDiscountAmount = 4;
}
message FileBackupRule {
  oneof rule {
    string extensions = 1;
    string fileNames = 2;
    string regex = 3;
    uint64 minSize = 4;
  }
  bool isEnabled = 100;
  bool isBlackList = 101;
  bool applyToFolder = 102;
}
enum FileReplaceRule {
  Skip = 0;
  Overwrite = 1;
  KeepHistoryVersion = 2;
}
enum FileDeleteRule {
  Delete = 0;
  Recycle = 1;
  Keep = 2;
  MoveToVersionHistory = 3;
}
message BackupDestination {
  string destinationPath = 1;
  bool isEnabled = 2;
  optional google.protobuf.Timestamp lastFinishTime = 3;
}
message DaysOfWeek {
  repeated uint32 daysOfWeek = 1; //Mon: 1, Tue: 2, ..., Sun: 0
}
message TimeSchedule {
  bool isEnabled = 1;
  uint32 hour = 2;
  uint32 minute = 3;
  uint32 second = 4;
  optional DaysOfWeek daysOfWeek = 5; //none means every day
}
message Backup {
  string sourcePath = 1;
  repeated BackupDestination destinations = 2;
  repeated FileBackupRule fileBackupRules = 3;
  FileReplaceRule fileReplaceRule = 4;
  FileDeleteRule fileDeleteRule = 5;
  bool isEnabled = 6;
  bool fileSystemWatchEnabled = 7;
  int64 walkingThroughIntervalSecs = 8; // 0 means never auto walking through
  bool forceWalkingThroughOnStart = 9;
  repeated TimeSchedule timeSchedules = 10;
  bool isTimeSchedulesEnabled = 11;
}
message BackupStatus {
  enum Status {
    Idle = 0;
    WalkingThrough = 1;
    Error = 2;
    Disabled = 3;
  }
  enum FileWatchStatus {
    WatcherIdle = 0;
    Watching = 1;
    WatcherError = 2;
    WatcherDisabled = 3;
  }
  Backup backup = 1;
  Status status = 2;
  string statusMessage = 3;
  FileWatchStatus watcherStatus = 4;
  string watcherStatusMessage = 5;
}
message BackupList { repeated BackupStatus backups = 1; }
message BackupModifyRequest {
  string sourcePath = 1;
  repeated BackupDestination destinations = 2;
  repeated FileBackupRule fileBackupRules = 3;
  optional FileReplaceRule fileReplaceRule = 4;
  optional FileDeleteRule fileDeleteRule = 5;
  optional bool fileSystemWatchEnabled = 6;
  optional int64 walkingThroughIntervalSecs = 7;
}
message BackupSetEnabledRequest {
  string sourcePath = 1;
  bool isEnabled = 2;
}